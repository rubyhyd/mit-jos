diff --git a/grade-lab3 b/grade-lab3
index 365ba56..ec4811a 100755
--- a/grade-lab3
+++ b/grade-lab3
@@ -133,3 +133,9 @@ def test_evilhello():
 end_part("B")
 
 run_tests()
+
+
+
+
+
+
diff --git a/kern/env.c b/kern/env.c
index b98669f..fe4c3cc 100644
--- a/kern/env.c
+++ b/kern/env.c
@@ -275,7 +275,7 @@ env_alloc(struct Env **newenv_store, envid_t parent_id)
 static void
 region_alloc(struct Env *e, void *va, size_t len)
 {
-	cprintf("regin_alloc! va is 0x%08x, len is %d\n", va, len);
+	//cprintf("regin_alloc! va is 0x%08x, len is %d\n", va, len);
 	// LAB 3: Your code here.
 	// (But only if you need it for load_icode.)
 	//
@@ -291,7 +291,7 @@ region_alloc(struct Env *e, void *va, size_t len)
 			panic("No free pages for envs!");
 		page_insert(e->env_pgdir, pp, i, PTE_U | PTE_W);
 	}
-	cprintf("regin_alloc! end!\n");
+	//cprintf("regin_alloc! end!\n");
 }
 
 //
@@ -376,7 +376,6 @@ load_icode(struct Env *e, uint8_t *binary)
 				//cprintf("binary[ph->p_offset + i] is %d\n", binary[ph->p_offset + i]);
 				va[i] = binary[ph->p_offset + i];
 			}
-			cprintf("bug2\n");
 		}
 	e->env_tf.tf_eip = elf->e_entry;
 	// Now map one page for the program's initial stack
diff --git a/kern/init.c b/kern/init.c
index d2736b6..7c43226 100644
--- a/kern/init.c
+++ b/kern/init.c
@@ -35,15 +35,12 @@ i386_init(void)
 	env_init();
 	trap_init();
 
-	int a = 0;
-	int b = 1/a;
-
 #if defined(TEST)
 	// Don't touch -- used by grading script!
 	ENV_CREATE(TEST, ENV_TYPE_USER);
 #else
 	// Touch all you want.
-	ENV_CREATE(user_divzero, ENV_TYPE_USER);
+	ENV_CREATE(user_hello, ENV_TYPE_USER);
 #endif // TEST*
 
 	// We only have one user environment for now, so just run it.
diff --git a/kern/syscall.c b/kern/syscall.c
index 3e11eee..5889a0f 100644
--- a/kern/syscall.c
+++ b/kern/syscall.c
@@ -21,7 +21,33 @@ sys_cputs(const char *s, size_t len)
 	// Destroy the environment if not.
 
 	// LAB 3: Your code here.
+	bool readable = true;
+	void *va = (void *)s;
+	for (;va < (void *)s + len; va += PGSIZE) {
+		pte_t * p= pgdir_walk(curenv->env_pgdir, va, 0);
+		if (!p || !(*p & PTE_P) ||!(*p & PTE_U))
+			readable = false;
+	}
+	if (!readable) {
+		cprintf("[%08x] user_mem_check assertion failure for va %08x\n",
+			curenv->env_id, s);
+		syscall(SYS_env_destroy, curenv->env_id, 0, 0, 0, 0);
+		return;
+	}
+	// if (!readable) {
+	// 	envid_t envid = curenv->env_id;
+	// 	int r;
+	// 	struct Env *e;
 
+	// 	if ((r = envid2env(envid, &e, 1)) < 0)
+	// 		return;
+	// 	if (e == curenv)
+	// 		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
+	// 	else
+	// 		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
+	// 	env_destroy(e);
+	// 	return;
+	// }
 	// Print the string supplied by the user.
 	cprintf("%.*s", len, s);
 }
@@ -68,11 +94,28 @@ syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4,
 {
 	// Call the function corresponding to the 'syscallno' parameter.
 	// Return any appropriate return value.
-	// LAB 3: Your code here.
 
-	panic("syscall not implemented");
+	//panic("syscall not implemented");
+
+	cprintf("syscall! syscallno is %d\n", syscallno);
 
 	switch (syscallno) {
+	case SYS_cputs: {
+		sys_cputs((const char *)a1, a2);
+		return 0;
+	}
+	case SYS_cgetc: {
+		sys_cgetc();
+		return 0;
+	}
+	case SYS_getenvid: {
+		sys_getenvid();
+		return 0;
+	}
+	case SYS_env_destroy: {
+		sys_env_destroy((envid_t)a1);
+		return 0;
+	}
 	default:
 		return -E_NO_SYS;
 	}
diff --git a/kern/trap.c b/kern/trap.c
index 1ff0c3f..cca0569 100644
--- a/kern/trap.c
+++ b/kern/trap.c
@@ -84,12 +84,12 @@ trap_init(void)
 	NAME(H_T_ALIGN  );
 	NAME(H_T_MCHK   );
 	NAME(H_T_SIMDERR);
-	//NAME(H_T_SYSCALL);
+	NAME(H_T_SYSCALL);
 
 	SETGATE(idt[0] , 0, GD_KT, H_T_DIVIDE , 0);
 	SETGATE(idt[1] , 0, GD_KT, H_T_DEBUG  , 0);
 	SETGATE(idt[2] , 0, GD_KT, H_T_NMI    , 0);
-	SETGATE(idt[3] , 0, GD_KT, H_T_BRKPT  , 0);
+	SETGATE(idt[3] , 0, GD_KT, H_T_BRKPT  , 3);
 	SETGATE(idt[4] , 0, GD_KT, H_T_OFLOW  , 0);
 	SETGATE(idt[5] , 0, GD_KT, H_T_BOUND  , 0);
 	SETGATE(idt[6] , 0, GD_KT, H_T_ILLOP  , 0);
@@ -104,7 +104,7 @@ trap_init(void)
 	SETGATE(idt[17], 0, GD_KT, H_T_ALIGN  , 0);
 	SETGATE(idt[18], 0, GD_KT, H_T_MCHK   , 0);
 	SETGATE(idt[19], 0, GD_KT, H_T_SIMDERR, 0);
-	//SETGATE(idt[48], 1, GD_KT, H_T_SYSCALL, 0);
+	SETGATE(idt[48], 1, GD_KT, H_T_SYSCALL, 3);
 
 	// Per-CPU setup 
 	trap_init_percpu();
@@ -183,12 +183,25 @@ trap_dispatch(struct Trapframe *tf)
 {
 	// Handle processor exceptions.
 	// LAB 3: Your code here.
-	switch(tf->tf_trapno) {
-		case 0: {
+	cprintf(">> Dispatch <<\n");
+	if(tf->tf_trapno == T_DIVIDE) {
 			cprintf("1/0 is not allowed!\n");
-			break;
 		}
-	}
+	if(tf->tf_trapno == T_BRKPT) {
+			cprintf("Breakpoint!\n");
+			monitor(tf);
+		}
+	if(tf->tf_trapno == T_PGFLT) {
+			cprintf("Page fault!\n");
+			page_fault_handler(tf);
+		}
+	if(tf->tf_trapno == T_SYSCALL) {
+			cprintf("System call!\n");
+			syscall(tf->tf_regs.reg_eax, tf->tf_regs.reg_edx, tf->tf_regs.reg_ecx,
+				tf->tf_regs.reg_ebx, tf->tf_regs.reg_edi, tf->tf_regs.reg_esi);
+			return;
+		}
+	
 	// Unexpected trap: The user process or the kernel has a bug.
 	print_trapframe(tf);
 	if (tf->tf_cs == GD_KT)
@@ -247,11 +260,21 @@ page_fault_handler(struct Trapframe *tf)
 	fault_va = rcr2();
 
 	// Handle kernel-mode page faults.
-
-	// LAB 3: Your code here.
+	if (rcr3() == PADDR(kern_pgdir)) {
+		cprintf("Kernel page fault!\n");
+		return;
+	}
+	// struct PageInfo * pp = page_alloc(ALLOC_ZERO);
+	// if (pp && page_insert(kern_pgdir, pp, (void *)fault_va, PTE_P | PTE_W) == 0)
+	// 	cprintf("page fault handled!\n");
+	// else
+	// 	panic("page fault abort, no free memory\n");
 
 	// We've already handled kernel-mode exceptions, so if we get here,
 	// the page fault happened in user mode.
+	
+	// cprintf("[%08x] user_mem_check assertion failure for va [%08x]",
+	// 		curenv->env_id, fault_va);
 
 	// Destroy the environment that caused the fault.
 	cprintf("[%08x] user fault va %08x ip %08x\n",
diff --git a/kern/trapentry.S b/kern/trapentry.S
index adbcd69..00b46da 100644
--- a/kern/trapentry.S
+++ b/kern/trapentry.S
@@ -64,7 +64,7 @@ TRAPHANDLER_NOEC(H_T_FPERR  , 16)
 TRAPHANDLER(H_T_ALIGN  , 17)		
 TRAPHANDLER_NOEC(H_T_MCHK   , 18)		
 TRAPHANDLER_NOEC(H_T_SIMDERR, 19)		
-
+TRAPHANDLER_NOEC(H_T_SYSCALL, 48)
 /*
  * Lab 3: Your code here for _alltraps
  */
@@ -74,9 +74,9 @@ TRAPHANDLER_NOEC(H_T_SIMDERR, 19)
  	pushl %es
  	pushal
  	
- 	movl $GD_KD, %ax
- 	movl %ax, %ds
- 	movl %ax, %es
+ 	movl $GD_KD, %eax
+ 	movl %eax, %ds
+ 	movl %eax, %es
 
  	pushl %esp 
   call trap
@@ -87,4 +87,3 @@ TRAPHANDLER_NOEC(H_T_SIMDERR, 19)
 
 
 
-
diff --git a/lib/entry.S b/lib/entry.S
index 222d16c..4a62caf 100644
--- a/lib/entry.S
+++ b/lib/entry.S
@@ -24,10 +24,10 @@ _start:
 	jne args_exist
 
 	// If not, push dummy argc/argv arguments.
-	// This happens when we are loaded by the kernel,
-	// because the kernel does not know about passing arguments.
-	pushl $0
+	// This happcause the kernel does not know about passing arguments.
 	pushl $0
+	pushl $0ens when we are loaded by the kernel,
+	// be
 
 args_exist:
 	call libmain
diff --git a/lib/libmain.c b/lib/libmain.c
index 8a14b29..4d3f3b5 100644
--- a/lib/libmain.c
+++ b/lib/libmain.c
@@ -14,7 +14,8 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-
+	thisenv = &envs[0];
+	
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
 		binaryname = argv[0];
diff --git a/obj/.deps b/obj/.deps
index 35791ca..455f720 100644
--- a/obj/.deps
+++ b/obj/.deps
@@ -6,14 +6,14 @@ obj/user/badsegment.o: user/badsegment.c inc/lib.h inc/types.h \
  inc/trap.h inc/memlayout.h inc/mmu.h inc/syscall.h
 obj/kern/entry.o: kern/entry.S inc/mmu.h inc/memlayout.h inc/trap.h
 obj/lib/string.o: lib/string.c inc/string.h inc/types.h
-obj/boot/main.o: boot/main.c inc/x86.h inc/types.h inc/elf.h
-obj/kern/console.o: kern/console.c inc/x86.h inc/types.h inc/memlayout.h \
- inc/mmu.h inc/kbdreg.h inc/string.h inc/assert.h inc/stdio.h \
- inc/stdarg.h kern/console.h
 obj/kern/init.o: kern/init.c inc/stdio.h inc/stdarg.h inc/string.h \
  inc/types.h inc/assert.h kern/monitor.h kern/console.h kern/pmap.h \
  inc/memlayout.h inc/mmu.h kern/kclock.h kern/env.h inc/env.h inc/trap.h \
  kern/trap.h
+obj/kern/console.o: kern/console.c inc/x86.h inc/types.h inc/memlayout.h \
+ inc/mmu.h inc/kbdreg.h inc/string.h inc/assert.h inc/stdio.h \
+ inc/stdarg.h kern/console.h
+obj/boot/main.o: boot/main.c inc/x86.h inc/types.h inc/elf.h
 obj/lib/printf.o: lib/printf.c inc/types.h inc/stdio.h inc/stdarg.h \
  inc/lib.h inc/string.h inc/error.h inc/assert.h inc/env.h inc/trap.h \
  inc/memlayout.h inc/mmu.h inc/syscall.h
@@ -21,11 +21,11 @@ obj/lib/entry.o: lib/entry.S inc/mmu.h inc/memlayout.h
 obj/user/faultwrite.o: user/faultwrite.c inc/lib.h inc/types.h \
  inc/stdio.h inc/stdarg.h inc/string.h inc/error.h inc/assert.h inc/env.h \
  inc/trap.h inc/memlayout.h inc/mmu.h inc/syscall.h
-obj/kern/printfmt.o: lib/printfmt.c inc/types.h inc/stdio.h inc/stdarg.h \
- inc/string.h inc/error.h
 obj/user/faultread.o: user/faultread.c inc/lib.h inc/types.h inc/stdio.h \
  inc/stdarg.h inc/string.h inc/error.h inc/assert.h inc/env.h inc/trap.h \
  inc/memlayout.h inc/mmu.h inc/syscall.h
+obj/kern/printfmt.o: lib/printfmt.c inc/types.h inc/stdio.h inc/stdarg.h \
+ inc/string.h inc/error.h
 obj/lib/syscall.o: lib/syscall.c inc/syscall.h inc/lib.h inc/types.h \
  inc/stdio.h inc/stdarg.h inc/string.h inc/error.h inc/assert.h inc/env.h \
  inc/trap.h inc/memlayout.h inc/mmu.h
@@ -46,11 +46,11 @@ obj/kern/monitor.o: kern/monitor.c inc/stdio.h inc/stdarg.h inc/string.h \
 obj/user/breakpoint.o: user/breakpoint.c inc/lib.h inc/types.h \
  inc/stdio.h inc/stdarg.h inc/string.h inc/error.h inc/assert.h inc/env.h \
  inc/trap.h inc/memlayout.h inc/mmu.h inc/syscall.h
+obj/lib/readline.o: lib/readline.c inc/stdio.h inc/stdarg.h inc/error.h
 obj/kern/syscall.o: kern/syscall.c inc/x86.h inc/types.h inc/error.h \
  inc/string.h inc/assert.h inc/stdio.h inc/stdarg.h kern/env.h inc/env.h \
  inc/trap.h inc/memlayout.h inc/mmu.h kern/pmap.h kern/trap.h \
  kern/syscall.h inc/syscall.h kern/console.h
-obj/lib/readline.o: lib/readline.c inc/stdio.h inc/stdarg.h inc/error.h
 obj/kern/kdebug.o: kern/kdebug.c inc/stab.h inc/types.h inc/string.h \
  inc/memlayout.h inc/mmu.h inc/assert.h inc/stdio.h inc/stdarg.h \
  kern/kdebug.h kern/pmap.h kern/env.h inc/env.h inc/trap.h
@@ -91,16 +91,16 @@ obj/user/testbss.o: user/testbss.c inc/lib.h inc/types.h inc/stdio.h \
 obj/user/evilhello.o: user/evilhello.c inc/lib.h inc/types.h inc/stdio.h \
  inc/stdarg.h inc/string.h inc/error.h inc/assert.h inc/env.h inc/trap.h \
  inc/memlayout.h inc/mmu.h inc/syscall.h
-obj/user/buggyhello.o: user/buggyhello.c inc/lib.h inc/types.h \
- inc/stdio.h inc/stdarg.h inc/string.h inc/error.h inc/assert.h inc/env.h \
- inc/trap.h inc/memlayout.h inc/mmu.h inc/syscall.h
-obj/kern/trapentry.o: kern/trapentry.S inc/mmu.h inc/memlayout.h \
- inc/trap.h
+obj/user/softint.o: user/softint.c inc/lib.h inc/types.h inc/stdio.h \
+ inc/stdarg.h inc/string.h inc/error.h inc/assert.h inc/env.h inc/trap.h \
+ inc/memlayout.h inc/mmu.h inc/syscall.h
+obj/boot/boot.o: boot/boot.S inc/mmu.h
 obj/kern/trap.o: kern/trap.c inc/mmu.h inc/types.h inc/x86.h inc/assert.h \
  inc/stdio.h inc/stdarg.h kern/pmap.h inc/memlayout.h kern/trap.h \
  inc/trap.h kern/console.h kern/monitor.h kern/env.h inc/env.h \
  kern/syscall.h inc/syscall.h
-obj/boot/boot.o: boot/boot.S inc/mmu.h
-obj/user/softint.o: user/softint.c inc/lib.h inc/types.h inc/stdio.h \
- inc/stdarg.h inc/string.h inc/error.h inc/assert.h inc/env.h inc/trap.h \
- inc/memlayout.h inc/mmu.h inc/syscall.h
+obj/kern/trapentry.o: kern/trapentry.S inc/mmu.h inc/memlayout.h \
+ inc/trap.h
+obj/user/buggyhello.o: user/buggyhello.c inc/lib.h inc/types.h \
+ inc/stdio.h inc/stdarg.h inc/string.h inc/error.h inc/assert.h inc/env.h \
+ inc/trap.h inc/memlayout.h inc/mmu.h inc/syscall.h
diff --git a/obj/.vars.INIT_CFLAGS b/obj/.vars.INIT_CFLAGS
index 8b13789..d498e28 100644
--- a/obj/.vars.INIT_CFLAGS
+++ b/obj/.vars.INIT_CFLAGS
@@ -1 +1 @@
-
+-DTEST=user_hello
diff --git a/obj/kern/env.o b/obj/kern/env.o
index cbd7416..4829bde 100644
Binary files a/obj/kern/env.o and b/obj/kern/env.o differ
diff --git a/obj/kern/init.o b/obj/kern/init.o
index d4ff31f..0f02e50 100644
Binary files a/obj/kern/init.o and b/obj/kern/init.o differ
diff --git a/obj/kern/kernel b/obj/kern/kernel
index 6e38039..7646926 100755
Binary files a/obj/kern/kernel and b/obj/kern/kernel differ
diff --git a/obj/kern/kernel.asm b/obj/kern/kernel.asm
index cf02b62..a89a60d 100644
--- a/obj/kern/kernel.asm
+++ b/obj/kern/kernel.asm
@@ -93,7 +93,7 @@ f0100050:	89 44 24 08          	mov    %eax,0x8(%esp)
 f0100054:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f010005b:	00 
 f010005c:	c7 04 24 41 3a 19 f0 	movl   $0xf0193a41,(%esp)
-f0100063:	e8 fb 4b 00 00       	call   f0104c63 <memset>
+f0100063:	e8 43 4e 00 00       	call   f0104eab <memset>
 
 	// Initialize the console.
 	// Can't call cprintf until after we do this!
@@ -103,8 +103,8 @@ f0100068:	e8 d3 04 00 00       	call   f0100540 <cons_init>
 	cprintf("6828 decimal is %o octal!\n", 6828);
 f010006d:	c7 44 24 04 ac 1a 00 	movl   $0x1aac,0x4(%esp)
 f0100074:	00 
-f0100075:	c7 04 24 00 51 10 f0 	movl   $0xf0105100,(%esp)
-f010007c:	e8 09 39 00 00       	call   f010398a <cprintf>
+f0100075:	c7 04 24 40 53 10 f0 	movl   $0xf0105340,(%esp)
+f010007c:	e8 d5 38 00 00       	call   f0103956 <cprintf>
 
 	// Lab 2 memory management initialization functions
 	mem_init();
@@ -112,26 +112,26 @@ f0100081:	e8 e7 16 00 00       	call   f010176d <mem_init>
 
 	// Lab 3 user environment initialization functions
 	env_init();
-f0100086:	e8 64 32 00 00       	call   f01032ef <env_init>
+f0100086:	e8 3c 32 00 00       	call   f01032c7 <env_init>
 	trap_init();
-f010008b:	e8 71 39 00 00       	call   f0103a01 <trap_init>
+f010008b:	e8 3d 39 00 00       	call   f01039cd <trap_init>
+
 #if defined(TEST)
 	// Don't touch -- used by grading script!
 	ENV_CREATE(TEST, ENV_TYPE_USER);
-#else
-	// Touch all you want.
-	ENV_CREATE(user_divzero, ENV_TYPE_USER);
 f0100090:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f0100097:	00 
-f0100098:	c7 04 24 60 a2 14 f0 	movl   $0xf014a260,(%esp)
-f010009f:	e8 64 34 00 00       	call   f0103508 <env_create>
+f0100098:	c7 04 24 59 7c 13 f0 	movl   $0xf0137c59,(%esp)
+f010009f:	e8 3c 34 00 00       	call   f01034e0 <env_create>
+	// Touch all you want.
+	ENV_CREATE(user_hello, ENV_TYPE_USER);
 #endif // TEST*
 
 	// We only have one user environment for now, so just run it.
 	env_run(&envs[0]);
 f01000a4:	a1 a8 3c 19 f0       	mov    0xf0193ca8,%eax
 f01000a9:	89 04 24             	mov    %eax,(%esp)
-f01000ac:	e8 f0 37 00 00       	call   f01038a1 <env_run>
+f01000ac:	e8 bc 37 00 00       	call   f010386d <env_run>
 
 f01000b1 <_panic>:
  * Panic is called on unresolvable fatal errors.
@@ -167,15 +167,15 @@ f01000d0:	8b 45 0c             	mov    0xc(%ebp),%eax
 f01000d3:	89 44 24 08          	mov    %eax,0x8(%esp)
 f01000d7:	8b 45 08             	mov    0x8(%ebp),%eax
 f01000da:	89 44 24 04          	mov    %eax,0x4(%esp)
-f01000de:	c7 04 24 1b 51 10 f0 	movl   $0xf010511b,(%esp)
-f01000e5:	e8 a0 38 00 00       	call   f010398a <cprintf>
+f01000de:	c7 04 24 5b 53 10 f0 	movl   $0xf010535b,(%esp)
+f01000e5:	e8 6c 38 00 00       	call   f0103956 <cprintf>
 	vcprintf(fmt, ap);
 f01000ea:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 f01000ee:	89 34 24             	mov    %esi,(%esp)
-f01000f1:	e8 61 38 00 00       	call   f0103957 <vcprintf>
+f01000f1:	e8 2d 38 00 00       	call   f0103923 <vcprintf>
 	cprintf("\n");
-f01000f6:	c7 04 24 71 66 10 f0 	movl   $0xf0106671,(%esp)
-f01000fd:	e8 88 38 00 00       	call   f010398a <cprintf>
+f01000f6:	c7 04 24 3e 68 10 f0 	movl   $0xf010683e,(%esp)
+f01000fd:	e8 54 38 00 00       	call   f0103956 <cprintf>
 	mon_backtrace(0, 0, 0);
 f0100102:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 f0100109:	00 
@@ -213,16 +213,16 @@ f0100136:	8b 45 0c             	mov    0xc(%ebp),%eax
 f0100139:	89 44 24 08          	mov    %eax,0x8(%esp)
 f010013d:	8b 45 08             	mov    0x8(%ebp),%eax
 f0100140:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0100144:	c7 04 24 33 51 10 f0 	movl   $0xf0105133,(%esp)
-f010014b:	e8 3a 38 00 00       	call   f010398a <cprintf>
+f0100144:	c7 04 24 73 53 10 f0 	movl   $0xf0105373,(%esp)
+f010014b:	e8 06 38 00 00       	call   f0103956 <cprintf>
 	vcprintf(fmt, ap);
 f0100150:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 f0100154:	8b 45 10             	mov    0x10(%ebp),%eax
 f0100157:	89 04 24             	mov    %eax,(%esp)
-f010015a:	e8 f8 37 00 00       	call   f0103957 <vcprintf>
+f010015a:	e8 c4 37 00 00       	call   f0103923 <vcprintf>
 	cprintf("\n");
-f010015f:	c7 04 24 71 66 10 f0 	movl   $0xf0106671,(%esp)
-f0100166:	e8 1f 38 00 00       	call   f010398a <cprintf>
+f010015f:	c7 04 24 3e 68 10 f0 	movl   $0xf010683e,(%esp)
+f0100166:	e8 eb 37 00 00       	call   f0103956 <cprintf>
 	va_end(ap);
 }
 f010016b:	83 c4 14             	add    $0x14,%esp
@@ -360,7 +360,7 @@ f0100208:	83 e0 7f             	and    $0x7f,%eax
 f010020b:	88 c2                	mov    %al,%dl
 		shift &= ~(shiftcode[data] | E0ESC);
 f010020d:	81 e2 ff 00 00 00    	and    $0xff,%edx
-f0100213:	8a 82 a0 52 10 f0    	mov    -0xfefad60(%edx),%al
+f0100213:	8a 82 e0 54 10 f0    	mov    -0xfefab20(%edx),%al
 f0100219:	83 c8 40             	or     $0x40,%eax
 f010021c:	25 ff 00 00 00       	and    $0xff,%eax
 f0100221:	f7 d0                	not    %eax
@@ -406,18 +406,18 @@ f010024b:	89 0d 60 3a 19 f0    	mov    %ecx,0xf0193a60
 	shift |= shiftcode[data];
 f0100251:	81 e2 ff 00 00 00    	and    $0xff,%edx
 f0100257:	31 c0                	xor    %eax,%eax
-f0100259:	8a 82 a0 52 10 f0    	mov    -0xfefad60(%edx),%al
+f0100259:	8a 82 e0 54 10 f0    	mov    -0xfefab20(%edx),%al
 f010025f:	0b 05 60 3a 19 f0    	or     0xf0193a60,%eax
 	shift ^= togglecode[data];
 f0100265:	31 c9                	xor    %ecx,%ecx
-f0100267:	8a 8a a0 51 10 f0    	mov    -0xfefae60(%edx),%cl
+f0100267:	8a 8a e0 53 10 f0    	mov    -0xfefac20(%edx),%cl
 f010026d:	31 c8                	xor    %ecx,%eax
 f010026f:	a3 60 3a 19 f0       	mov    %eax,0xf0193a60
 
 	c = charcode[shift & (CTL | SHIFT)][data];
 f0100274:	89 c1                	mov    %eax,%ecx
 f0100276:	83 e1 03             	and    $0x3,%ecx
-f0100279:	8b 0c 8d 80 51 10 f0 	mov    -0xfefae80(,%ecx,4),%ecx
+f0100279:	8b 0c 8d c0 53 10 f0 	mov    -0xfefac40(,%ecx,4),%ecx
 f0100280:	8a 14 11             	mov    (%ecx,%edx,1),%dl
 f0100283:	31 db                	xor    %ebx,%ebx
 f0100285:	88 d3                	mov    %dl,%bl
@@ -462,8 +462,8 @@ f01002ae:	75 26                	jne    f01002d6 <kbd_proc_data+0x101>
 f01002b0:	81 fb e9 00 00 00    	cmp    $0xe9,%ebx
 f01002b6:	75 1e                	jne    f01002d6 <kbd_proc_data+0x101>
 		cprintf("Rebooting!\n");
-f01002b8:	c7 04 24 4d 51 10 f0 	movl   $0xf010514d,(%esp)
-f01002bf:	e8 c6 36 00 00       	call   f010398a <cprintf>
+f01002b8:	c7 04 24 8d 53 10 f0 	movl   $0xf010538d,(%esp)
+f01002bf:	e8 92 36 00 00       	call   f0103956 <cprintf>
 }
 
 static __inline void
@@ -712,7 +712,7 @@ f0100464:	00
 f0100465:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
 f010046b:	89 54 24 04          	mov    %edx,0x4(%esp)
 f010046f:	89 04 24             	mov    %eax,(%esp)
-f0100472:	e8 3a 48 00 00       	call   f0104cb1 <memmove>
+f0100472:	e8 82 4a 00 00       	call   f0104ef9 <memmove>
 		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
 			crt_buf[i] = 0x0700 | ' ';
 f0100477:	8b 15 8c 3c 19 f0    	mov    0xf0193c8c,%edx
@@ -1036,8 +1036,8 @@ f01005fc:	ec                   	in     (%dx),%al
 f01005fd:	84 c9                	test   %cl,%cl
 f01005ff:	75 0c                	jne    f010060d <cons_init+0xcd>
 		cprintf("Serial port does not exist!\n");
-f0100601:	c7 04 24 59 51 10 f0 	movl   $0xf0105159,(%esp)
-f0100608:	e8 7d 33 00 00       	call   f010398a <cprintf>
+f0100601:	c7 04 24 99 53 10 f0 	movl   $0xf0105399,(%esp)
+f0100608:	e8 49 33 00 00       	call   f0103956 <cprintf>
 }
 f010060d:	83 c4 1c             	add    $0x1c,%esp
 f0100610:	5b                   	pop    %ebx
@@ -1128,8 +1128,8 @@ f010064b:	89 e5                	mov    %esp,%ebp
 f010064d:	56                   	push   %esi
 f010064e:	53                   	push   %ebx
 f010064f:	83 ec 10             	sub    $0x10,%esp
-f0100652:	bb a4 59 10 f0       	mov    $0xf01059a4,%ebx
-f0100657:	be f8 59 10 f0       	mov    $0xf01059f8,%esi
+f0100652:	bb e4 5b 10 f0       	mov    $0xf0105be4,%ebx
+f0100657:	be 38 5c 10 f0       	mov    $0xf0105c38,%esi
 	int i;
 
 	for (i = 0; i < NCOMMANDS; i++)
@@ -1138,8 +1138,8 @@ f010065c:	8b 03                	mov    (%ebx),%eax
 f010065e:	89 44 24 08          	mov    %eax,0x8(%esp)
 f0100662:	8b 43 fc             	mov    -0x4(%ebx),%eax
 f0100665:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0100669:	c7 04 24 a0 53 10 f0 	movl   $0xf01053a0,(%esp)
-f0100670:	e8 15 33 00 00       	call   f010398a <cprintf>
+f0100669:	c7 04 24 e0 55 10 f0 	movl   $0xf01055e0,(%esp)
+f0100670:	e8 e1 32 00 00       	call   f0103956 <cprintf>
 f0100675:	83 c3 0c             	add    $0xc,%ebx
 int
 mon_help(int argc, char **argv, struct Trapframe *tf)
@@ -1170,41 +1170,41 @@ f010068b:	83 ec 18             	sub    $0x18,%esp
 	extern char _start[], entry[], etext[], edata[], end[];
 
 	cprintf("Special kernel symbols:\n");
-f010068e:	c7 04 24 a9 53 10 f0 	movl   $0xf01053a9,(%esp)
-f0100695:	e8 f0 32 00 00       	call   f010398a <cprintf>
+f010068e:	c7 04 24 e9 55 10 f0 	movl   $0xf01055e9,(%esp)
+f0100695:	e8 bc 32 00 00       	call   f0103956 <cprintf>
 	cprintf("  _start                  %08x (phys)\n", _start);
 f010069a:	c7 44 24 04 0c 00 10 	movl   $0x10000c,0x4(%esp)
 f01006a1:	00 
-f01006a2:	c7 04 24 6c 55 10 f0 	movl   $0xf010556c,(%esp)
-f01006a9:	e8 dc 32 00 00       	call   f010398a <cprintf>
+f01006a2:	c7 04 24 ac 57 10 f0 	movl   $0xf01057ac,(%esp)
+f01006a9:	e8 a8 32 00 00       	call   f0103956 <cprintf>
 	cprintf("  entry  %08x (virt)  %08x (phys)\n", entry, entry - KERNBASE);
 f01006ae:	c7 44 24 08 0c 00 10 	movl   $0x10000c,0x8(%esp)
 f01006b5:	00 
 f01006b6:	c7 44 24 04 0c 00 10 	movl   $0xf010000c,0x4(%esp)
 f01006bd:	f0 
-f01006be:	c7 04 24 94 55 10 f0 	movl   $0xf0105594,(%esp)
-f01006c5:	e8 c0 32 00 00       	call   f010398a <cprintf>
+f01006be:	c7 04 24 d4 57 10 f0 	movl   $0xf01057d4,(%esp)
+f01006c5:	e8 8c 32 00 00       	call   f0103956 <cprintf>
 	cprintf("  etext  %08x (virt)  %08x (phys)\n", etext, etext - KERNBASE);
-f01006ca:	c7 44 24 08 f7 50 10 	movl   $0x1050f7,0x8(%esp)
+f01006ca:	c7 44 24 08 37 53 10 	movl   $0x105337,0x8(%esp)
 f01006d1:	00 
-f01006d2:	c7 44 24 04 f7 50 10 	movl   $0xf01050f7,0x4(%esp)
+f01006d2:	c7 44 24 04 37 53 10 	movl   $0xf0105337,0x4(%esp)
 f01006d9:	f0 
-f01006da:	c7 04 24 b8 55 10 f0 	movl   $0xf01055b8,(%esp)
-f01006e1:	e8 a4 32 00 00       	call   f010398a <cprintf>
+f01006da:	c7 04 24 f8 57 10 f0 	movl   $0xf01057f8,(%esp)
+f01006e1:	e8 70 32 00 00       	call   f0103956 <cprintf>
 	cprintf("  edata  %08x (virt)  %08x (phys)\n", edata, edata - KERNBASE);
 f01006e6:	c7 44 24 08 41 3a 19 	movl   $0x193a41,0x8(%esp)
 f01006ed:	00 
 f01006ee:	c7 44 24 04 41 3a 19 	movl   $0xf0193a41,0x4(%esp)
 f01006f5:	f0 
-f01006f6:	c7 04 24 dc 55 10 f0 	movl   $0xf01055dc,(%esp)
-f01006fd:	e8 88 32 00 00       	call   f010398a <cprintf>
+f01006f6:	c7 04 24 1c 58 10 f0 	movl   $0xf010581c,(%esp)
+f01006fd:	e8 54 32 00 00       	call   f0103956 <cprintf>
 	cprintf("  end    %08x (virt)  %08x (phys)\n", end, end - KERNBASE);
 f0100702:	c7 44 24 08 70 49 19 	movl   $0x194970,0x8(%esp)
 f0100709:	00 
 f010070a:	c7 44 24 04 70 49 19 	movl   $0xf0194970,0x4(%esp)
 f0100711:	f0 
-f0100712:	c7 04 24 00 56 10 f0 	movl   $0xf0105600,(%esp)
-f0100719:	e8 6c 32 00 00       	call   f010398a <cprintf>
+f0100712:	c7 04 24 40 58 10 f0 	movl   $0xf0105840,(%esp)
+f0100719:	e8 38 32 00 00       	call   f0103956 <cprintf>
 	cprintf("Kernel executable memory footprint: %dKB\n",
 		ROUNDUP(end - entry, 1024) / 1024);
 f010071e:	b8 6f 4d 19 f0       	mov    $0xf0194d6f,%eax
@@ -1217,8 +1217,8 @@ f0100723:	2d 0c 00 10 f0       	sub    $0xf010000c,%eax
 	cprintf("Kernel executable memory footprint: %dKB\n",
 f0100728:	c1 f8 0a             	sar    $0xa,%eax
 f010072b:	89 44 24 04          	mov    %eax,0x4(%esp)
-f010072f:	c7 04 24 24 56 10 f0 	movl   $0xf0105624,(%esp)
-f0100736:	e8 4f 32 00 00       	call   f010398a <cprintf>
+f010072f:	c7 04 24 64 58 10 f0 	movl   $0xf0105864,(%esp)
+f0100736:	e8 1b 32 00 00       	call   f0103956 <cprintf>
 		ROUNDUP(end - entry, 1024) / 1024);
 	return 0;
 }
@@ -1238,8 +1238,8 @@ f0100746:	56                   	push   %esi
 f0100747:	53                   	push   %ebx
 f0100748:	83 ec 5c             	sub    $0x5c,%esp
 	cprintf("Stack backtrace:\n");
-f010074b:	c7 04 24 c2 53 10 f0 	movl   $0xf01053c2,(%esp)
-f0100752:	e8 33 32 00 00       	call   f010398a <cprintf>
+f010074b:	c7 04 24 02 56 10 f0 	movl   $0xf0105602,(%esp)
+f0100752:	e8 ff 31 00 00       	call   f0103956 <cprintf>
 	uint32_t* ebp = (uint32_t*)read_ebp();
 f0100757:	89 eb                	mov    %ebp,%ebx
     	args[i] = *(ebp + 1 + i); //eip is args[0]
@@ -1284,8 +1284,8 @@ f010078e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 f0100791:	89 44 24 0c          	mov    %eax,0xc(%esp)
 f0100795:	89 7c 24 08          	mov    %edi,0x8(%esp)
 f0100799:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-f010079d:	c7 04 24 50 56 10 f0 	movl   $0xf0105650,(%esp)
-f01007a4:	e8 e1 31 00 00       	call   f010398a <cprintf>
+f010079d:	c7 04 24 90 58 10 f0 	movl   $0xf0105890,(%esp)
+f01007a4:	e8 ad 31 00 00       	call   f0103956 <cprintf>
 			ebp, args[0], args[1], args[2], args[3], args[4], args[5]);
 		//print file line function
 		struct Eipdebuginfo info;
@@ -1293,7 +1293,7 @@ f01007a4:	e8 e1 31 00 00       	call   f010398a <cprintf>
 f01007a9:	89 74 24 04          	mov    %esi,0x4(%esp)
 f01007ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
 f01007b0:	89 04 24             	mov    %eax,(%esp)
-f01007b3:	e8 77 3a 00 00       	call   f010422f <debuginfo_eip>
+f01007b3:	e8 bf 3c 00 00       	call   f0104477 <debuginfo_eip>
 f01007b8:	85 c0                	test   %eax,%eax
 f01007ba:	75 31                	jne    f01007ed <mon_backtrace+0xab>
 			cprintf("\t%s:%d: %.*s+%d\n", 
@@ -1307,15 +1307,15 @@ f01007d1:	8b 45 bc             	mov    -0x44(%ebp),%eax
 f01007d4:	89 44 24 08          	mov    %eax,0x8(%esp)
 f01007d8:	8b 45 b8             	mov    -0x48(%ebp),%eax
 f01007db:	89 44 24 04          	mov    %eax,0x4(%esp)
-f01007df:	c7 04 24 d4 53 10 f0 	movl   $0xf01053d4,(%esp)
-f01007e6:	e8 9f 31 00 00       	call   f010398a <cprintf>
+f01007df:	c7 04 24 14 56 10 f0 	movl   $0xf0105614,(%esp)
+f01007e6:	e8 6b 31 00 00       	call   f0103956 <cprintf>
 f01007eb:	eb 0c                	jmp    f01007f9 <mon_backtrace+0xb7>
 			info.eip_file, info.eip_line, info.eip_fn_namelen, 
 			info.eip_fn_name, args[0] - info.eip_fn_addr);
 		} else {
 			cprintf("Informtion is not complete.");
-f01007ed:	c7 04 24 e5 53 10 f0 	movl   $0xf01053e5,(%esp)
-f01007f4:	e8 91 31 00 00       	call   f010398a <cprintf>
+f01007ed:	c7 04 24 25 56 10 f0 	movl   $0xf0105625,(%esp)
+f01007f4:	e8 5d 31 00 00       	call   f0103956 <cprintf>
 		}
 
 		if (*ebp == 0x0)
@@ -1358,8 +1358,8 @@ f0100820:	74 19                	je     f010083b <mon_sm+0x2b>
 f0100822:	8b 45 08             	mov    0x8(%ebp),%eax
 f0100825:	48                   	dec    %eax
 f0100826:	89 44 24 04          	mov    %eax,0x4(%esp)
-f010082a:	c7 04 24 80 56 10 f0 	movl   $0xf0105680,(%esp)
-f0100831:	e8 54 31 00 00       	call   f010398a <cprintf>
+f010082a:	c7 04 24 c0 58 10 f0 	movl   $0xf01058c0,(%esp)
+f0100831:	e8 20 31 00 00       	call   f0103956 <cprintf>
 		return 0;
 f0100836:	e9 fd 00 00 00       	jmp    f0100938 <mon_sm+0x128>
 	}
@@ -1372,7 +1372,7 @@ f0100843:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f010084a:	00 
 f010084b:	8b 46 04             	mov    0x4(%esi),%eax
 f010084e:	89 04 24             	mov    %eax,(%esp)
-f0100851:	e8 35 45 00 00       	call   f0104d8b <strtol>
+f0100851:	e8 7d 47 00 00       	call   f0104fd3 <strtol>
 f0100856:	89 c3                	mov    %eax,%ebx
 	va2 = strtol(argv[2], 0, 16);
 f0100858:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
@@ -1381,15 +1381,15 @@ f0100860:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f0100867:	00 
 f0100868:	8b 46 08             	mov    0x8(%esi),%eax
 f010086b:	89 04 24             	mov    %eax,(%esp)
-f010086e:	e8 18 45 00 00       	call   f0104d8b <strtol>
+f010086e:	e8 60 47 00 00       	call   f0104fd3 <strtol>
 f0100873:	89 c6                	mov    %eax,%esi
 
 	if (va2 < va1) {
 f0100875:	39 c3                	cmp    %eax,%ebx
 f0100877:	76 11                	jbe    f010088a <mon_sm+0x7a>
 		cprintf("va2 cannot be less than va1\n");
-f0100879:	c7 04 24 01 54 10 f0 	movl   $0xf0105401,(%esp)
-f0100880:	e8 05 31 00 00       	call   f010398a <cprintf>
+f0100879:	c7 04 24 41 56 10 f0 	movl   $0xf0105641,(%esp)
+f0100880:	e8 d1 30 00 00       	call   f0103956 <cprintf>
 		return 0;
 f0100885:	e9 ae 00 00 00       	jmp    f0100938 <mon_sm+0x128>
 	}
@@ -1408,8 +1408,8 @@ f01008a3:	85 c0                	test   %eax,%eax
 f01008a5:	75 12                	jne    f01008b9 <mon_sm+0xa9>
 			cprintf("va is 0x%x, pa is NOT found\n", va1);
 f01008a7:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-f01008ab:	c7 04 24 1e 54 10 f0 	movl   $0xf010541e,(%esp)
-f01008b2:	e8 d3 30 00 00       	call   f010398a <cprintf>
+f01008ab:	c7 04 24 5e 56 10 f0 	movl   $0xf010565e,(%esp)
+f01008b2:	e8 9f 30 00 00       	call   f0103956 <cprintf>
 			continue;
 f01008b7:	eb 71                	jmp    f010092a <mon_sm+0x11a>
 		}
@@ -1451,8 +1451,8 @@ f010090c:	81 e2 ff 00 00 00    	and    $0xff,%edx
 f0100912:	89 54 24 0c          	mov    %edx,0xc(%esp)
 f0100916:	89 44 24 08          	mov    %eax,0x8(%esp)
 f010091a:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-f010091e:	c7 04 24 ac 56 10 f0 	movl   $0xf01056ac,(%esp)
-f0100925:	e8 60 30 00 00       	call   f010398a <cprintf>
+f010091e:	c7 04 24 ec 58 10 f0 	movl   $0xf01058ec,(%esp)
+f0100925:	e8 2c 30 00 00       	call   f0103956 <cprintf>
 	if (va2 < va1) {
 		cprintf("va2 cannot be less than va1\n");
 		return 0;
@@ -1492,8 +1492,8 @@ f0100955:	74 18                	je     f010096f <mon_setpg+0x2a>
 		cprintf("The number of arguments is wrong.\n\
 f0100957:	8b 45 08             	mov    0x8(%ebp),%eax
 f010095a:	89 44 24 04          	mov    %eax,0x4(%esp)
-f010095e:	c7 04 24 e4 56 10 f0 	movl   $0xf01056e4,(%esp)
-f0100965:	e8 20 30 00 00       	call   f010398a <cprintf>
+f010095e:	c7 04 24 24 59 10 f0 	movl   $0xf0105924,(%esp)
+f0100965:	e8 ec 2f 00 00       	call   f0103956 <cprintf>
 The format is like followings:\n\
   setpg va bit1 value1 bit2 value2 ...\n\
   bit is in {\"P\", \"U\", \"W\"}, value is 0 or 1\n", argc);
@@ -1508,7 +1508,7 @@ f0100977:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f010097e:	00 
 f010097f:	8b 47 04             	mov    0x4(%edi),%eax
 f0100982:	89 04 24             	mov    %eax,(%esp)
-f0100985:	e8 01 44 00 00       	call   f0104d8b <strtol>
+f0100985:	e8 49 46 00 00       	call   f0104fd3 <strtol>
 f010098a:	89 c3                	mov    %eax,%ebx
 	pte_t *pte = pgdir_walk(kern_pgdir, (const void *)va, 0);
 f010098c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
@@ -1526,8 +1526,8 @@ f01009ab:	bb 03 00 00 00       	mov    $0x3,%ebx
 f01009b0:	e9 33 01 00 00       	jmp    f0100ae8 <mon_setpg+0x1a3>
 			cprintf("va is 0x%x, pa is NOT found\n", va);
 f01009b5:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-f01009b9:	c7 04 24 1e 54 10 f0 	movl   $0xf010541e,(%esp)
-f01009c0:	e8 c5 2f 00 00       	call   f010398a <cprintf>
+f01009b9:	c7 04 24 5e 56 10 f0 	movl   $0xf010565e,(%esp)
+f01009c0:	e8 91 2f 00 00       	call   f0103956 <cprintf>
 			return 0;
 f01009c5:	e9 27 01 00 00       	jmp    f0100af1 <mon_setpg+0x1ac>
 		}
@@ -1543,15 +1543,15 @@ f01009d3:	80 fa 27             	cmp    $0x27,%dl
 f01009d6:	0f 87 09 01 00 00    	ja     f0100ae5 <mon_setpg+0x1a0>
 f01009dc:	31 c0                	xor    %eax,%eax
 f01009de:	88 d0                	mov    %dl,%al
-f01009e0:	ff 24 85 00 59 10 f0 	jmp    *-0xfefa700(,%eax,4)
+f01009e0:	ff 24 85 40 5b 10 f0 	jmp    *-0xfefa4c0(,%eax,4)
 			case 'p':
 			case 'P': {
 				cprintf("P was %d, ", ONEorZERO(*pte & PTE_P));
 f01009e7:	8b 06                	mov    (%esi),%eax
 f01009e9:	83 e0 01             	and    $0x1,%eax
 f01009ec:	89 44 24 04          	mov    %eax,0x4(%esp)
-f01009f0:	c7 04 24 3b 54 10 f0 	movl   $0xf010543b,(%esp)
-f01009f7:	e8 8e 2f 00 00       	call   f010398a <cprintf>
+f01009f0:	c7 04 24 7b 56 10 f0 	movl   $0xf010567b,(%esp)
+f01009f7:	e8 5a 2f 00 00       	call   f0103956 <cprintf>
 				*pte &= ~PTE_P;
 f01009fc:	83 26 fe             	andl   $0xfffffffe,(%esi)
 				if (strtol(argv[i + 1], 0, 10))
@@ -1561,7 +1561,7 @@ f0100a07:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f0100a0e:	00 
 f0100a0f:	8b 04 9f             	mov    (%edi,%ebx,4),%eax
 f0100a12:	89 04 24             	mov    %eax,(%esp)
-f0100a15:	e8 71 43 00 00       	call   f0104d8b <strtol>
+f0100a15:	e8 b9 45 00 00       	call   f0104fd3 <strtol>
 f0100a1a:	85 c0                	test   %eax,%eax
 f0100a1c:	74 03                	je     f0100a21 <mon_setpg+0xdc>
 					*pte |= PTE_P;
@@ -1570,8 +1570,8 @@ f0100a1e:	83 0e 01             	orl    $0x1,(%esi)
 f0100a21:	8b 06                	mov    (%esi),%eax
 f0100a23:	83 e0 01             	and    $0x1,%eax
 f0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0100a2a:	c7 04 24 46 54 10 f0 	movl   $0xf0105446,(%esp)
-f0100a31:	e8 54 2f 00 00       	call   f010398a <cprintf>
+f0100a2a:	c7 04 24 86 56 10 f0 	movl   $0xf0105686,(%esp)
+f0100a31:	e8 20 2f 00 00       	call   f0103956 <cprintf>
 				break;
 f0100a36:	e9 aa 00 00 00       	jmp    f0100ae5 <mon_setpg+0x1a0>
 			};
@@ -1582,8 +1582,8 @@ f0100a3b:	8b 06                	mov    (%esi),%eax
 f0100a3d:	c1 e8 02             	shr    $0x2,%eax
 f0100a40:	83 e0 01             	and    $0x1,%eax
 f0100a43:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0100a47:	c7 04 24 58 54 10 f0 	movl   $0xf0105458,(%esp)
-f0100a4e:	e8 37 2f 00 00       	call   f010398a <cprintf>
+f0100a47:	c7 04 24 98 56 10 f0 	movl   $0xf0105698,(%esp)
+f0100a4e:	e8 03 2f 00 00       	call   f0103956 <cprintf>
 				*pte &= ~PTE_U;
 f0100a53:	83 26 fb             	andl   $0xfffffffb,(%esi)
 				if (strtol(argv[i + 1], 0, 10))
@@ -1593,7 +1593,7 @@ f0100a5e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f0100a65:	00 
 f0100a66:	8b 04 9f             	mov    (%edi,%ebx,4),%eax
 f0100a69:	89 04 24             	mov    %eax,(%esp)
-f0100a6c:	e8 1a 43 00 00       	call   f0104d8b <strtol>
+f0100a6c:	e8 62 45 00 00       	call   f0104fd3 <strtol>
 f0100a71:	85 c0                	test   %eax,%eax
 f0100a73:	74 03                	je     f0100a78 <mon_setpg+0x133>
 					*pte |= PTE_U ;
@@ -1603,8 +1603,8 @@ f0100a78:	8b 06                	mov    (%esi),%eax
 f0100a7a:	c1 e8 02             	shr    $0x2,%eax
 f0100a7d:	83 e0 01             	and    $0x1,%eax
 f0100a80:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0100a84:	c7 04 24 46 54 10 f0 	movl   $0xf0105446,(%esp)
-f0100a8b:	e8 fa 2e 00 00       	call   f010398a <cprintf>
+f0100a84:	c7 04 24 86 56 10 f0 	movl   $0xf0105686,(%esp)
+f0100a8b:	e8 c6 2e 00 00       	call   f0103956 <cprintf>
 				break;
 f0100a90:	eb 53                	jmp    f0100ae5 <mon_setpg+0x1a0>
 			};
@@ -1615,8 +1615,8 @@ f0100a92:	8b 06                	mov    (%esi),%eax
 f0100a94:	d1 e8                	shr    %eax
 f0100a96:	83 e0 01             	and    $0x1,%eax
 f0100a99:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0100a9d:	c7 04 24 63 54 10 f0 	movl   $0xf0105463,(%esp)
-f0100aa4:	e8 e1 2e 00 00       	call   f010398a <cprintf>
+f0100a9d:	c7 04 24 a3 56 10 f0 	movl   $0xf01056a3,(%esp)
+f0100aa4:	e8 ad 2e 00 00       	call   f0103956 <cprintf>
 				*pte &= ~PTE_W;
 f0100aa9:	83 26 fd             	andl   $0xfffffffd,(%esi)
 				if (strtol(argv[i + 1], 0, 10))
@@ -1626,7 +1626,7 @@ f0100ab4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f0100abb:	00 
 f0100abc:	8b 04 9f             	mov    (%edi,%ebx,4),%eax
 f0100abf:	89 04 24             	mov    %eax,(%esp)
-f0100ac2:	e8 c4 42 00 00       	call   f0104d8b <strtol>
+f0100ac2:	e8 0c 45 00 00       	call   f0104fd3 <strtol>
 f0100ac7:	85 c0                	test   %eax,%eax
 f0100ac9:	74 03                	je     f0100ace <mon_setpg+0x189>
 					*pte |= PTE_W;
@@ -1636,8 +1636,8 @@ f0100ace:	8b 06                	mov    (%esi),%eax
 f0100ad0:	d1 e8                	shr    %eax
 f0100ad2:	83 e0 01             	and    $0x1,%eax
 f0100ad5:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0100ad9:	c7 04 24 46 54 10 f0 	movl   $0xf0105446,(%esp)
-f0100ae0:	e8 a5 2e 00 00       	call   f010398a <cprintf>
+f0100ad9:	c7 04 24 86 56 10 f0 	movl   $0xf0105686,(%esp)
+f0100ae0:	e8 71 2e 00 00       	call   f0103956 <cprintf>
 f0100ae5:	83 c3 02             	add    $0x2,%ebx
 			cprintf("va is 0x%x, pa is NOT found\n", va);
 			return 0;
@@ -1676,8 +1676,8 @@ f0100b07:	8b 7d 0c             	mov    0xc(%ebp),%edi
 f0100b0a:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
 f0100b0e:	74 11                	je     f0100b21 <mon_dump+0x23>
 		cprintf("The number of arguments is wrong, must be 3.\n");
-f0100b10:	c7 04 24 7c 57 10 f0 	movl   $0xf010577c,(%esp)
-f0100b17:	e8 6e 2e 00 00       	call   f010398a <cprintf>
+f0100b10:	c7 04 24 bc 59 10 f0 	movl   $0xf01059bc,(%esp)
+f0100b17:	e8 3a 2e 00 00       	call   f0103956 <cprintf>
 		return 0;
 f0100b1c:	e9 3e 02 00 00       	jmp    f0100d5f <mon_dump+0x261>
 	}
@@ -1691,8 +1691,8 @@ f0100b29:	74 16                	je     f0100b41 <mon_dump+0x43>
 f0100b2b:	80 fb 70             	cmp    $0x70,%bl
 f0100b2e:	74 11                	je     f0100b41 <mon_dump+0x43>
 		cprintf("The first argument must be 'p' or 'v'\n");
-f0100b30:	c7 04 24 ac 57 10 f0 	movl   $0xf01057ac,(%esp)
-f0100b37:	e8 4e 2e 00 00       	call   f010398a <cprintf>
+f0100b30:	c7 04 24 ec 59 10 f0 	movl   $0xf01059ec,(%esp)
+f0100b37:	e8 1a 2e 00 00       	call   f0103956 <cprintf>
 		return 0;
 f0100b3c:	e9 1e 02 00 00       	jmp    f0100d5f <mon_dump+0x261>
 	} 
@@ -1704,7 +1704,7 @@ f0100b49:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f0100b50:	00 
 f0100b51:	8b 47 08             	mov    0x8(%edi),%eax
 f0100b54:	89 04 24             	mov    %eax,(%esp)
-f0100b57:	e8 2f 42 00 00       	call   f0104d8b <strtol>
+f0100b57:	e8 77 44 00 00       	call   f0104fd3 <strtol>
 f0100b5c:	89 c6                	mov    %eax,%esi
 f0100b5e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 	uint32_t num = strtol(argv[3], 0, 10);
@@ -1714,7 +1714,7 @@ f0100b69:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f0100b70:	00 
 f0100b71:	8b 47 0c             	mov    0xc(%edi),%eax
 f0100b74:	89 04 24             	mov    %eax,(%esp)
-f0100b77:	e8 0f 42 00 00       	call   f0104d8b <strtol>
+f0100b77:	e8 57 44 00 00       	call   f0104fd3 <strtol>
 f0100b7c:	89 c7                	mov    %eax,%edi
 	int i = begin;
 	pte_t *pte;
@@ -1723,8 +1723,8 @@ f0100b7c:	89 c7                	mov    %eax,%edi
 f0100b7e:	80 fb 76             	cmp    $0x76,%bl
 f0100b81:	0f 85 de 00 00 00    	jne    f0100c65 <mon_dump+0x167>
 		cprintf("Virtual Memory Content:\n");
-f0100b87:	c7 04 24 6e 54 10 f0 	movl   $0xf010546e,(%esp)
-f0100b8e:	e8 f7 2d 00 00       	call   f010398a <cprintf>
+f0100b87:	c7 04 24 ae 56 10 f0 	movl   $0xf01056ae,(%esp)
+f0100b8e:	e8 c3 2d 00 00       	call   f0103956 <cprintf>
 
 		extern struct Env *curenv;
 		
@@ -1771,11 +1771,11 @@ f0100bfa:	74 05                	je     f0100c01 <mon_dump+0x103>
 f0100bfc:	f6 03 01             	testb  $0x1,(%ebx)
 f0100bff:	75 1a                	jne    f0100c1b <mon_dump+0x11d>
 				cprintf("  0x%08x  %s\n", i, "null");
-f0100c01:	c7 44 24 08 87 54 10 	movl   $0xf0105487,0x8(%esp)
+f0100c01:	c7 44 24 08 c7 56 10 	movl   $0xf01056c7,0x8(%esp)
 f0100c08:	f0 
 f0100c09:	89 74 24 04          	mov    %esi,0x4(%esp)
-f0100c0d:	c7 04 24 8c 54 10 f0 	movl   $0xf010548c,(%esp)
-f0100c14:	e8 71 2d 00 00       	call   f010398a <cprintf>
+f0100c0d:	c7 04 24 cc 56 10 f0 	movl   $0xf01056cc,(%esp)
+f0100c14:	e8 3d 2d 00 00       	call   f0103956 <cprintf>
 				continue;
 f0100c19:	eb 37                	jmp    f0100c52 <mon_dump+0x154>
 			}
@@ -1803,8 +1803,8 @@ f0100c35:	89 54 24 0c          	mov    %edx,0xc(%esp)
 f0100c39:	25 ff 00 00 00       	and    $0xff,%eax
 f0100c3e:	89 44 24 08          	mov    %eax,0x8(%esp)
 f0100c42:	89 74 24 04          	mov    %esi,0x4(%esp)
-f0100c46:	c7 04 24 d4 57 10 f0 	movl   $0xf01057d4,(%esp)
-f0100c4d:	e8 38 2d 00 00       	call   f010398a <cprintf>
+f0100c46:	c7 04 24 14 5a 10 f0 	movl   $0xf0105a14,(%esp)
+f0100c4d:	e8 04 2d 00 00       	call   f0103956 <cprintf>
 
 		extern struct Env *curenv;
 		
@@ -1849,8 +1849,8 @@ f0100c87:	eb 08                	jmp    f0100c91 <mon_dump+0x193>
 f0100c89:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
 f0100c8f:	75 11                	jne    f0100ca2 <mon_dump+0x1a4>
 			cprintf("The page directory is full!\n");
-f0100c91:	c7 04 24 9a 54 10 f0 	movl   $0xf010549a,(%esp)
-f0100c98:	e8 ed 2c 00 00       	call   f010398a <cprintf>
+f0100c91:	c7 04 24 da 56 10 f0 	movl   $0xf01056da,(%esp)
+f0100c98:	e8 b9 2c 00 00       	call   f0103956 <cprintf>
 			return 0;
 f0100c9d:	e9 bd 00 00 00       	jmp    f0100d5f <mon_dump+0x261>
 		}
@@ -1864,8 +1864,8 @@ f0100cb5:	80 ca 81             	or     $0x81,%dl
 f0100cb8:	89 14 08             	mov    %edx,(%eax,%ecx,1)
 
 		cprintf("Physical Memory Content:\n");
-f0100cbb:	c7 04 24 b7 54 10 f0 	movl   $0xf01054b7,(%esp)
-f0100cc2:	e8 c3 2c 00 00       	call   f010398a <cprintf>
+f0100cbb:	c7 04 24 f7 56 10 f0 	movl   $0xf01056f7,(%esp)
+f0100cc2:	e8 8f 2c 00 00       	call   f0103956 <cprintf>
 
 		for (; i < num * 4 + begin; i += 4) {
 f0100cc7:	8b 55 e0             	mov    -0x20(%ebp),%edx
@@ -1929,8 +1929,8 @@ f0100d2a:	89 54 24 0c          	mov    %edx,0xc(%esp)
 f0100d2e:	25 ff 00 00 00       	and    $0xff,%eax
 f0100d33:	89 44 24 08          	mov    %eax,0x8(%esp)
 f0100d37:	89 74 24 04          	mov    %esi,0x4(%esp)
-f0100d3b:	c7 04 24 d4 57 10 f0 	movl   $0xf01057d4,(%esp)
-f0100d42:	e8 43 2c 00 00       	call   f010398a <cprintf>
+f0100d3b:	c7 04 24 14 5a 10 f0 	movl   $0xf0105a14,(%esp)
+f0100d42:	e8 0f 2c 00 00       	call   f0103956 <cprintf>
 
 		kern_pgdir[j] = PTE4M(i) | PTE_PS | PTE_P;
 
@@ -1978,11 +1978,11 @@ f0100d72:	83 ec 5c             	sub    $0x5c,%esp
 	char *buf;
 
 	cprintf("Welcome to the JOS kernel monitor!\n");
-f0100d75:	c7 04 24 f4 57 10 f0 	movl   $0xf01057f4,(%esp)
-f0100d7c:	e8 09 2c 00 00       	call   f010398a <cprintf>
+f0100d75:	c7 04 24 34 5a 10 f0 	movl   $0xf0105a34,(%esp)
+f0100d7c:	e8 d5 2b 00 00       	call   f0103956 <cprintf>
 	cprintf("Type 'help' for a list of commands.\n");
-f0100d81:	c7 04 24 18 58 10 f0 	movl   $0xf0105818,(%esp)
-f0100d88:	e8 fd 2b 00 00       	call   f010398a <cprintf>
+f0100d81:	c7 04 24 58 5a 10 f0 	movl   $0xf0105a58,(%esp)
+f0100d88:	e8 c9 2b 00 00       	call   f0103956 <cprintf>
 
 	if (tf != NULL)
 f0100d8d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
@@ -1990,12 +1990,12 @@ f0100d91:	74 0b                	je     f0100d9e <monitor+0x32>
 		print_trapframe(tf);
 f0100d93:	8b 45 08             	mov    0x8(%ebp),%eax
 f0100d96:	89 04 24             	mov    %eax,(%esp)
-f0100d99:	e8 1a 30 00 00       	call   f0103db8 <print_trapframe>
+f0100d99:	e8 11 30 00 00       	call   f0103daf <print_trapframe>
 
 	while (1) {
 		buf = readline("K> ");
-f0100d9e:	c7 04 24 d1 54 10 f0 	movl   $0xf01054d1,(%esp)
-f0100da5:	e8 7a 3c 00 00       	call   f0104a24 <readline>
+f0100d9e:	c7 04 24 11 57 10 f0 	movl   $0xf0105711,(%esp)
+f0100da5:	e8 c2 3e 00 00       	call   f0104c6c <readline>
 f0100daa:	89 c3                	mov    %eax,%ebx
 		if (buf != NULL)
 f0100dac:	85 c0                	test   %eax,%eax
@@ -2035,8 +2035,8 @@ f0100dca:	84 c0                	test   %al,%al
 f0100dcc:	74 60                	je     f0100e2e <monitor+0xc2>
 f0100dce:	0f be c0             	movsbl %al,%eax
 f0100dd1:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0100dd5:	c7 04 24 d5 54 10 f0 	movl   $0xf01054d5,(%esp)
-f0100ddc:	e8 4d 3e 00 00       	call   f0104c2e <strchr>
+f0100dd5:	c7 04 24 15 57 10 f0 	movl   $0xf0105715,(%esp)
+f0100ddc:	e8 95 40 00 00       	call   f0104e76 <strchr>
 f0100de1:	85 c0                	test   %eax,%eax
 f0100de3:	75 d9                	jne    f0100dbe <monitor+0x52>
 			*buf++ = 0;
@@ -2052,8 +2052,8 @@ f0100ded:	75 16                	jne    f0100e05 <monitor+0x99>
 			cprintf("Too many arguments (max %d)\n", MAXARGS);
 f0100def:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
 f0100df6:	00 
-f0100df7:	c7 04 24 da 54 10 f0 	movl   $0xf01054da,(%esp)
-f0100dfe:	e8 87 2b 00 00       	call   f010398a <cprintf>
+f0100df7:	c7 04 24 1a 57 10 f0 	movl   $0xf010571a,(%esp)
+f0100dfe:	e8 53 2b 00 00       	call   f0103956 <cprintf>
 f0100e03:	eb 99                	jmp    f0100d9e <monitor+0x32>
 			return 0;
 		}
@@ -2075,8 +2075,8 @@ f0100e11:	84 c0                	test   %al,%al
 f0100e13:	74 b1                	je     f0100dc6 <monitor+0x5a>
 f0100e15:	0f be c0             	movsbl %al,%eax
 f0100e18:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0100e1c:	c7 04 24 d5 54 10 f0 	movl   $0xf01054d5,(%esp)
-f0100e23:	e8 06 3e 00 00       	call   f0104c2e <strchr>
+f0100e1c:	c7 04 24 15 57 10 f0 	movl   $0xf0105715,(%esp)
+f0100e23:	e8 4e 40 00 00       	call   f0104e76 <strchr>
 f0100e28:	85 c0                	test   %eax,%eax
 f0100e2a:	74 e2                	je     f0100e0e <monitor+0xa2>
 f0100e2c:	eb 98                	jmp    f0100dc6 <monitor+0x5a>
@@ -2095,11 +2095,11 @@ f0100e43:	8d 04 5b             	lea    (%ebx,%ebx,2),%eax
 		return 0;
 	for (i = 0; i < NCOMMANDS; i++) {
 		if (strcmp(argv[0], commands[i].name) == 0)
-f0100e46:	8b 04 85 a0 59 10 f0 	mov    -0xfefa660(,%eax,4),%eax
+f0100e46:	8b 04 85 e0 5b 10 f0 	mov    -0xfefa420(,%eax,4),%eax
 f0100e4d:	89 44 24 04          	mov    %eax,0x4(%esp)
 f0100e51:	8b 45 a8             	mov    -0x58(%ebp),%eax
 f0100e54:	89 04 24             	mov    %eax,(%esp)
-f0100e57:	e8 6b 3d 00 00       	call   f0104bc7 <strcmp>
+f0100e57:	e8 b3 3f 00 00       	call   f0104e0f <strcmp>
 f0100e5c:	85 c0                	test   %eax,%eax
 f0100e5e:	75 24                	jne    f0100e84 <monitor+0x118>
 			return commands[i].func(argc, argv, tf);
@@ -2109,7 +2109,7 @@ f0100e66:	89 54 24 08          	mov    %edx,0x8(%esp)
 f0100e6a:	8d 4d a8             	lea    -0x58(%ebp),%ecx
 f0100e6d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
 f0100e71:	89 34 24             	mov    %esi,(%esp)
-f0100e74:	ff 14 85 a8 59 10 f0 	call   *-0xfefa658(,%eax,4)
+f0100e74:	ff 14 85 e8 5b 10 f0 	call   *-0xfefa418(,%eax,4)
 		print_trapframe(tf);
 
 	while (1) {
@@ -2134,8 +2134,8 @@ f0100e88:	75 b9                	jne    f0100e43 <monitor+0xd7>
 	cprintf("Unknown command '%s'\n", argv[0]);
 f0100e8a:	8b 45 a8             	mov    -0x58(%ebp),%eax
 f0100e8d:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0100e91:	c7 04 24 f7 54 10 f0 	movl   $0xf01054f7,(%esp)
-f0100e98:	e8 ed 2a 00 00       	call   f010398a <cprintf>
+f0100e91:	c7 04 24 37 57 10 f0 	movl   $0xf0105737,(%esp)
+f0100e98:	e8 b9 2a 00 00       	call   f0103956 <cprintf>
 f0100e9d:	e9 fc fe ff ff       	jmp    f0100d9e <monitor+0x32>
 		buf = readline("K> ");
 		if (buf != NULL)
@@ -2175,8 +2175,8 @@ f0100ebc:	75 23                	jne    f0100ee1 <boot_alloc+0x35>
 		cprintf("The inital end is %p\n", end);
 f0100ebe:	c7 44 24 04 70 49 19 	movl   $0xf0194970,0x4(%esp)
 f0100ec5:	f0 
-f0100ec6:	c7 04 24 f4 59 10 f0 	movl   $0xf01059f4,(%esp)
-f0100ecd:	e8 b8 2a 00 00       	call   f010398a <cprintf>
+f0100ec6:	c7 04 24 34 5c 10 f0 	movl   $0xf0105c34,(%esp)
+f0100ecd:	e8 84 2a 00 00       	call   f0103956 <cprintf>
 		nextfree = ROUNDUP((char *) end, PGSIZE);
 f0100ed2:	b8 6f 59 19 f0       	mov    $0xf019596f,%eax
 f0100ed7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
@@ -2245,11 +2245,11 @@ f0100f29:	89 e5                	mov    %esp,%ebp
 f0100f2b:	83 ec 18             	sub    $0x18,%esp
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f0100f2e:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0100f32:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f0100f32:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f0100f39:	f0 
 f0100f3a:	c7 44 24 04 8d 03 00 	movl   $0x38d,0x4(%esp)
 f0100f41:	00 
-f0100f42:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0100f42:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0100f49:	e8 63 f1 ff ff       	call   f01000b1 <_panic>
 	//cprintf("check1: 0x%x\n", *pgdir);
 	if (!(*pgdir & PTE_P))
@@ -2305,8 +2305,8 @@ f0100f7b:	53                   	push   %ebx
 f0100f7c:	83 ec 4c             	sub    $0x4c,%esp
 f0100f7f:	89 c3                	mov    %eax,%ebx
 	cprintf("start checking page_free_list...\n");
-f0100f81:	c7 04 24 d0 5d 10 f0 	movl   $0xf0105dd0,(%esp)
-f0100f88:	e8 fd 29 00 00       	call   f010398a <cprintf>
+f0100f81:	c7 04 24 10 60 10 f0 	movl   $0xf0106010,(%esp)
+f0100f88:	e8 c9 29 00 00       	call   f0103956 <cprintf>
 
 	struct PageInfo *pp;
 	unsigned pdx_limit = only_low_memory ? 1 : NPDENTRIES;
@@ -2318,11 +2318,11 @@ f0100f95:	e9 20 03 00 00       	jmp    f01012ba <check_page_free_list+0x344>
 
 	if (!page_free_list)
 		panic("'page_free_list' is a null pointer!");
-f0100f9a:	c7 44 24 08 f4 5d 10 	movl   $0xf0105df4,0x8(%esp)
+f0100f9a:	c7 44 24 08 34 60 10 	movl   $0xf0106034,0x8(%esp)
 f0100fa1:	f0 
 f0100fa2:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
 f0100fa9:	00 
-f0100faa:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0100faa:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0100fb1:	e8 fb f0 ff ff       	call   f01000b1 <_panic>
 
 	if (only_low_memory) {
@@ -2411,11 +2411,11 @@ f010102b:	3b 15 64 49 19 f0    	cmp    0xf0194964,%edx
 f0101031:	72 20                	jb     f0101053 <check_page_free_list+0xdd>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f0101033:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0101037:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f0101037:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f010103e:	f0 
 f010103f:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
 f0101046:	00 
-f0101047:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f0101047:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f010104e:	e8 5e f0 ff ff       	call   f01000b1 <_panic>
 			memset(page2kva(pp), 0x97, 128);
 f0101053:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
@@ -2425,7 +2425,7 @@ f0101062:	00
 	return (void *)(pa + KERNBASE);
 f0101063:	2d 00 00 00 10       	sub    $0x10000000,%eax
 f0101068:	89 04 24             	mov    %eax,(%esp)
-f010106b:	e8 f3 3b 00 00       	call   f0104c63 <memset>
+f010106b:	e8 3b 3e 00 00       	call   f0104eab <memset>
 		page_free_list = pp1;
 	}
 
@@ -2473,37 +2473,37 @@ f01010a8:	e9 92 01 00 00       	jmp    f010123f <check_page_free_list+0x2c9>
 		assert(pp >= pages);
 f01010ad:	39 ca                	cmp    %ecx,%edx
 f01010af:	73 24                	jae    f01010d5 <check_page_free_list+0x15f>
-f01010b1:	c7 44 24 0c 24 5a 10 	movl   $0xf0105a24,0xc(%esp)
+f01010b1:	c7 44 24 0c 64 5c 10 	movl   $0xf0105c64,0xc(%esp)
 f01010b8:	f0 
-f01010b9:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01010b9:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01010c0:	f0 
 f01010c1:	c7 44 24 04 cf 02 00 	movl   $0x2cf,0x4(%esp)
 f01010c8:	00 
-f01010c9:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01010c9:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01010d0:	e8 dc ef ff ff       	call   f01000b1 <_panic>
 		assert(pp < pages + npages);
 f01010d5:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
 f01010d8:	72 24                	jb     f01010fe <check_page_free_list+0x188>
-f01010da:	c7 44 24 0c 45 5a 10 	movl   $0xf0105a45,0xc(%esp)
+f01010da:	c7 44 24 0c 85 5c 10 	movl   $0xf0105c85,0xc(%esp)
 f01010e1:	f0 
-f01010e2:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01010e2:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01010e9:	f0 
 f01010ea:	c7 44 24 04 d0 02 00 	movl   $0x2d0,0x4(%esp)
 f01010f1:	00 
-f01010f2:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01010f2:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01010f9:	e8 b3 ef ff ff       	call   f01000b1 <_panic>
 		assert(((char *) pp - (char *) pages) % sizeof(*pp) == 0);
 f01010fe:	89 d0                	mov    %edx,%eax
 f0101100:	2b 45 d0             	sub    -0x30(%ebp),%eax
 f0101103:	a8 07                	test   $0x7,%al
 f0101105:	74 24                	je     f010112b <check_page_free_list+0x1b5>
-f0101107:	c7 44 24 0c 18 5e 10 	movl   $0xf0105e18,0xc(%esp)
+f0101107:	c7 44 24 0c 58 60 10 	movl   $0xf0106058,0xc(%esp)
 f010110e:	f0 
-f010110f:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010110f:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101116:	f0 
 f0101117:	c7 44 24 04 d1 02 00 	movl   $0x2d1,0x4(%esp)
 f010111e:	00 
-f010111f:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010111f:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101126:	e8 86 ef ff ff       	call   f01000b1 <_panic>
 void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);
 
@@ -2517,46 +2517,46 @@ f010112b:	c1 f8 03             	sar    $0x3,%eax
 		assert(page2pa(pp) != 0);
 f010112e:	c1 e0 0c             	shl    $0xc,%eax
 f0101131:	75 24                	jne    f0101157 <check_page_free_list+0x1e1>
-f0101133:	c7 44 24 0c 59 5a 10 	movl   $0xf0105a59,0xc(%esp)
+f0101133:	c7 44 24 0c 99 5c 10 	movl   $0xf0105c99,0xc(%esp)
 f010113a:	f0 
-f010113b:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010113b:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101142:	f0 
 f0101143:	c7 44 24 04 d4 02 00 	movl   $0x2d4,0x4(%esp)
 f010114a:	00 
-f010114b:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010114b:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101152:	e8 5a ef ff ff       	call   f01000b1 <_panic>
 		assert(page2pa(pp) != IOPHYSMEM);
 f0101157:	3d 00 00 0a 00       	cmp    $0xa0000,%eax
 f010115c:	75 24                	jne    f0101182 <check_page_free_list+0x20c>
-f010115e:	c7 44 24 0c 6a 5a 10 	movl   $0xf0105a6a,0xc(%esp)
+f010115e:	c7 44 24 0c aa 5c 10 	movl   $0xf0105caa,0xc(%esp)
 f0101165:	f0 
-f0101166:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101166:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f010116d:	f0 
 f010116e:	c7 44 24 04 d5 02 00 	movl   $0x2d5,0x4(%esp)
 f0101175:	00 
-f0101176:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101176:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010117d:	e8 2f ef ff ff       	call   f01000b1 <_panic>
 		assert(page2pa(pp) != EXTPHYSMEM - PGSIZE);
 f0101182:	3d 00 f0 0f 00       	cmp    $0xff000,%eax
 f0101187:	75 24                	jne    f01011ad <check_page_free_list+0x237>
-f0101189:	c7 44 24 0c 4c 5e 10 	movl   $0xf0105e4c,0xc(%esp)
+f0101189:	c7 44 24 0c 8c 60 10 	movl   $0xf010608c,0xc(%esp)
 f0101190:	f0 
-f0101191:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101191:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101198:	f0 
 f0101199:	c7 44 24 04 d6 02 00 	movl   $0x2d6,0x4(%esp)
 f01011a0:	00 
-f01011a1:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01011a1:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01011a8:	e8 04 ef ff ff       	call   f01000b1 <_panic>
 		assert(page2pa(pp) != EXTPHYSMEM);
 f01011ad:	3d 00 00 10 00       	cmp    $0x100000,%eax
 f01011b2:	75 24                	jne    f01011d8 <check_page_free_list+0x262>
-f01011b4:	c7 44 24 0c 83 5a 10 	movl   $0xf0105a83,0xc(%esp)
+f01011b4:	c7 44 24 0c c3 5c 10 	movl   $0xf0105cc3,0xc(%esp)
 f01011bb:	f0 
-f01011bc:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01011bc:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01011c3:	f0 
 f01011c4:	c7 44 24 04 d7 02 00 	movl   $0x2d7,0x4(%esp)
 f01011cb:	00 
-f01011cc:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01011cc:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01011d3:	e8 d9 ee ff ff       	call   f01000b1 <_panic>
 		assert(page2pa(pp) < EXTPHYSMEM || (char *) page2kva(pp) >= first_free_page);
 f01011d8:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
@@ -2573,23 +2573,23 @@ f01011e4:	39 5d c4             	cmp    %ebx,-0x3c(%ebp)
 f01011e7:	77 20                	ja     f0101209 <check_page_free_list+0x293>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f01011e9:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f01011ed:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f01011ed:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f01011f4:	f0 
 f01011f5:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
 f01011fc:	00 
-f01011fd:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f01011fd:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f0101204:	e8 a8 ee ff ff       	call   f01000b1 <_panic>
 	return (void *)(pa + KERNBASE);
 f0101209:	2d 00 00 00 10       	sub    $0x10000000,%eax
 f010120e:	39 45 c8             	cmp    %eax,-0x38(%ebp)
 f0101211:	76 29                	jbe    f010123c <check_page_free_list+0x2c6>
-f0101213:	c7 44 24 0c 70 5e 10 	movl   $0xf0105e70,0xc(%esp)
+f0101213:	c7 44 24 0c b0 60 10 	movl   $0xf01060b0,0xc(%esp)
 f010121a:	f0 
-f010121b:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010121b:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101222:	f0 
 f0101223:	c7 44 24 04 d8 02 00 	movl   $0x2d8,0x4(%esp)
 f010122a:	00 
-f010122b:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010122b:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101232:	e8 7a ee ff ff       	call   f01000b1 <_panic>
 
 		if (page2pa(pp) < EXTPHYSMEM)
@@ -2617,29 +2617,29 @@ f0101247:	8b 5d cc             	mov    -0x34(%ebp),%ebx
 	assert(nfree_basemem > 0);
 f010124a:	85 db                	test   %ebx,%ebx
 f010124c:	7f 24                	jg     f0101272 <check_page_free_list+0x2fc>
-f010124e:	c7 44 24 0c 9d 5a 10 	movl   $0xf0105a9d,0xc(%esp)
+f010124e:	c7 44 24 0c dd 5c 10 	movl   $0xf0105cdd,0xc(%esp)
 f0101255:	f0 
-f0101256:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101256:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f010125d:	f0 
 f010125e:	c7 44 24 04 e0 02 00 	movl   $0x2e0,0x4(%esp)
 f0101265:	00 
-f0101266:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101266:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010126d:	e8 3f ee ff ff       	call   f01000b1 <_panic>
 	assert(nfree_extmem > 0);
 f0101272:	85 ff                	test   %edi,%edi
 f0101274:	7f 24                	jg     f010129a <check_page_free_list+0x324>
-f0101276:	c7 44 24 0c af 5a 10 	movl   $0xf0105aaf,0xc(%esp)
+f0101276:	c7 44 24 0c ef 5c 10 	movl   $0xf0105cef,0xc(%esp)
 f010127d:	f0 
-f010127e:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010127e:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101285:	f0 
 f0101286:	c7 44 24 04 e1 02 00 	movl   $0x2e1,0x4(%esp)
 f010128d:	00 
-f010128e:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010128e:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101295:	e8 17 ee ff ff       	call   f01000b1 <_panic>
 
 	cprintf("check_page_free_list() succeeded!\n");
-f010129a:	c7 04 24 b8 5e 10 f0 	movl   $0xf0105eb8,(%esp)
-f01012a1:	e8 e4 26 00 00       	call   f010398a <cprintf>
+f010129a:	c7 04 24 f8 60 10 f0 	movl   $0xf01060f8,(%esp)
+f01012a1:	e8 b0 26 00 00       	call   f0103956 <cprintf>
 f01012a6:	eb 29                	jmp    f01012d1 <check_page_free_list+0x35b>
 	struct PageInfo *pp;
 	unsigned pdx_limit = only_low_memory ? 1 : NPDENTRIES;
@@ -2728,8 +2728,8 @@ f0101315:	89 1d 9c 3c 19 f0    	mov    %ebx,0xf0193c9c
 	}
 	cprintf("page_init: page_free_list is %p\n", page_free_list);
 f010131b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-f010131f:	c7 04 24 dc 5e 10 f0 	movl   $0xf0105edc,(%esp)
-f0101326:	e8 5f 26 00 00       	call   f010398a <cprintf>
+f010131f:	c7 04 24 1c 61 10 f0 	movl   $0xf010611c,(%esp)
+f0101326:	e8 2b 26 00 00       	call   f0103956 <cprintf>
 
 	//page 0
 	// pages[0].pp_ref = 1;
@@ -2746,11 +2746,11 @@ f0101338:	8b 15 64 49 19 f0    	mov    0xf0194964,%edx
 f010133e:	81 fa a0 00 00 00    	cmp    $0xa0,%edx
 f0101344:	77 1c                	ja     f0101362 <page_init+0x89>
 		panic("pa2page called with invalid pa");
-f0101346:	c7 44 24 08 00 5f 10 	movl   $0xf0105f00,0x8(%esp)
+f0101346:	c7 44 24 08 40 61 10 	movl   $0xf0106140,0x8(%esp)
 f010134d:	f0 
 f010134e:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
 f0101355:	00 
-f0101356:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f0101356:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f010135d:	e8 4f ed ff ff       	call   f01000b1 <_panic>
 
 	//hole
@@ -2770,11 +2770,11 @@ f010136f:	c1 eb 0c             	shr    $0xc,%ebx
 f0101372:	39 da                	cmp    %ebx,%edx
 f0101374:	77 1c                	ja     f0101392 <page_init+0xb9>
 		panic("pa2page called with invalid pa");
-f0101376:	c7 44 24 08 00 5f 10 	movl   $0xf0105f00,0x8(%esp)
+f0101376:	c7 44 24 08 40 61 10 	movl   $0xf0106140,0x8(%esp)
 f010137d:	f0 
 f010137e:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
 f0101385:	00 
-f0101386:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f0101386:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f010138d:	e8 1f ed ff ff       	call   f01000b1 <_panic>
 	return &pages[PGNUM(pa)];
 f0101392:	8d 14 d9             	lea    (%ecx,%ebx,8),%edx
@@ -2867,11 +2867,11 @@ f01013f0:	3b 15 64 49 19 f0    	cmp    0xf0194964,%edx
 f01013f6:	72 20                	jb     f0101418 <page_alloc+0x65>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f01013f8:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f01013fc:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f01013fc:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f0101403:	f0 
 f0101404:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
 f010140b:	00 
-f010140c:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f010140c:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f0101413:	e8 99 ec ff ff       	call   f01000b1 <_panic>
 		memset(page2kva(res),'\0', PGSIZE);
 f0101418:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
@@ -2881,7 +2881,7 @@ f0101427:	00
 	return (void *)(pa + KERNBASE);
 f0101428:	2d 00 00 00 10       	sub    $0x10000000,%eax
 f010142d:	89 04 24             	mov    %eax,(%esp)
-f0101430:	e8 2e 38 00 00       	call   f0104c63 <memset>
+f0101430:	e8 76 3a 00 00       	call   f0104eab <memset>
 
 	//cprintf("0x%x is allocated!\n", res);
 	return res;
@@ -2924,11 +2924,11 @@ f0101452:	75 05                	jne    f0101459 <page_free+0x15>
 f0101454:	83 38 00             	cmpl   $0x0,(%eax)
 f0101457:	74 1c                	je     f0101475 <page_free+0x31>
 			panic("page_free: pp_ref is nonzero or pp_link is not NULL");
-f0101459:	c7 44 24 08 20 5f 10 	movl   $0xf0105f20,0x8(%esp)
+f0101459:	c7 44 24 08 60 61 10 	movl   $0xf0106160,0x8(%esp)
 f0101460:	f0 
 f0101461:	c7 44 24 04 7d 01 00 	movl   $0x17d,0x4(%esp)
 f0101468:	00 
-f0101469:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101469:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101470:	e8 3c ec ff ff       	call   f01000b1 <_panic>
 	pp->pp_link = page_free_list;
 f0101475:	8b 15 9c 3c 19 f0    	mov    0xf0193c9c,%edx
@@ -3005,11 +3005,11 @@ f01014ca:	8b 15 64 49 19 f0    	mov    0xf0194964,%edx
 f01014d0:	39 d0                	cmp    %edx,%eax
 f01014d2:	72 1c                	jb     f01014f0 <pgdir_walk+0x4a>
 		panic("pa2page called with invalid pa");
-f01014d4:	c7 44 24 08 00 5f 10 	movl   $0xf0105f00,0x8(%esp)
+f01014d4:	c7 44 24 08 40 61 10 	movl   $0xf0106140,0x8(%esp)
 f01014db:	f0 
 f01014dc:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
 f01014e3:	00 
-f01014e4:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f01014e4:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f01014eb:	e8 c1 eb ff ff       	call   f01000b1 <_panic>
 #define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)
 
@@ -3023,11 +3023,11 @@ f01014f5:	39 d0                	cmp    %edx,%eax
 f01014f7:	72 20                	jb     f0101519 <pgdir_walk+0x73>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f01014f9:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
-f01014fd:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f01014fd:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f0101504:	f0 
 f0101505:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
 f010150c:	00 
-f010150d:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f010150d:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f0101514:	e8 98 eb ff ff       	call   f01000b1 <_panic>
 		pt = page2kva(pa2page(PTE_ADDR(*pde)));
 		// cprintf("walk: pde is 0x%x\n", pde);
@@ -3085,11 +3085,11 @@ f0101571:	3b 15 64 49 19 f0    	cmp    0xf0194964,%edx
 f0101577:	72 20                	jb     f0101599 <pgdir_walk+0xf3>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f0101579:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f010157d:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f010157d:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f0101584:	f0 
 f0101585:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
 f010158c:	00 
-f010158d:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f010158d:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f0101594:	e8 18 eb ff ff       	call   f01000b1 <_panic>
 	pt = page2kva(pp);
 	// cprintf("walk: pde is 0x%x\n", pde);	
@@ -3263,11 +3263,11 @@ f010165e:	c1 e8 0c             	shr    $0xc,%eax
 f0101661:	3b 05 64 49 19 f0    	cmp    0xf0194964,%eax
 f0101667:	72 1c                	jb     f0101685 <page_lookup+0x5b>
 		panic("pa2page called with invalid pa");
-f0101669:	c7 44 24 08 00 5f 10 	movl   $0xf0105f00,0x8(%esp)
+f0101669:	c7 44 24 08 40 61 10 	movl   $0xf0106140,0x8(%esp)
 f0101670:	f0 
 f0101671:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
 f0101678:	00 
-f0101679:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f0101679:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f0101680:	e8 2c ea ff ff       	call   f01000b1 <_panic>
 	return &pages[PGNUM(pa)];
 f0101685:	8b 15 6c 49 19 f0    	mov    0xf019496c,%edx
@@ -3472,10 +3472,10 @@ nvram_read(int r)
 {
 	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
 f0101776:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
-f010177d:	e8 92 21 00 00       	call   f0103914 <mc146818_read>
+f010177d:	e8 5e 21 00 00       	call   f01038e0 <mc146818_read>
 f0101782:	89 c3                	mov    %eax,%ebx
 f0101784:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
-f010178b:	e8 84 21 00 00       	call   f0103914 <mc146818_read>
+f010178b:	e8 50 21 00 00       	call   f01038e0 <mc146818_read>
 f0101790:	c1 e0 08             	shl    $0x8,%eax
 f0101793:	09 c3                	or     %eax,%ebx
 {
@@ -3499,10 +3499,10 @@ nvram_read(int r)
 {
 	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
 f01017ac:	c7 04 24 17 00 00 00 	movl   $0x17,(%esp)
-f01017b3:	e8 5c 21 00 00       	call   f0103914 <mc146818_read>
+f01017b3:	e8 28 21 00 00       	call   f01038e0 <mc146818_read>
 f01017b8:	89 c3                	mov    %eax,%ebx
 f01017ba:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
-f01017c1:	e8 4e 21 00 00       	call   f0103914 <mc146818_read>
+f01017c1:	e8 1a 21 00 00       	call   f01038e0 <mc146818_read>
 f01017c6:	c1 e0 08             	shl    $0x8,%eax
 f01017c9:	09 c3                	or     %eax,%ebx
 	size_t npages_extmem;
@@ -3535,8 +3535,8 @@ f01017f1:	a3 64 49 19 f0       	mov    %eax,0xf0194964
 	cprintf("npages is %d\n", npages);
 f01017f6:	a1 64 49 19 f0       	mov    0xf0194964,%eax
 f01017fb:	89 44 24 04          	mov    %eax,0x4(%esp)
-f01017ff:	c7 04 24 c0 5a 10 f0 	movl   $0xf0105ac0,(%esp)
-f0101806:	e8 7f 21 00 00       	call   f010398a <cprintf>
+f01017ff:	c7 04 24 00 5d 10 f0 	movl   $0xf0105d00,(%esp)
+f0101806:	e8 4b 21 00 00       	call   f0103956 <cprintf>
 
 	cprintf("Physical memory: %uK available, base = %uK, extended = %uK\n",
 		npages * PGSIZE / 1024,
@@ -3574,8 +3574,8 @@ f0101829:	c1 e0 0c             	shl    $0xc,%eax
 	cprintf("Physical memory: %uK available, base = %uK, extended = %uK\n",
 f010182c:	c1 e8 0a             	shr    $0xa,%eax
 f010182f:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0101833:	c7 04 24 54 5f 10 f0 	movl   $0xf0105f54,(%esp)
-f010183a:	e8 4b 21 00 00       	call   f010398a <cprintf>
+f0101833:	c7 04 24 94 61 10 f0 	movl   $0xf0106194,(%esp)
+f010183a:	e8 17 21 00 00       	call   f0103956 <cprintf>
 	// Remove this line when you're ready to test this function.
 	//panic("mem_init: This function is not finished\n");
 
@@ -3587,8 +3587,8 @@ f0101844:	e8 63 f6 ff ff       	call   f0100eac <boot_alloc>
 f0101849:	a3 68 49 19 f0       	mov    %eax,0xf0194968
 	cprintf("kern_pgdir is %p\n", kern_pgdir);
 f010184e:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0101852:	c7 04 24 ce 5a 10 f0 	movl   $0xf0105ace,(%esp)
-f0101859:	e8 2c 21 00 00       	call   f010398a <cprintf>
+f0101852:	c7 04 24 0e 5d 10 f0 	movl   $0xf0105d0e,(%esp)
+f0101859:	e8 f8 20 00 00       	call   f0103956 <cprintf>
 	memset(kern_pgdir, 0, PGSIZE);
 f010185e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
 f0101865:	00 
@@ -3596,7 +3596,7 @@ f0101866:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f010186d:	00 
 f010186e:	a1 68 49 19 f0       	mov    0xf0194968,%eax
 f0101873:	89 04 24             	mov    %eax,(%esp)
-f0101876:	e8 e8 33 00 00       	call   f0104c63 <memset>
+f0101876:	e8 30 36 00 00       	call   f0104eab <memset>
 	// a virtual page table at virtual address UVPT.
 	// (For now, you don't have understand the greater purpose of the
 	// following line.)
@@ -3614,11 +3614,11 @@ f0101880:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
 f0101885:	77 20                	ja     f01018a7 <mem_init+0x13a>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
 f0101887:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f010188b:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
+f010188b:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
 f0101892:	f0 
 f0101893:	c7 44 24 04 9d 00 00 	movl   $0x9d,0x4(%esp)
 f010189a:	00 
-f010189b:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010189b:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01018a2:	e8 0a e8 ff ff       	call   f01000b1 <_panic>
 	return (physaddr_t)kva - KERNBASE;
 f01018a7:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
@@ -3641,12 +3641,12 @@ f01018d5:	89 54 24 08          	mov    %edx,0x8(%esp)
 f01018d9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 f01018e0:	00 
 f01018e1:	89 04 24             	mov    %eax,(%esp)
-f01018e4:	e8 7a 33 00 00       	call   f0104c63 <memset>
+f01018e4:	e8 c2 35 00 00       	call   f0104eab <memset>
  	cprintf("pages is %p\n", pages);
 f01018e9:	a1 6c 49 19 f0       	mov    0xf019496c,%eax
 f01018ee:	89 44 24 04          	mov    %eax,0x4(%esp)
-f01018f2:	c7 04 24 e0 5a 10 f0 	movl   $0xf0105ae0,(%esp)
-f01018f9:	e8 8c 20 00 00       	call   f010398a <cprintf>
+f01018f2:	c7 04 24 20 5d 10 f0 	movl   $0xf0105d20,(%esp)
+f01018f9:	e8 58 20 00 00       	call   f0103956 <cprintf>
  	// cprintf("pages + 1 is %p\n", pages + 1);
 	//////////////////////////////////////////////////////////////////////
 	// Make 'envs' point to an array of size 'NENV' of 'struct Env'.
@@ -3672,8 +3672,8 @@ static void
 check_page_alloc(void)
 {
 	cprintf("start checking page_alloc...\n");
-f010191c:	c7 04 24 ed 5a 10 f0 	movl   $0xf0105aed,(%esp)
-f0101923:	e8 62 20 00 00       	call   f010398a <cprintf>
+f010191c:	c7 04 24 2d 5d 10 f0 	movl   $0xf0105d2d,(%esp)
+f0101923:	e8 2e 20 00 00       	call   f0103956 <cprintf>
 	int nfree;
 	struct PageInfo *fl;
 	char *c;
@@ -3683,11 +3683,11 @@ f0101923:	e8 62 20 00 00       	call   f010398a <cprintf>
 f0101928:	83 3d 6c 49 19 f0 00 	cmpl   $0x0,0xf019496c
 f010192f:	75 1c                	jne    f010194d <mem_init+0x1e0>
 		panic("'pages' is a null pointer!");
-f0101931:	c7 44 24 08 0b 5b 10 	movl   $0xf0105b0b,0x8(%esp)
+f0101931:	c7 44 24 08 4b 5d 10 	movl   $0xf0105d4b,0x8(%esp)
 f0101938:	f0 
 f0101939:	c7 44 24 04 f6 02 00 	movl   $0x2f6,0x4(%esp)
 f0101940:	00 
-f0101941:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101941:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101948:	e8 64 e7 ff ff       	call   f01000b1 <_panic>
 
 	// check number of free pages
@@ -3716,13 +3716,13 @@ f0101967:	e8 47 fa ff ff       	call   f01013b3 <page_alloc>
 f010196c:	89 c7                	mov    %eax,%edi
 f010196e:	85 c0                	test   %eax,%eax
 f0101970:	75 24                	jne    f0101996 <mem_init+0x229>
-f0101972:	c7 44 24 0c 26 5b 10 	movl   $0xf0105b26,0xc(%esp)
+f0101972:	c7 44 24 0c 66 5d 10 	movl   $0xf0105d66,0xc(%esp)
 f0101979:	f0 
-f010197a:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010197a:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101981:	f0 
 f0101982:	c7 44 24 04 fe 02 00 	movl   $0x2fe,0x4(%esp)
 f0101989:	00 
-f010198a:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010198a:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101991:	e8 1b e7 ff ff       	call   f01000b1 <_panic>
 	assert((pp1 = page_alloc(0)));
 f0101996:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
@@ -3730,13 +3730,13 @@ f010199d:	e8 11 fa ff ff       	call   f01013b3 <page_alloc>
 f01019a2:	89 c6                	mov    %eax,%esi
 f01019a4:	85 c0                	test   %eax,%eax
 f01019a6:	75 24                	jne    f01019cc <mem_init+0x25f>
-f01019a8:	c7 44 24 0c 3c 5b 10 	movl   $0xf0105b3c,0xc(%esp)
+f01019a8:	c7 44 24 0c 7c 5d 10 	movl   $0xf0105d7c,0xc(%esp)
 f01019af:	f0 
-f01019b0:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01019b0:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01019b7:	f0 
 f01019b8:	c7 44 24 04 ff 02 00 	movl   $0x2ff,0x4(%esp)
 f01019bf:	00 
-f01019c0:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01019c0:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01019c7:	e8 e5 e6 ff ff       	call   f01000b1 <_panic>
 	assert((pp2 = page_alloc(0)));
 f01019cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
@@ -3744,26 +3744,26 @@ f01019d3:	e8 db f9 ff ff       	call   f01013b3 <page_alloc>
 f01019d8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 f01019db:	85 c0                	test   %eax,%eax
 f01019dd:	75 24                	jne    f0101a03 <mem_init+0x296>
-f01019df:	c7 44 24 0c 52 5b 10 	movl   $0xf0105b52,0xc(%esp)
+f01019df:	c7 44 24 0c 92 5d 10 	movl   $0xf0105d92,0xc(%esp)
 f01019e6:	f0 
-f01019e7:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01019e7:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01019ee:	f0 
 f01019ef:	c7 44 24 04 00 03 00 	movl   $0x300,0x4(%esp)
 f01019f6:	00 
-f01019f7:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01019f7:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01019fe:	e8 ae e6 ff ff       	call   f01000b1 <_panic>
 
 	assert(pp0);
 	assert(pp1 && pp1 != pp0);
 f0101a03:	39 f7                	cmp    %esi,%edi
 f0101a05:	75 24                	jne    f0101a2b <mem_init+0x2be>
-f0101a07:	c7 44 24 0c 68 5b 10 	movl   $0xf0105b68,0xc(%esp)
+f0101a07:	c7 44 24 0c a8 5d 10 	movl   $0xf0105da8,0xc(%esp)
 f0101a0e:	f0 
-f0101a0f:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101a0f:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101a16:	f0 
 f0101a17:	c7 44 24 04 03 03 00 	movl   $0x303,0x4(%esp)
 f0101a1e:	00 
-f0101a1f:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101a1f:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101a26:	e8 86 e6 ff ff       	call   f01000b1 <_panic>
 	assert(pp2 && pp2 != pp1 && pp2 != pp0);
 f0101a2b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
@@ -3771,13 +3771,13 @@ f0101a2e:	39 c6                	cmp    %eax,%esi
 f0101a30:	74 04                	je     f0101a36 <mem_init+0x2c9>
 f0101a32:	39 c7                	cmp    %eax,%edi
 f0101a34:	75 24                	jne    f0101a5a <mem_init+0x2ed>
-f0101a36:	c7 44 24 0c b4 5f 10 	movl   $0xf0105fb4,0xc(%esp)
+f0101a36:	c7 44 24 0c f4 61 10 	movl   $0xf01061f4,0xc(%esp)
 f0101a3d:	f0 
-f0101a3e:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101a3e:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101a45:	f0 
 f0101a46:	c7 44 24 04 04 03 00 	movl   $0x304,0x4(%esp)
 f0101a4d:	00 
-f0101a4e:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101a4e:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101a55:	e8 57 e6 ff ff       	call   f01000b1 <_panic>
 void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);
 
@@ -3795,13 +3795,13 @@ f0101a6c:	c1 f9 03             	sar    $0x3,%ecx
 f0101a6f:	c1 e1 0c             	shl    $0xc,%ecx
 f0101a72:	39 c1                	cmp    %eax,%ecx
 f0101a74:	72 24                	jb     f0101a9a <mem_init+0x32d>
-f0101a76:	c7 44 24 0c 7a 5b 10 	movl   $0xf0105b7a,0xc(%esp)
+f0101a76:	c7 44 24 0c ba 5d 10 	movl   $0xf0105dba,0xc(%esp)
 f0101a7d:	f0 
-f0101a7e:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101a7e:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101a85:	f0 
 f0101a86:	c7 44 24 04 05 03 00 	movl   $0x305,0x4(%esp)
 f0101a8d:	00 
-f0101a8e:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101a8e:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101a95:	e8 17 e6 ff ff       	call   f01000b1 <_panic>
 f0101a9a:	89 f1                	mov    %esi,%ecx
 f0101a9c:	29 d1                	sub    %edx,%ecx
@@ -3810,13 +3810,13 @@ f0101aa1:	c1 e1 0c             	shl    $0xc,%ecx
 	assert(page2pa(pp1) < npages*PGSIZE);
 f0101aa4:	39 c8                	cmp    %ecx,%eax
 f0101aa6:	77 24                	ja     f0101acc <mem_init+0x35f>
-f0101aa8:	c7 44 24 0c 97 5b 10 	movl   $0xf0105b97,0xc(%esp)
+f0101aa8:	c7 44 24 0c d7 5d 10 	movl   $0xf0105dd7,0xc(%esp)
 f0101aaf:	f0 
-f0101ab0:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101ab0:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101ab7:	f0 
 f0101ab8:	c7 44 24 04 06 03 00 	movl   $0x306,0x4(%esp)
 f0101abf:	00 
-f0101ac0:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101ac0:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101ac7:	e8 e5 e5 ff ff       	call   f01000b1 <_panic>
 f0101acc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
 f0101acf:	29 d1                	sub    %edx,%ecx
@@ -3826,13 +3826,13 @@ f0101ad6:	c1 e2 0c             	shl    $0xc,%edx
 	assert(page2pa(pp2) < npages*PGSIZE);
 f0101ad9:	39 d0                	cmp    %edx,%eax
 f0101adb:	77 24                	ja     f0101b01 <mem_init+0x394>
-f0101add:	c7 44 24 0c b4 5b 10 	movl   $0xf0105bb4,0xc(%esp)
+f0101add:	c7 44 24 0c f4 5d 10 	movl   $0xf0105df4,0xc(%esp)
 f0101ae4:	f0 
-f0101ae5:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101ae5:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101aec:	f0 
 f0101aed:	c7 44 24 04 07 03 00 	movl   $0x307,0x4(%esp)
 f0101af4:	00 
-f0101af5:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101af5:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101afc:	e8 b0 e5 ff ff       	call   f01000b1 <_panic>
 
 	// temporarily steal the rest of the free pages
@@ -3849,13 +3849,13 @@ f0101b13:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 f0101b1a:	e8 94 f8 ff ff       	call   f01013b3 <page_alloc>
 f0101b1f:	85 c0                	test   %eax,%eax
 f0101b21:	74 24                	je     f0101b47 <mem_init+0x3da>
-f0101b23:	c7 44 24 0c d1 5b 10 	movl   $0xf0105bd1,0xc(%esp)
+f0101b23:	c7 44 24 0c 11 5e 10 	movl   $0xf0105e11,0xc(%esp)
 f0101b2a:	f0 
-f0101b2b:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101b2b:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101b32:	f0 
 f0101b33:	c7 44 24 04 0e 03 00 	movl   $0x30e,0x4(%esp)
 f0101b3a:	00 
-f0101b3b:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101b3b:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101b42:	e8 6a e5 ff ff       	call   f01000b1 <_panic>
 
 	// free and re-allocate?
@@ -3876,13 +3876,13 @@ f0101b69:	e8 45 f8 ff ff       	call   f01013b3 <page_alloc>
 f0101b6e:	89 c6                	mov    %eax,%esi
 f0101b70:	85 c0                	test   %eax,%eax
 f0101b72:	75 24                	jne    f0101b98 <mem_init+0x42b>
-f0101b74:	c7 44 24 0c 26 5b 10 	movl   $0xf0105b26,0xc(%esp)
+f0101b74:	c7 44 24 0c 66 5d 10 	movl   $0xf0105d66,0xc(%esp)
 f0101b7b:	f0 
-f0101b7c:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101b7c:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101b83:	f0 
 f0101b84:	c7 44 24 04 15 03 00 	movl   $0x315,0x4(%esp)
 f0101b8b:	00 
-f0101b8c:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101b8c:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101b93:	e8 19 e5 ff ff       	call   f01000b1 <_panic>
 	assert((pp1 = page_alloc(0)));
 f0101b98:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
@@ -3890,13 +3890,13 @@ f0101b9f:	e8 0f f8 ff ff       	call   f01013b3 <page_alloc>
 f0101ba4:	89 c7                	mov    %eax,%edi
 f0101ba6:	85 c0                	test   %eax,%eax
 f0101ba8:	75 24                	jne    f0101bce <mem_init+0x461>
-f0101baa:	c7 44 24 0c 3c 5b 10 	movl   $0xf0105b3c,0xc(%esp)
+f0101baa:	c7 44 24 0c 7c 5d 10 	movl   $0xf0105d7c,0xc(%esp)
 f0101bb1:	f0 
-f0101bb2:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101bb2:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101bb9:	f0 
 f0101bba:	c7 44 24 04 16 03 00 	movl   $0x316,0x4(%esp)
 f0101bc1:	00 
-f0101bc2:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101bc2:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101bc9:	e8 e3 e4 ff ff       	call   f01000b1 <_panic>
 	assert((pp2 = page_alloc(0)));
 f0101bce:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
@@ -3904,25 +3904,25 @@ f0101bd5:	e8 d9 f7 ff ff       	call   f01013b3 <page_alloc>
 f0101bda:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 f0101bdd:	85 c0                	test   %eax,%eax
 f0101bdf:	75 24                	jne    f0101c05 <mem_init+0x498>
-f0101be1:	c7 44 24 0c 52 5b 10 	movl   $0xf0105b52,0xc(%esp)
+f0101be1:	c7 44 24 0c 92 5d 10 	movl   $0xf0105d92,0xc(%esp)
 f0101be8:	f0 
-f0101be9:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101be9:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101bf0:	f0 
 f0101bf1:	c7 44 24 04 17 03 00 	movl   $0x317,0x4(%esp)
 f0101bf8:	00 
-f0101bf9:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101bf9:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101c00:	e8 ac e4 ff ff       	call   f01000b1 <_panic>
 	assert(pp0);
 	assert(pp1 && pp1 != pp0);
 f0101c05:	39 fe                	cmp    %edi,%esi
 f0101c07:	75 24                	jne    f0101c2d <mem_init+0x4c0>
-f0101c09:	c7 44 24 0c 68 5b 10 	movl   $0xf0105b68,0xc(%esp)
+f0101c09:	c7 44 24 0c a8 5d 10 	movl   $0xf0105da8,0xc(%esp)
 f0101c10:	f0 
-f0101c11:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101c11:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101c18:	f0 
 f0101c19:	c7 44 24 04 19 03 00 	movl   $0x319,0x4(%esp)
 f0101c20:	00 
-f0101c21:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101c21:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101c28:	e8 84 e4 ff ff       	call   f01000b1 <_panic>
 	assert(pp2 && pp2 != pp1 && pp2 != pp0);
 f0101c2d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
@@ -3930,26 +3930,26 @@ f0101c30:	39 c7                	cmp    %eax,%edi
 f0101c32:	74 04                	je     f0101c38 <mem_init+0x4cb>
 f0101c34:	39 c6                	cmp    %eax,%esi
 f0101c36:	75 24                	jne    f0101c5c <mem_init+0x4ef>
-f0101c38:	c7 44 24 0c b4 5f 10 	movl   $0xf0105fb4,0xc(%esp)
+f0101c38:	c7 44 24 0c f4 61 10 	movl   $0xf01061f4,0xc(%esp)
 f0101c3f:	f0 
-f0101c40:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101c40:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101c47:	f0 
 f0101c48:	c7 44 24 04 1a 03 00 	movl   $0x31a,0x4(%esp)
 f0101c4f:	00 
-f0101c50:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101c50:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101c57:	e8 55 e4 ff ff       	call   f01000b1 <_panic>
 	assert(!page_alloc(0));
 f0101c5c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 f0101c63:	e8 4b f7 ff ff       	call   f01013b3 <page_alloc>
 f0101c68:	85 c0                	test   %eax,%eax
 f0101c6a:	74 24                	je     f0101c90 <mem_init+0x523>
-f0101c6c:	c7 44 24 0c d1 5b 10 	movl   $0xf0105bd1,0xc(%esp)
+f0101c6c:	c7 44 24 0c 11 5e 10 	movl   $0xf0105e11,0xc(%esp)
 f0101c73:	f0 
-f0101c74:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101c74:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101c7b:	f0 
 f0101c7c:	c7 44 24 04 1b 03 00 	movl   $0x31b,0x4(%esp)
 f0101c83:	00 
-f0101c84:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101c84:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101c8b:	e8 21 e4 ff ff       	call   f01000b1 <_panic>
 f0101c90:	89 f0                	mov    %esi,%eax
 f0101c92:	2b 05 6c 49 19 f0    	sub    0xf019496c,%eax
@@ -3967,11 +3967,11 @@ f0101ca3:	3b 15 64 49 19 f0    	cmp    0xf0194964,%edx
 f0101ca9:	72 20                	jb     f0101ccb <mem_init+0x55e>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f0101cab:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0101caf:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f0101caf:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f0101cb6:	f0 
 f0101cb7:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
 f0101cbe:	00 
-f0101cbf:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f0101cbf:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f0101cc6:	e8 e6 e3 ff ff       	call   f01000b1 <_panic>
 
 	// test flags
@@ -3983,7 +3983,7 @@ f0101cda:	00
 	return (void *)(pa + KERNBASE);
 f0101cdb:	2d 00 00 00 10       	sub    $0x10000000,%eax
 f0101ce0:	89 04 24             	mov    %eax,(%esp)
-f0101ce3:	e8 7b 2f 00 00       	call   f0104c63 <memset>
+f0101ce3:	e8 c3 31 00 00       	call   f0104eab <memset>
 	page_free(pp0);
 f0101ce8:	89 34 24             	mov    %esi,(%esp)
 f0101ceb:	e8 54 f7 ff ff       	call   f0101444 <page_free>
@@ -3992,24 +3992,24 @@ f0101cf0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 f0101cf7:	e8 b7 f6 ff ff       	call   f01013b3 <page_alloc>
 f0101cfc:	85 c0                	test   %eax,%eax
 f0101cfe:	75 24                	jne    f0101d24 <mem_init+0x5b7>
-f0101d00:	c7 44 24 0c e0 5b 10 	movl   $0xf0105be0,0xc(%esp)
+f0101d00:	c7 44 24 0c 20 5e 10 	movl   $0xf0105e20,0xc(%esp)
 f0101d07:	f0 
-f0101d08:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101d08:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101d0f:	f0 
 f0101d10:	c7 44 24 04 20 03 00 	movl   $0x320,0x4(%esp)
 f0101d17:	00 
-f0101d18:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101d18:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101d1f:	e8 8d e3 ff ff       	call   f01000b1 <_panic>
 	assert(pp && pp0 == pp);
 f0101d24:	39 c6                	cmp    %eax,%esi
 f0101d26:	74 24                	je     f0101d4c <mem_init+0x5df>
-f0101d28:	c7 44 24 0c fe 5b 10 	movl   $0xf0105bfe,0xc(%esp)
+f0101d28:	c7 44 24 0c 3e 5e 10 	movl   $0xf0105e3e,0xc(%esp)
 f0101d2f:	f0 
-f0101d30:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101d30:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101d37:	f0 
 f0101d38:	c7 44 24 04 21 03 00 	movl   $0x321,0x4(%esp)
 f0101d3f:	00 
-f0101d40:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101d40:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101d47:	e8 65 e3 ff ff       	call   f01000b1 <_panic>
 void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);
 
@@ -4033,11 +4033,11 @@ f0101d5f:	3b 15 64 49 19 f0    	cmp    0xf0194964,%edx
 f0101d65:	72 20                	jb     f0101d87 <mem_init+0x61a>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f0101d67:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0101d6b:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f0101d6b:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f0101d72:	f0 
 f0101d73:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
 f0101d7a:	00 
-f0101d7b:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f0101d7b:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f0101d82:	e8 2a e3 ff ff       	call   f01000b1 <_panic>
 f0101d87:	8d 90 00 10 00 f0    	lea    -0xffff000(%eax),%edx
 	return (void *)(pa + KERNBASE);
@@ -4047,13 +4047,13 @@ f0101d8d:	8d 80 00 00 00 f0    	lea    -0x10000000(%eax),%eax
 		assert(c[i] == 0);
 f0101d93:	80 38 00             	cmpb   $0x0,(%eax)
 f0101d96:	74 24                	je     f0101dbc <mem_init+0x64f>
-f0101d98:	c7 44 24 0c 0e 5c 10 	movl   $0xf0105c0e,0xc(%esp)
+f0101d98:	c7 44 24 0c 4e 5e 10 	movl   $0xf0105e4e,0xc(%esp)
 f0101d9f:	f0 
-f0101da0:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101da0:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101da7:	f0 
 f0101da8:	c7 44 24 04 24 03 00 	movl   $0x324,0x4(%esp)
 f0101daf:	00 
-f0101db0:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101db0:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101db7:	e8 f5 e2 ff ff       	call   f01000b1 <_panic>
 f0101dbc:	40                   	inc    %eax
 	memset(page2kva(pp0), 1, PGSIZE);
@@ -4102,26 +4102,26 @@ f0101df0:	75 f9                	jne    f0101deb <mem_init+0x67e>
 	assert(nfree == 0);
 f0101df2:	85 db                	test   %ebx,%ebx
 f0101df4:	74 24                	je     f0101e1a <mem_init+0x6ad>
-f0101df6:	c7 44 24 0c 18 5c 10 	movl   $0xf0105c18,0xc(%esp)
+f0101df6:	c7 44 24 0c 58 5e 10 	movl   $0xf0105e58,0xc(%esp)
 f0101dfd:	f0 
-f0101dfe:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101dfe:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101e05:	f0 
 f0101e06:	c7 44 24 04 31 03 00 	movl   $0x331,0x4(%esp)
 f0101e0d:	00 
-f0101e0e:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101e0e:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101e15:	e8 97 e2 ff ff       	call   f01000b1 <_panic>
 
 	cprintf("check_page_alloc() succeeded!\n");
-f0101e1a:	c7 04 24 d4 5f 10 f0 	movl   $0xf0105fd4,(%esp)
-f0101e21:	e8 64 1b 00 00       	call   f010398a <cprintf>
+f0101e1a:	c7 04 24 14 62 10 f0 	movl   $0xf0106214,(%esp)
+f0101e21:	e8 30 1b 00 00       	call   f0103956 <cprintf>
 
 // check page_insert, page_remove, &c
 static void
 check_page(void)
 {
 	cprintf("start checking page...\n");
-f0101e26:	c7 04 24 23 5c 10 f0 	movl   $0xf0105c23,(%esp)
-f0101e2d:	e8 58 1b 00 00       	call   f010398a <cprintf>
+f0101e26:	c7 04 24 63 5e 10 f0 	movl   $0xf0105e63,(%esp)
+f0101e2d:	e8 24 1b 00 00       	call   f0103956 <cprintf>
 	int i;
 	extern pde_t entry_pgdir[];
 
@@ -4133,13 +4133,13 @@ f0101e39:	e8 75 f5 ff ff       	call   f01013b3 <page_alloc>
 f0101e3e:	89 c7                	mov    %eax,%edi
 f0101e40:	85 c0                	test   %eax,%eax
 f0101e42:	75 24                	jne    f0101e68 <mem_init+0x6fb>
-f0101e44:	c7 44 24 0c 26 5b 10 	movl   $0xf0105b26,0xc(%esp)
+f0101e44:	c7 44 24 0c 66 5d 10 	movl   $0xf0105d66,0xc(%esp)
 f0101e4b:	f0 
-f0101e4c:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101e4c:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101e53:	f0 
 f0101e54:	c7 44 24 04 b9 03 00 	movl   $0x3b9,0x4(%esp)
 f0101e5b:	00 
-f0101e5c:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101e5c:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101e63:	e8 49 e2 ff ff       	call   f01000b1 <_panic>
 	assert((pp1 = page_alloc(0)));
 f0101e68:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
@@ -4147,13 +4147,13 @@ f0101e6f:	e8 3f f5 ff ff       	call   f01013b3 <page_alloc>
 f0101e74:	89 c3                	mov    %eax,%ebx
 f0101e76:	85 c0                	test   %eax,%eax
 f0101e78:	75 24                	jne    f0101e9e <mem_init+0x731>
-f0101e7a:	c7 44 24 0c 3c 5b 10 	movl   $0xf0105b3c,0xc(%esp)
+f0101e7a:	c7 44 24 0c 7c 5d 10 	movl   $0xf0105d7c,0xc(%esp)
 f0101e81:	f0 
-f0101e82:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101e82:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101e89:	f0 
 f0101e8a:	c7 44 24 04 ba 03 00 	movl   $0x3ba,0x4(%esp)
 f0101e91:	00 
-f0101e92:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101e92:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101e99:	e8 13 e2 ff ff       	call   f01000b1 <_panic>
 	assert((pp2 = page_alloc(0)));
 f0101e9e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
@@ -4161,39 +4161,39 @@ f0101ea5:	e8 09 f5 ff ff       	call   f01013b3 <page_alloc>
 f0101eaa:	89 c6                	mov    %eax,%esi
 f0101eac:	85 c0                	test   %eax,%eax
 f0101eae:	75 24                	jne    f0101ed4 <mem_init+0x767>
-f0101eb0:	c7 44 24 0c 52 5b 10 	movl   $0xf0105b52,0xc(%esp)
+f0101eb0:	c7 44 24 0c 92 5d 10 	movl   $0xf0105d92,0xc(%esp)
 f0101eb7:	f0 
-f0101eb8:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101eb8:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101ebf:	f0 
 f0101ec0:	c7 44 24 04 bb 03 00 	movl   $0x3bb,0x4(%esp)
 f0101ec7:	00 
-f0101ec8:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101ec8:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101ecf:	e8 dd e1 ff ff       	call   f01000b1 <_panic>
 
 	assert(pp0);
 	assert(pp1 && pp1 != pp0);
 f0101ed4:	39 df                	cmp    %ebx,%edi
 f0101ed6:	75 24                	jne    f0101efc <mem_init+0x78f>
-f0101ed8:	c7 44 24 0c 68 5b 10 	movl   $0xf0105b68,0xc(%esp)
+f0101ed8:	c7 44 24 0c a8 5d 10 	movl   $0xf0105da8,0xc(%esp)
 f0101edf:	f0 
-f0101ee0:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101ee0:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101ee7:	f0 
 f0101ee8:	c7 44 24 04 be 03 00 	movl   $0x3be,0x4(%esp)
 f0101eef:	00 
-f0101ef0:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101ef0:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101ef7:	e8 b5 e1 ff ff       	call   f01000b1 <_panic>
 	assert(pp2 && pp2 != pp1 && pp2 != pp0);
 f0101efc:	39 c3                	cmp    %eax,%ebx
 f0101efe:	74 04                	je     f0101f04 <mem_init+0x797>
 f0101f00:	39 c7                	cmp    %eax,%edi
 f0101f02:	75 24                	jne    f0101f28 <mem_init+0x7bb>
-f0101f04:	c7 44 24 0c b4 5f 10 	movl   $0xf0105fb4,0xc(%esp)
+f0101f04:	c7 44 24 0c f4 61 10 	movl   $0xf01061f4,0xc(%esp)
 f0101f0b:	f0 
-f0101f0c:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101f0c:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101f13:	f0 
 f0101f14:	c7 44 24 04 bf 03 00 	movl   $0x3bf,0x4(%esp)
 f0101f1b:	00 
-f0101f1c:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101f1c:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101f23:	e8 89 e1 ff ff       	call   f01000b1 <_panic>
 
 	// temporarily steal the rest of the free pages
@@ -4210,13 +4210,13 @@ f0101f3a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 f0101f41:	e8 6d f4 ff ff       	call   f01013b3 <page_alloc>
 f0101f46:	85 c0                	test   %eax,%eax
 f0101f48:	74 24                	je     f0101f6e <mem_init+0x801>
-f0101f4a:	c7 44 24 0c d1 5b 10 	movl   $0xf0105bd1,0xc(%esp)
+f0101f4a:	c7 44 24 0c 11 5e 10 	movl   $0xf0105e11,0xc(%esp)
 f0101f51:	f0 
-f0101f52:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101f52:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101f59:	f0 
 f0101f5a:	c7 44 24 04 c6 03 00 	movl   $0x3c6,0x4(%esp)
 f0101f61:	00 
-f0101f62:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101f62:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101f69:	e8 43 e1 ff ff       	call   f01000b1 <_panic>
 
 	// there is no page allocated at address 0
@@ -4230,13 +4230,13 @@ f0101f82:	89 04 24             	mov    %eax,(%esp)
 f0101f85:	e8 a0 f6 ff ff       	call   f010162a <page_lookup>
 f0101f8a:	85 c0                	test   %eax,%eax
 f0101f8c:	74 24                	je     f0101fb2 <mem_init+0x845>
-f0101f8e:	c7 44 24 0c f4 5f 10 	movl   $0xf0105ff4,0xc(%esp)
+f0101f8e:	c7 44 24 0c 34 62 10 	movl   $0xf0106234,0xc(%esp)
 f0101f95:	f0 
-f0101f96:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101f96:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101f9d:	f0 
 f0101f9e:	c7 44 24 04 c9 03 00 	movl   $0x3c9,0x4(%esp)
 f0101fa5:	00 
-f0101fa6:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101fa6:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101fad:	e8 ff e0 ff ff       	call   f01000b1 <_panic>
 
 	// there is no free memory, so we can't allocate a page table
@@ -4251,13 +4251,13 @@ f0101fcb:	89 04 24             	mov    %eax,(%esp)
 f0101fce:	e8 0d f7 ff ff       	call   f01016e0 <page_insert>
 f0101fd3:	85 c0                	test   %eax,%eax
 f0101fd5:	78 24                	js     f0101ffb <mem_init+0x88e>
-f0101fd7:	c7 44 24 0c 2c 60 10 	movl   $0xf010602c,0xc(%esp)
+f0101fd7:	c7 44 24 0c 6c 62 10 	movl   $0xf010626c,0xc(%esp)
 f0101fde:	f0 
-f0101fdf:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0101fdf:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0101fe6:	f0 
 f0101fe7:	c7 44 24 04 cc 03 00 	movl   $0x3cc,0x4(%esp)
 f0101fee:	00 
-f0101fef:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0101fef:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0101ff6:	e8 b6 e0 ff ff       	call   f01000b1 <_panic>
 
 	// free pp0 and try again: pp0 should be used for page table
@@ -4277,13 +4277,13 @@ f010201c:	89 04 24             	mov    %eax,(%esp)
 f010201f:	e8 bc f6 ff ff       	call   f01016e0 <page_insert>
 f0102024:	85 c0                	test   %eax,%eax
 f0102026:	74 24                	je     f010204c <mem_init+0x8df>
-f0102028:	c7 44 24 0c 5c 60 10 	movl   $0xf010605c,0xc(%esp)
+f0102028:	c7 44 24 0c 9c 62 10 	movl   $0xf010629c,0xc(%esp)
 f010202f:	f0 
-f0102030:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102030:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102037:	f0 
 f0102038:	c7 44 24 04 d2 03 00 	movl   $0x3d2,0x4(%esp)
 f010203f:	00 
-f0102040:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102040:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102047:	e8 65 e0 ff ff       	call   f01000b1 <_panic>
 	// cprintf("kern_pgdir[0] is 0x%x\n", kern_pgdir[0]);
 	// cprintf("PTE_ADDR(kern_pgdir[0]) is 0x%x, page2pa(pp0) is 0x%x\n", 
@@ -4309,13 +4309,13 @@ f010206e:	c1 f8 03             	sar    $0x3,%eax
 f0102071:	c1 e0 0c             	shl    $0xc,%eax
 f0102074:	39 c2                	cmp    %eax,%edx
 f0102076:	74 24                	je     f010209c <mem_init+0x92f>
-f0102078:	c7 44 24 0c 8c 60 10 	movl   $0xf010608c,0xc(%esp)
+f0102078:	c7 44 24 0c cc 62 10 	movl   $0xf01062cc,0xc(%esp)
 f010207f:	f0 
-f0102080:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102080:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102087:	f0 
 f0102088:	c7 44 24 04 d6 03 00 	movl   $0x3d6,0x4(%esp)
 f010208f:	00 
-f0102090:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102090:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102097:	e8 15 e0 ff ff       	call   f01000b1 <_panic>
 	// cprintf("check_va2pa(kern_pgdir, 0x0) is 0x%x, page2pa(pp1) is 0x%x\n", 
 	// 	check_va2pa(kern_pgdir, 0x0), page2pa(pp1));
@@ -4329,35 +4329,35 @@ f01020ae:	c1 fa 03             	sar    $0x3,%edx
 f01020b1:	c1 e2 0c             	shl    $0xc,%edx
 f01020b4:	39 d0                	cmp    %edx,%eax
 f01020b6:	74 24                	je     f01020dc <mem_init+0x96f>
-f01020b8:	c7 44 24 0c b4 60 10 	movl   $0xf01060b4,0xc(%esp)
+f01020b8:	c7 44 24 0c f4 62 10 	movl   $0xf01062f4,0xc(%esp)
 f01020bf:	f0 
-f01020c0:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01020c0:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01020c7:	f0 
 f01020c8:	c7 44 24 04 d9 03 00 	movl   $0x3d9,0x4(%esp)
 f01020cf:	00 
-f01020d0:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01020d0:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01020d7:	e8 d5 df ff ff       	call   f01000b1 <_panic>
 	assert(pp1->pp_ref == 1);
 f01020dc:	66 83 7b 04 01       	cmpw   $0x1,0x4(%ebx)
 f01020e1:	74 24                	je     f0102107 <mem_init+0x99a>
-f01020e3:	c7 44 24 0c 3b 5c 10 	movl   $0xf0105c3b,0xc(%esp)
+f01020e3:	c7 44 24 0c 7b 5e 10 	movl   $0xf0105e7b,0xc(%esp)
 f01020ea:	f0 
-f01020eb:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01020eb:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01020f2:	f0 
 f01020f3:	c7 44 24 04 da 03 00 	movl   $0x3da,0x4(%esp)
 f01020fa:	00 
-f01020fb:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01020fb:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102102:	e8 aa df ff ff       	call   f01000b1 <_panic>
 	assert(pp0->pp_ref == 1);
 f0102107:	66 83 7f 04 01       	cmpw   $0x1,0x4(%edi)
 f010210c:	74 24                	je     f0102132 <mem_init+0x9c5>
-f010210e:	c7 44 24 0c 4c 5c 10 	movl   $0xf0105c4c,0xc(%esp)
+f010210e:	c7 44 24 0c 8c 5e 10 	movl   $0xf0105e8c,0xc(%esp)
 f0102115:	f0 
-f0102116:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102116:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f010211d:	f0 
 f010211e:	c7 44 24 04 db 03 00 	movl   $0x3db,0x4(%esp)
 f0102125:	00 
-f0102126:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102126:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010212d:	e8 7f df ff ff       	call   f01000b1 <_panic>
 
 	pgdir_walk(kern_pgdir, 0x0, 0);
@@ -4380,13 +4380,13 @@ f0102166:	89 04 24             	mov    %eax,(%esp)
 f0102169:	e8 72 f5 ff ff       	call   f01016e0 <page_insert>
 f010216e:	85 c0                	test   %eax,%eax
 f0102170:	74 24                	je     f0102196 <mem_init+0xa29>
-f0102172:	c7 44 24 0c e4 60 10 	movl   $0xf01060e4,0xc(%esp)
+f0102172:	c7 44 24 0c 24 63 10 	movl   $0xf0106324,0xc(%esp)
 f0102179:	f0 
-f010217a:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010217a:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102181:	f0 
 f0102182:	c7 44 24 04 df 03 00 	movl   $0x3df,0x4(%esp)
 f0102189:	00 
-f010218a:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010218a:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102191:	e8 1b df ff ff       	call   f01000b1 <_panic>
 	//cprintf("check_va2pa(kern_pgdir, PGSIZE) is 0x%x, page2pa(pp2) is 0x%x\n", 
 	//	check_va2pa(kern_pgdir, PGSIZE), page2pa(pp2));
@@ -4400,24 +4400,24 @@ f01021ad:	c1 fa 03             	sar    $0x3,%edx
 f01021b0:	c1 e2 0c             	shl    $0xc,%edx
 f01021b3:	39 d0                	cmp    %edx,%eax
 f01021b5:	74 24                	je     f01021db <mem_init+0xa6e>
-f01021b7:	c7 44 24 0c 20 61 10 	movl   $0xf0106120,0xc(%esp)
+f01021b7:	c7 44 24 0c 60 63 10 	movl   $0xf0106360,0xc(%esp)
 f01021be:	f0 
-f01021bf:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01021bf:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01021c6:	f0 
 f01021c7:	c7 44 24 04 e2 03 00 	movl   $0x3e2,0x4(%esp)
 f01021ce:	00 
-f01021cf:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01021cf:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01021d6:	e8 d6 de ff ff       	call   f01000b1 <_panic>
 	assert(pp2->pp_ref == 1);
 f01021db:	66 83 7e 04 01       	cmpw   $0x1,0x4(%esi)
 f01021e0:	74 24                	je     f0102206 <mem_init+0xa99>
-f01021e2:	c7 44 24 0c 5d 5c 10 	movl   $0xf0105c5d,0xc(%esp)
+f01021e2:	c7 44 24 0c 9d 5e 10 	movl   $0xf0105e9d,0xc(%esp)
 f01021e9:	f0 
-f01021ea:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01021ea:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01021f1:	f0 
 f01021f2:	c7 44 24 04 e3 03 00 	movl   $0x3e3,0x4(%esp)
 f01021f9:	00 
-f01021fa:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01021fa:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102201:	e8 ab de ff ff       	call   f01000b1 <_panic>
 
 	// should be no free memory
@@ -4426,17 +4426,17 @@ f0102206:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 f010220d:	e8 a1 f1 ff ff       	call   f01013b3 <page_alloc>
 f0102212:	85 c0                	test   %eax,%eax
 f0102214:	74 24                	je     f010223a <mem_init+0xacd>
-f0102216:	c7 44 24 0c d1 5b 10 	movl   $0xf0105bd1,0xc(%esp)
+f0102216:	c7 44 24 0c 11 5e 10 	movl   $0xf0105e11,0xc(%esp)
 f010221d:	f0 
-f010221e:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010221e:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102225:	f0 
 f0102226:	c7 44 24 04 e6 03 00 	movl   $0x3e6,0x4(%esp)
 f010222d:	00 
-f010222e:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010222e:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102235:	e8 77 de ff ff       	call   f01000b1 <_panic>
 	cprintf("BUG...\n");
-f010223a:	c7 04 24 6e 5c 10 f0 	movl   $0xf0105c6e,(%esp)
-f0102241:	e8 44 17 00 00       	call   f010398a <cprintf>
+f010223a:	c7 04 24 ae 5e 10 f0 	movl   $0xf0105eae,(%esp)
+f0102241:	e8 10 17 00 00       	call   f0103956 <cprintf>
 	// should be able to map pp2 at PGSIZE because it's already there
 	assert(page_insert(kern_pgdir, pp2, (void*) PGSIZE, PTE_W) == 0);
 f0102246:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
@@ -4449,13 +4449,13 @@ f010225f:	89 04 24             	mov    %eax,(%esp)
 f0102262:	e8 79 f4 ff ff       	call   f01016e0 <page_insert>
 f0102267:	85 c0                	test   %eax,%eax
 f0102269:	74 24                	je     f010228f <mem_init+0xb22>
-f010226b:	c7 44 24 0c e4 60 10 	movl   $0xf01060e4,0xc(%esp)
+f010226b:	c7 44 24 0c 24 63 10 	movl   $0xf0106324,0xc(%esp)
 f0102272:	f0 
-f0102273:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102273:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f010227a:	f0 
 f010227b:	c7 44 24 04 e9 03 00 	movl   $0x3e9,0x4(%esp)
 f0102282:	00 
-f0102283:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102283:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010228a:	e8 22 de ff ff       	call   f01000b1 <_panic>
 	assert(check_va2pa(kern_pgdir, PGSIZE) == page2pa(pp2));
 f010228f:	ba 00 10 00 00       	mov    $0x1000,%edx
@@ -4467,24 +4467,24 @@ f01022a6:	c1 fa 03             	sar    $0x3,%edx
 f01022a9:	c1 e2 0c             	shl    $0xc,%edx
 f01022ac:	39 d0                	cmp    %edx,%eax
 f01022ae:	74 24                	je     f01022d4 <mem_init+0xb67>
-f01022b0:	c7 44 24 0c 20 61 10 	movl   $0xf0106120,0xc(%esp)
+f01022b0:	c7 44 24 0c 60 63 10 	movl   $0xf0106360,0xc(%esp)
 f01022b7:	f0 
-f01022b8:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01022b8:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01022bf:	f0 
 f01022c0:	c7 44 24 04 ea 03 00 	movl   $0x3ea,0x4(%esp)
 f01022c7:	00 
-f01022c8:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01022c8:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01022cf:	e8 dd dd ff ff       	call   f01000b1 <_panic>
 	assert(pp2->pp_ref == 1);
 f01022d4:	66 83 7e 04 01       	cmpw   $0x1,0x4(%esi)
 f01022d9:	74 24                	je     f01022ff <mem_init+0xb92>
-f01022db:	c7 44 24 0c 5d 5c 10 	movl   $0xf0105c5d,0xc(%esp)
+f01022db:	c7 44 24 0c 9d 5e 10 	movl   $0xf0105e9d,0xc(%esp)
 f01022e2:	f0 
-f01022e3:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01022e3:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01022ea:	f0 
 f01022eb:	c7 44 24 04 eb 03 00 	movl   $0x3eb,0x4(%esp)
 f01022f2:	00 
-f01022f3:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01022f3:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01022fa:	e8 b2 dd ff ff       	call   f01000b1 <_panic>
 
 	// pp2 should NOT be on the free list
@@ -4492,21 +4492,21 @@ f01022fa:	e8 b2 dd ff ff       	call   f01000b1 <_panic>
 	cprintf("page_free_list is 0x%x\n", page_free_list);
 f01022ff:	a1 9c 3c 19 f0       	mov    0xf0193c9c,%eax
 f0102304:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0102308:	c7 04 24 76 5c 10 f0 	movl   $0xf0105c76,(%esp)
-f010230f:	e8 76 16 00 00       	call   f010398a <cprintf>
+f0102308:	c7 04 24 b6 5e 10 f0 	movl   $0xf0105eb6,(%esp)
+f010230f:	e8 42 16 00 00       	call   f0103956 <cprintf>
 
 	assert(!page_alloc(0));
 f0102314:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 f010231b:	e8 93 f0 ff ff       	call   f01013b3 <page_alloc>
 f0102320:	85 c0                	test   %eax,%eax
 f0102322:	74 24                	je     f0102348 <mem_init+0xbdb>
-f0102324:	c7 44 24 0c d1 5b 10 	movl   $0xf0105bd1,0xc(%esp)
+f0102324:	c7 44 24 0c 11 5e 10 	movl   $0xf0105e11,0xc(%esp)
 f010232b:	f0 
-f010232c:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010232c:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102333:	f0 
 f0102334:	c7 44 24 04 f1 03 00 	movl   $0x3f1,0x4(%esp)
 f010233b:	00 
-f010233c:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010233c:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102343:	e8 69 dd ff ff       	call   f01000b1 <_panic>
 
 	// check that pgdir_walk returns a pointer to the pte
@@ -4526,11 +4526,11 @@ f010235a:	3b 0d 64 49 19 f0    	cmp    0xf0194964,%ecx
 f0102360:	72 20                	jb     f0102382 <mem_init+0xc15>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f0102362:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0102366:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f0102366:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f010236d:	f0 
 f010236e:	c7 44 24 04 f4 03 00 	movl   $0x3f4,0x4(%esp)
 f0102375:	00 
-f0102376:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102376:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010237d:	e8 2f dd ff ff       	call   f01000b1 <_panic>
 	return (void *)(pa + KERNBASE);
 f0102382:	2d 00 00 00 10       	sub    $0x10000000,%eax
@@ -4546,13 +4546,13 @@ f01023a2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 f01023a5:	8d 51 04             	lea    0x4(%ecx),%edx
 f01023a8:	39 d0                	cmp    %edx,%eax
 f01023aa:	74 24                	je     f01023d0 <mem_init+0xc63>
-f01023ac:	c7 44 24 0c 50 61 10 	movl   $0xf0106150,0xc(%esp)
+f01023ac:	c7 44 24 0c 90 63 10 	movl   $0xf0106390,0xc(%esp)
 f01023b3:	f0 
-f01023b4:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01023b4:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01023bb:	f0 
 f01023bc:	c7 44 24 04 f5 03 00 	movl   $0x3f5,0x4(%esp)
 f01023c3:	00 
-f01023c4:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01023c4:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01023cb:	e8 e1 dc ff ff       	call   f01000b1 <_panic>
 
 	// should be able to change permissions too.
@@ -4567,13 +4567,13 @@ f01023e9:	89 04 24             	mov    %eax,(%esp)
 f01023ec:	e8 ef f2 ff ff       	call   f01016e0 <page_insert>
 f01023f1:	85 c0                	test   %eax,%eax
 f01023f3:	74 24                	je     f0102419 <mem_init+0xcac>
-f01023f5:	c7 44 24 0c 90 61 10 	movl   $0xf0106190,0xc(%esp)
+f01023f5:	c7 44 24 0c d0 63 10 	movl   $0xf01063d0,0xc(%esp)
 f01023fc:	f0 
-f01023fd:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01023fd:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102404:	f0 
 f0102405:	c7 44 24 04 f8 03 00 	movl   $0x3f8,0x4(%esp)
 f010240c:	00 
-f010240d:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010240d:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102414:	e8 98 dc ff ff       	call   f01000b1 <_panic>
 	assert(check_va2pa(kern_pgdir, PGSIZE) == page2pa(pp2));
 f0102419:	a1 68 49 19 f0       	mov    0xf0194968,%eax
@@ -4592,24 +4592,24 @@ f0102433:	c1 fa 03             	sar    $0x3,%edx
 f0102436:	c1 e2 0c             	shl    $0xc,%edx
 f0102439:	39 d0                	cmp    %edx,%eax
 f010243b:	74 24                	je     f0102461 <mem_init+0xcf4>
-f010243d:	c7 44 24 0c 20 61 10 	movl   $0xf0106120,0xc(%esp)
+f010243d:	c7 44 24 0c 60 63 10 	movl   $0xf0106360,0xc(%esp)
 f0102444:	f0 
-f0102445:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102445:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f010244c:	f0 
 f010244d:	c7 44 24 04 f9 03 00 	movl   $0x3f9,0x4(%esp)
 f0102454:	00 
-f0102455:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102455:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010245c:	e8 50 dc ff ff       	call   f01000b1 <_panic>
 	assert(pp2->pp_ref == 1);
 f0102461:	66 83 7e 04 01       	cmpw   $0x1,0x4(%esi)
 f0102466:	74 24                	je     f010248c <mem_init+0xd1f>
-f0102468:	c7 44 24 0c 5d 5c 10 	movl   $0xf0105c5d,0xc(%esp)
+f0102468:	c7 44 24 0c 9d 5e 10 	movl   $0xf0105e9d,0xc(%esp)
 f010246f:	f0 
-f0102470:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102470:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102477:	f0 
 f0102478:	c7 44 24 04 fa 03 00 	movl   $0x3fa,0x4(%esp)
 f010247f:	00 
-f0102480:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102480:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102487:	e8 25 dc ff ff       	call   f01000b1 <_panic>
 	assert(*pgdir_walk(kern_pgdir, (void*) PGSIZE, 0) & PTE_U);
 f010248c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
@@ -4621,25 +4621,25 @@ f010249f:	89 04 24             	mov    %eax,(%esp)
 f01024a2:	e8 ff ef ff ff       	call   f01014a6 <pgdir_walk>
 f01024a7:	f6 00 04             	testb  $0x4,(%eax)
 f01024aa:	75 24                	jne    f01024d0 <mem_init+0xd63>
-f01024ac:	c7 44 24 0c d0 61 10 	movl   $0xf01061d0,0xc(%esp)
+f01024ac:	c7 44 24 0c 10 64 10 	movl   $0xf0106410,0xc(%esp)
 f01024b3:	f0 
-f01024b4:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01024b4:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01024bb:	f0 
 f01024bc:	c7 44 24 04 fb 03 00 	movl   $0x3fb,0x4(%esp)
 f01024c3:	00 
-f01024c4:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01024c4:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01024cb:	e8 e1 db ff ff       	call   f01000b1 <_panic>
 	assert(kern_pgdir[0] & PTE_U);
 f01024d0:	a1 68 49 19 f0       	mov    0xf0194968,%eax
 f01024d5:	f6 00 04             	testb  $0x4,(%eax)
 f01024d8:	75 24                	jne    f01024fe <mem_init+0xd91>
-f01024da:	c7 44 24 0c 8e 5c 10 	movl   $0xf0105c8e,0xc(%esp)
+f01024da:	c7 44 24 0c ce 5e 10 	movl   $0xf0105ece,0xc(%esp)
 f01024e1:	f0 
-f01024e2:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01024e2:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01024e9:	f0 
 f01024ea:	c7 44 24 04 fc 03 00 	movl   $0x3fc,0x4(%esp)
 f01024f1:	00 
-f01024f2:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01024f2:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01024f9:	e8 b3 db ff ff       	call   f01000b1 <_panic>
 
 	// should be able to remap with fewer permissions
@@ -4653,13 +4653,13 @@ f0102512:	89 04 24             	mov    %eax,(%esp)
 f0102515:	e8 c6 f1 ff ff       	call   f01016e0 <page_insert>
 f010251a:	85 c0                	test   %eax,%eax
 f010251c:	74 24                	je     f0102542 <mem_init+0xdd5>
-f010251e:	c7 44 24 0c e4 60 10 	movl   $0xf01060e4,0xc(%esp)
+f010251e:	c7 44 24 0c 24 63 10 	movl   $0xf0106324,0xc(%esp)
 f0102525:	f0 
-f0102526:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102526:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f010252d:	f0 
 f010252e:	c7 44 24 04 ff 03 00 	movl   $0x3ff,0x4(%esp)
 f0102535:	00 
-f0102536:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102536:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010253d:	e8 6f db ff ff       	call   f01000b1 <_panic>
 	assert(*pgdir_walk(kern_pgdir, (void*) PGSIZE, 0) & PTE_W);
 f0102542:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
@@ -4671,13 +4671,13 @@ f0102557:	89 04 24             	mov    %eax,(%esp)
 f010255a:	e8 47 ef ff ff       	call   f01014a6 <pgdir_walk>
 f010255f:	f6 00 02             	testb  $0x2,(%eax)
 f0102562:	75 24                	jne    f0102588 <mem_init+0xe1b>
-f0102564:	c7 44 24 0c 04 62 10 	movl   $0xf0106204,0xc(%esp)
+f0102564:	c7 44 24 0c 44 64 10 	movl   $0xf0106444,0xc(%esp)
 f010256b:	f0 
-f010256c:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010256c:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102573:	f0 
 f0102574:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
 f010257b:	00 
-f010257c:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010257c:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102583:	e8 29 db ff ff       	call   f01000b1 <_panic>
 	assert(!(*pgdir_walk(kern_pgdir, (void*) PGSIZE, 0) & PTE_U));
 f0102588:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
@@ -4689,13 +4689,13 @@ f010259d:	89 04 24             	mov    %eax,(%esp)
 f01025a0:	e8 01 ef ff ff       	call   f01014a6 <pgdir_walk>
 f01025a5:	f6 00 04             	testb  $0x4,(%eax)
 f01025a8:	74 24                	je     f01025ce <mem_init+0xe61>
-f01025aa:	c7 44 24 0c 38 62 10 	movl   $0xf0106238,0xc(%esp)
+f01025aa:	c7 44 24 0c 78 64 10 	movl   $0xf0106478,0xc(%esp)
 f01025b1:	f0 
-f01025b2:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01025b2:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01025b9:	f0 
 f01025ba:	c7 44 24 04 01 04 00 	movl   $0x401,0x4(%esp)
 f01025c1:	00 
-f01025c2:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01025c2:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01025c9:	e8 e3 da ff ff       	call   f01000b1 <_panic>
 
 	// should not be able to map at PTSIZE because need free page for page table
@@ -4710,13 +4710,13 @@ f01025e7:	89 04 24             	mov    %eax,(%esp)
 f01025ea:	e8 f1 f0 ff ff       	call   f01016e0 <page_insert>
 f01025ef:	85 c0                	test   %eax,%eax
 f01025f1:	78 24                	js     f0102617 <mem_init+0xeaa>
-f01025f3:	c7 44 24 0c 70 62 10 	movl   $0xf0106270,0xc(%esp)
+f01025f3:	c7 44 24 0c b0 64 10 	movl   $0xf01064b0,0xc(%esp)
 f01025fa:	f0 
-f01025fb:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01025fb:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102602:	f0 
 f0102603:	c7 44 24 04 04 04 00 	movl   $0x404,0x4(%esp)
 f010260a:	00 
-f010260b:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010260b:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102612:	e8 9a da ff ff       	call   f01000b1 <_panic>
 
 	// insert pp1 at PGSIZE (replacing pp2)
@@ -4731,13 +4731,13 @@ f0102630:	89 04 24             	mov    %eax,(%esp)
 f0102633:	e8 a8 f0 ff ff       	call   f01016e0 <page_insert>
 f0102638:	85 c0                	test   %eax,%eax
 f010263a:	74 24                	je     f0102660 <mem_init+0xef3>
-f010263c:	c7 44 24 0c a8 62 10 	movl   $0xf01062a8,0xc(%esp)
+f010263c:	c7 44 24 0c e8 64 10 	movl   $0xf01064e8,0xc(%esp)
 f0102643:	f0 
-f0102644:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102644:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f010264b:	f0 
 f010264c:	c7 44 24 04 07 04 00 	movl   $0x407,0x4(%esp)
 f0102653:	00 
-f0102654:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102654:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010265b:	e8 51 da ff ff       	call   f01000b1 <_panic>
 	assert(!(*pgdir_walk(kern_pgdir, (void*) PGSIZE, 0) & PTE_U));
 f0102660:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
@@ -4749,13 +4749,13 @@ f0102675:	89 04 24             	mov    %eax,(%esp)
 f0102678:	e8 29 ee ff ff       	call   f01014a6 <pgdir_walk>
 f010267d:	f6 00 04             	testb  $0x4,(%eax)
 f0102680:	74 24                	je     f01026a6 <mem_init+0xf39>
-f0102682:	c7 44 24 0c 38 62 10 	movl   $0xf0106238,0xc(%esp)
+f0102682:	c7 44 24 0c 78 64 10 	movl   $0xf0106478,0xc(%esp)
 f0102689:	f0 
-f010268a:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010268a:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102691:	f0 
 f0102692:	c7 44 24 04 08 04 00 	movl   $0x408,0x4(%esp)
 f0102699:	00 
-f010269a:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010269a:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01026a1:	e8 0b da ff ff       	call   f01000b1 <_panic>
 
 	// should have pp1 at both 0 and PGSIZE, pp2 nowhere, ...
@@ -4772,13 +4772,13 @@ f01026c5:	c1 f8 03             	sar    $0x3,%eax
 f01026c8:	c1 e0 0c             	shl    $0xc,%eax
 f01026cb:	39 c1                	cmp    %eax,%ecx
 f01026cd:	74 24                	je     f01026f3 <mem_init+0xf86>
-f01026cf:	c7 44 24 0c e4 62 10 	movl   $0xf01062e4,0xc(%esp)
+f01026cf:	c7 44 24 0c 24 65 10 	movl   $0xf0106524,0xc(%esp)
 f01026d6:	f0 
-f01026d7:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01026d7:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01026de:	f0 
 f01026df:	c7 44 24 04 0b 04 00 	movl   $0x40b,0x4(%esp)
 f01026e6:	00 
-f01026e7:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01026e7:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01026ee:	e8 be d9 ff ff       	call   f01000b1 <_panic>
 	assert(check_va2pa(kern_pgdir, PGSIZE) == page2pa(pp1));
 f01026f3:	ba 00 10 00 00       	mov    $0x1000,%edx
@@ -4786,36 +4786,36 @@ f01026f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 f01026fb:	e8 0a e8 ff ff       	call   f0100f0a <check_va2pa>
 f0102700:	39 45 d0             	cmp    %eax,-0x30(%ebp)
 f0102703:	74 24                	je     f0102729 <mem_init+0xfbc>
-f0102705:	c7 44 24 0c 10 63 10 	movl   $0xf0106310,0xc(%esp)
+f0102705:	c7 44 24 0c 50 65 10 	movl   $0xf0106550,0xc(%esp)
 f010270c:	f0 
-f010270d:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010270d:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102714:	f0 
 f0102715:	c7 44 24 04 0c 04 00 	movl   $0x40c,0x4(%esp)
 f010271c:	00 
-f010271d:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010271d:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102724:	e8 88 d9 ff ff       	call   f01000b1 <_panic>
 	// ... and ref counts should reflect this
 	assert(pp1->pp_ref == 2);
 f0102729:	66 83 7b 04 02       	cmpw   $0x2,0x4(%ebx)
 f010272e:	74 24                	je     f0102754 <mem_init+0xfe7>
-f0102730:	c7 44 24 0c a4 5c 10 	movl   $0xf0105ca4,0xc(%esp)
+f0102730:	c7 44 24 0c e4 5e 10 	movl   $0xf0105ee4,0xc(%esp)
 f0102737:	f0 
-f0102738:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102738:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f010273f:	f0 
 f0102740:	c7 44 24 04 0e 04 00 	movl   $0x40e,0x4(%esp)
 f0102747:	00 
-f0102748:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102748:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010274f:	e8 5d d9 ff ff       	call   f01000b1 <_panic>
 	assert(pp2->pp_ref == 0);
 f0102754:	66 83 7e 04 00       	cmpw   $0x0,0x4(%esi)
 f0102759:	74 24                	je     f010277f <mem_init+0x1012>
-f010275b:	c7 44 24 0c b5 5c 10 	movl   $0xf0105cb5,0xc(%esp)
+f010275b:	c7 44 24 0c f5 5e 10 	movl   $0xf0105ef5,0xc(%esp)
 f0102762:	f0 
-f0102763:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102763:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f010276a:	f0 
 f010276b:	c7 44 24 04 0f 04 00 	movl   $0x40f,0x4(%esp)
 f0102772:	00 
-f0102773:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102773:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010277a:	e8 32 d9 ff ff       	call   f01000b1 <_panic>
 
 	// pp2 should be returned by page_alloc
@@ -4826,13 +4826,13 @@ f010278b:	85 c0                	test   %eax,%eax
 f010278d:	74 04                	je     f0102793 <mem_init+0x1026>
 f010278f:	39 c6                	cmp    %eax,%esi
 f0102791:	74 24                	je     f01027b7 <mem_init+0x104a>
-f0102793:	c7 44 24 0c 40 63 10 	movl   $0xf0106340,0xc(%esp)
+f0102793:	c7 44 24 0c 80 65 10 	movl   $0xf0106580,0xc(%esp)
 f010279a:	f0 
-f010279b:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010279b:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01027a2:	f0 
 f01027a3:	c7 44 24 04 12 04 00 	movl   $0x412,0x4(%esp)
 f01027aa:	00 
-f01027ab:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01027ab:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01027b2:	e8 fa d8 ff ff       	call   f01000b1 <_panic>
 
 	// unmapping pp1 at 0 should keep pp1 at PGSIZE
@@ -4849,13 +4849,13 @@ f01027d4:	ba 00 00 00 00       	mov    $0x0,%edx
 f01027d9:	e8 2c e7 ff ff       	call   f0100f0a <check_va2pa>
 f01027de:	83 f8 ff             	cmp    $0xffffffff,%eax
 f01027e1:	74 24                	je     f0102807 <mem_init+0x109a>
-f01027e3:	c7 44 24 0c 64 63 10 	movl   $0xf0106364,0xc(%esp)
+f01027e3:	c7 44 24 0c a4 65 10 	movl   $0xf01065a4,0xc(%esp)
 f01027ea:	f0 
-f01027eb:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01027eb:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01027f2:	f0 
 f01027f3:	c7 44 24 04 16 04 00 	movl   $0x416,0x4(%esp)
 f01027fa:	00 
-f01027fb:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01027fb:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102802:	e8 aa d8 ff ff       	call   f01000b1 <_panic>
 	assert(check_va2pa(kern_pgdir, PGSIZE) == page2pa(pp1));
 f0102807:	ba 00 10 00 00       	mov    $0x1000,%edx
@@ -4867,35 +4867,35 @@ f010281c:	c1 fa 03             	sar    $0x3,%edx
 f010281f:	c1 e2 0c             	shl    $0xc,%edx
 f0102822:	39 d0                	cmp    %edx,%eax
 f0102824:	74 24                	je     f010284a <mem_init+0x10dd>
-f0102826:	c7 44 24 0c 10 63 10 	movl   $0xf0106310,0xc(%esp)
+f0102826:	c7 44 24 0c 50 65 10 	movl   $0xf0106550,0xc(%esp)
 f010282d:	f0 
-f010282e:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010282e:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102835:	f0 
 f0102836:	c7 44 24 04 17 04 00 	movl   $0x417,0x4(%esp)
 f010283d:	00 
-f010283e:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010283e:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102845:	e8 67 d8 ff ff       	call   f01000b1 <_panic>
 	assert(pp1->pp_ref == 1);
 f010284a:	66 83 7b 04 01       	cmpw   $0x1,0x4(%ebx)
 f010284f:	74 24                	je     f0102875 <mem_init+0x1108>
-f0102851:	c7 44 24 0c 3b 5c 10 	movl   $0xf0105c3b,0xc(%esp)
+f0102851:	c7 44 24 0c 7b 5e 10 	movl   $0xf0105e7b,0xc(%esp)
 f0102858:	f0 
-f0102859:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102859:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102860:	f0 
 f0102861:	c7 44 24 04 18 04 00 	movl   $0x418,0x4(%esp)
 f0102868:	00 
-f0102869:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102869:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102870:	e8 3c d8 ff ff       	call   f01000b1 <_panic>
 	assert(pp2->pp_ref == 0);
 f0102875:	66 83 7e 04 00       	cmpw   $0x0,0x4(%esi)
 f010287a:	74 24                	je     f01028a0 <mem_init+0x1133>
-f010287c:	c7 44 24 0c b5 5c 10 	movl   $0xf0105cb5,0xc(%esp)
+f010287c:	c7 44 24 0c f5 5e 10 	movl   $0xf0105ef5,0xc(%esp)
 f0102883:	f0 
-f0102884:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102884:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f010288b:	f0 
 f010288c:	c7 44 24 04 19 04 00 	movl   $0x419,0x4(%esp)
 f0102893:	00 
-f0102894:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102894:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010289b:	e8 11 d8 ff ff       	call   f01000b1 <_panic>
 
 	// test re-inserting pp1 at PGSIZE
@@ -4910,35 +4910,35 @@ f01028b7:	89 04 24             	mov    %eax,(%esp)
 f01028ba:	e8 21 ee ff ff       	call   f01016e0 <page_insert>
 f01028bf:	85 c0                	test   %eax,%eax
 f01028c1:	74 24                	je     f01028e7 <mem_init+0x117a>
-f01028c3:	c7 44 24 0c 88 63 10 	movl   $0xf0106388,0xc(%esp)
+f01028c3:	c7 44 24 0c c8 65 10 	movl   $0xf01065c8,0xc(%esp)
 f01028ca:	f0 
-f01028cb:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01028cb:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01028d2:	f0 
 f01028d3:	c7 44 24 04 1c 04 00 	movl   $0x41c,0x4(%esp)
 f01028da:	00 
-f01028db:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01028db:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01028e2:	e8 ca d7 ff ff       	call   f01000b1 <_panic>
 	assert(pp1->pp_ref);
 f01028e7:	66 83 7b 04 00       	cmpw   $0x0,0x4(%ebx)
 f01028ec:	75 24                	jne    f0102912 <mem_init+0x11a5>
-f01028ee:	c7 44 24 0c c6 5c 10 	movl   $0xf0105cc6,0xc(%esp)
+f01028ee:	c7 44 24 0c 06 5f 10 	movl   $0xf0105f06,0xc(%esp)
 f01028f5:	f0 
-f01028f6:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01028f6:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01028fd:	f0 
 f01028fe:	c7 44 24 04 1d 04 00 	movl   $0x41d,0x4(%esp)
 f0102905:	00 
-f0102906:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102906:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010290d:	e8 9f d7 ff ff       	call   f01000b1 <_panic>
 	assert(pp1->pp_link == NULL);
 f0102912:	83 3b 00             	cmpl   $0x0,(%ebx)
 f0102915:	74 24                	je     f010293b <mem_init+0x11ce>
-f0102917:	c7 44 24 0c d2 5c 10 	movl   $0xf0105cd2,0xc(%esp)
+f0102917:	c7 44 24 0c 12 5f 10 	movl   $0xf0105f12,0xc(%esp)
 f010291e:	f0 
-f010291f:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010291f:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102926:	f0 
 f0102927:	c7 44 24 04 1e 04 00 	movl   $0x41e,0x4(%esp)
 f010292e:	00 
-f010292f:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010292f:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102936:	e8 76 d7 ff ff       	call   f01000b1 <_panic>
 
 	// unmapping pp1 at PGSIZE should free it
@@ -4955,13 +4955,13 @@ f0102958:	ba 00 00 00 00       	mov    $0x0,%edx
 f010295d:	e8 a8 e5 ff ff       	call   f0100f0a <check_va2pa>
 f0102962:	83 f8 ff             	cmp    $0xffffffff,%eax
 f0102965:	74 24                	je     f010298b <mem_init+0x121e>
-f0102967:	c7 44 24 0c 64 63 10 	movl   $0xf0106364,0xc(%esp)
+f0102967:	c7 44 24 0c a4 65 10 	movl   $0xf01065a4,0xc(%esp)
 f010296e:	f0 
-f010296f:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010296f:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102976:	f0 
 f0102977:	c7 44 24 04 22 04 00 	movl   $0x422,0x4(%esp)
 f010297e:	00 
-f010297f:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f010297f:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102986:	e8 26 d7 ff ff       	call   f01000b1 <_panic>
 	assert(check_va2pa(kern_pgdir, PGSIZE) == ~0);
 f010298b:	ba 00 10 00 00       	mov    $0x1000,%edx
@@ -4969,35 +4969,35 @@ f0102990:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 f0102993:	e8 72 e5 ff ff       	call   f0100f0a <check_va2pa>
 f0102998:	83 f8 ff             	cmp    $0xffffffff,%eax
 f010299b:	74 24                	je     f01029c1 <mem_init+0x1254>
-f010299d:	c7 44 24 0c c0 63 10 	movl   $0xf01063c0,0xc(%esp)
+f010299d:	c7 44 24 0c 00 66 10 	movl   $0xf0106600,0xc(%esp)
 f01029a4:	f0 
-f01029a5:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01029a5:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01029ac:	f0 
 f01029ad:	c7 44 24 04 23 04 00 	movl   $0x423,0x4(%esp)
 f01029b4:	00 
-f01029b5:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01029b5:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01029bc:	e8 f0 d6 ff ff       	call   f01000b1 <_panic>
 	assert(pp1->pp_ref == 0);
 f01029c1:	66 83 7b 04 00       	cmpw   $0x0,0x4(%ebx)
 f01029c6:	74 24                	je     f01029ec <mem_init+0x127f>
-f01029c8:	c7 44 24 0c e7 5c 10 	movl   $0xf0105ce7,0xc(%esp)
+f01029c8:	c7 44 24 0c 27 5f 10 	movl   $0xf0105f27,0xc(%esp)
 f01029cf:	f0 
-f01029d0:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01029d0:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01029d7:	f0 
 f01029d8:	c7 44 24 04 24 04 00 	movl   $0x424,0x4(%esp)
 f01029df:	00 
-f01029e0:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01029e0:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01029e7:	e8 c5 d6 ff ff       	call   f01000b1 <_panic>
 	assert(pp2->pp_ref == 0);
 f01029ec:	66 83 7e 04 00       	cmpw   $0x0,0x4(%esi)
 f01029f1:	74 24                	je     f0102a17 <mem_init+0x12aa>
-f01029f3:	c7 44 24 0c b5 5c 10 	movl   $0xf0105cb5,0xc(%esp)
+f01029f3:	c7 44 24 0c f5 5e 10 	movl   $0xf0105ef5,0xc(%esp)
 f01029fa:	f0 
-f01029fb:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f01029fb:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102a02:	f0 
 f0102a03:	c7 44 24 04 25 04 00 	movl   $0x425,0x4(%esp)
 f0102a0a:	00 
-f0102a0b:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102a0b:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102a12:	e8 9a d6 ff ff       	call   f01000b1 <_panic>
 
 	// so it should be returned by page_alloc
@@ -5008,13 +5008,13 @@ f0102a23:	85 c0                	test   %eax,%eax
 f0102a25:	74 04                	je     f0102a2b <mem_init+0x12be>
 f0102a27:	39 c3                	cmp    %eax,%ebx
 f0102a29:	74 24                	je     f0102a4f <mem_init+0x12e2>
-f0102a2b:	c7 44 24 0c e8 63 10 	movl   $0xf01063e8,0xc(%esp)
+f0102a2b:	c7 44 24 0c 28 66 10 	movl   $0xf0106628,0xc(%esp)
 f0102a32:	f0 
-f0102a33:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102a33:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102a3a:	f0 
 f0102a3b:	c7 44 24 04 28 04 00 	movl   $0x428,0x4(%esp)
 f0102a42:	00 
-f0102a43:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102a43:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102a4a:	e8 62 d6 ff ff       	call   f01000b1 <_panic>
 
 	// should be no free memory
@@ -5023,13 +5023,13 @@ f0102a4f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 f0102a56:	e8 58 e9 ff ff       	call   f01013b3 <page_alloc>
 f0102a5b:	85 c0                	test   %eax,%eax
 f0102a5d:	74 24                	je     f0102a83 <mem_init+0x1316>
-f0102a5f:	c7 44 24 0c d1 5b 10 	movl   $0xf0105bd1,0xc(%esp)
+f0102a5f:	c7 44 24 0c 11 5e 10 	movl   $0xf0105e11,0xc(%esp)
 f0102a66:	f0 
-f0102a67:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102a67:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102a6e:	f0 
 f0102a6f:	c7 44 24 04 2b 04 00 	movl   $0x42b,0x4(%esp)
 f0102a76:	00 
-f0102a77:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102a77:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102a7e:	e8 2e d6 ff ff       	call   f01000b1 <_panic>
 
 	// forcibly take pp0 back
@@ -5043,26 +5043,26 @@ f0102a98:	c1 fa 03             	sar    $0x3,%edx
 f0102a9b:	c1 e2 0c             	shl    $0xc,%edx
 f0102a9e:	39 d1                	cmp    %edx,%ecx
 f0102aa0:	74 24                	je     f0102ac6 <mem_init+0x1359>
-f0102aa2:	c7 44 24 0c 8c 60 10 	movl   $0xf010608c,0xc(%esp)
+f0102aa2:	c7 44 24 0c cc 62 10 	movl   $0xf01062cc,0xc(%esp)
 f0102aa9:	f0 
-f0102aaa:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102aaa:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102ab1:	f0 
 f0102ab2:	c7 44 24 04 2e 04 00 	movl   $0x42e,0x4(%esp)
 f0102ab9:	00 
-f0102aba:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102aba:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102ac1:	e8 eb d5 ff ff       	call   f01000b1 <_panic>
 	kern_pgdir[0] = 0;
 f0102ac6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 	assert(pp0->pp_ref == 1);
 f0102acc:	66 83 7f 04 01       	cmpw   $0x1,0x4(%edi)
 f0102ad1:	74 24                	je     f0102af7 <mem_init+0x138a>
-f0102ad3:	c7 44 24 0c 4c 5c 10 	movl   $0xf0105c4c,0xc(%esp)
+f0102ad3:	c7 44 24 0c 8c 5e 10 	movl   $0xf0105e8c,0xc(%esp)
 f0102ada:	f0 
-f0102adb:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102adb:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102ae2:	f0 
 f0102ae3:	c7 44 24 04 30 04 00 	movl   $0x430,0x4(%esp)
 f0102aea:	00 
-f0102aeb:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102aeb:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102af2:	e8 ba d5 ff ff       	call   f01000b1 <_panic>
 	pp0->pp_ref = 0;
 f0102af7:	66 c7 47 04 00 00    	movw   $0x0,0x4(%edi)
@@ -5101,23 +5101,23 @@ f0102b46:	39 c2                	cmp    %eax,%edx
 f0102b48:	72 20                	jb     f0102b6a <mem_init+0x13fd>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f0102b4a:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
-f0102b4e:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f0102b4e:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f0102b55:	f0 
 f0102b56:	c7 44 24 04 37 04 00 	movl   $0x437,0x4(%esp)
 f0102b5d:	00 
-f0102b5e:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102b5e:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102b65:	e8 47 d5 ff ff       	call   f01000b1 <_panic>
 	assert(ptep == ptep1 + PTX(va));
 f0102b6a:	81 e9 fc ff ff 0f    	sub    $0xffffffc,%ecx
 f0102b70:	39 4d d4             	cmp    %ecx,-0x2c(%ebp)
 f0102b73:	74 24                	je     f0102b99 <mem_init+0x142c>
-f0102b75:	c7 44 24 0c f8 5c 10 	movl   $0xf0105cf8,0xc(%esp)
+f0102b75:	c7 44 24 0c 38 5f 10 	movl   $0xf0105f38,0xc(%esp)
 f0102b7c:	f0 
-f0102b7d:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102b7d:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102b84:	f0 
 f0102b85:	c7 44 24 04 38 04 00 	movl   $0x438,0x4(%esp)
 f0102b8c:	00 
-f0102b8d:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102b8d:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102b94:	e8 18 d5 ff ff       	call   f01000b1 <_panic>
 	kern_pgdir[PDX(va)] = 0;
 f0102b99:	8b 45 d0             	mov    -0x30(%ebp),%eax
@@ -5146,11 +5146,11 @@ f0102bbc:	39 55 c8             	cmp    %edx,-0x38(%ebp)
 f0102bbf:	77 20                	ja     f0102be1 <mem_init+0x1474>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f0102bc1:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0102bc5:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f0102bc5:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f0102bcc:	f0 
 f0102bcd:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
 f0102bd4:	00 
-f0102bd5:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f0102bd5:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f0102bdc:	e8 d0 d4 ff ff       	call   f01000b1 <_panic>
 
 	// check that new page tables get cleared
@@ -5162,7 +5162,7 @@ f0102bf0:	00
 	return (void *)(pa + KERNBASE);
 f0102bf1:	2d 00 00 00 10       	sub    $0x10000000,%eax
 f0102bf6:	89 04 24             	mov    %eax,(%esp)
-f0102bf9:	e8 65 20 00 00       	call   f0104c63 <memset>
+f0102bf9:	e8 ad 22 00 00       	call   f0104eab <memset>
 	page_free(pp0);
 f0102bfe:	89 3c 24             	mov    %edi,(%esp)
 f0102c01:	e8 3e e8 ff ff       	call   f0101444 <page_free>
@@ -5196,11 +5196,11 @@ f0102c36:	3b 05 64 49 19 f0    	cmp    0xf0194964,%eax
 f0102c3c:	72 20                	jb     f0102c5e <mem_init+0x14f1>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
 f0102c3e:	89 54 24 0c          	mov    %edx,0xc(%esp)
-f0102c42:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
+f0102c42:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
 f0102c49:	f0 
 f0102c4a:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
 f0102c51:	00 
-f0102c52:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
+f0102c52:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
 f0102c59:	e8 53 d4 ff ff       	call   f01000b1 <_panic>
 	return (void *)(pa + KERNBASE);
 f0102c5e:	8d 82 00 00 00 f0    	lea    -0x10000000(%edx),%eax
@@ -5211,13 +5211,13 @@ f0102c67:	81 ea 00 f0 ff 0f    	sub    $0xffff000,%edx
 		assert((ptep[i] & PTE_P) == 0);
 f0102c6d:	f6 00 01             	testb  $0x1,(%eax)
 f0102c70:	74 24                	je     f0102c96 <mem_init+0x1529>
-f0102c72:	c7 44 24 0c 10 5d 10 	movl   $0xf0105d10,0xc(%esp)
+f0102c72:	c7 44 24 0c 50 5f 10 	movl   $0xf0105f50,0xc(%esp)
 f0102c79:	f0 
-f0102c7a:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102c7a:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102c81:	f0 
 f0102c82:	c7 44 24 04 42 04 00 	movl   $0x442,0x4(%esp)
 f0102c89:	00 
-f0102c8a:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102c8a:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102c91:	e8 1b d4 ff ff       	call   f01000b1 <_panic>
 f0102c96:	83 c0 04             	add    $0x4,%eax
 	// check that new page tables get cleared
@@ -5252,8 +5252,8 @@ f0102cc6:	89 34 24             	mov    %esi,(%esp)
 f0102cc9:	e8 76 e7 ff ff       	call   f0101444 <page_free>
 
 	cprintf("check_page() succeeded!\n");
-f0102cce:	c7 04 24 27 5d 10 f0 	movl   $0xf0105d27,(%esp)
-f0102cd5:	e8 b0 0c 00 00       	call   f010398a <cprintf>
+f0102cce:	c7 04 24 67 5f 10 f0 	movl   $0xf0105f67,(%esp)
+f0102cd5:	e8 7c 0c 00 00       	call   f0103956 <cprintf>
 	// Permissions:
 	//    - the new image at UPAGES -- kernel R, user R
 	//      (ie. perm = PTE_U | PTE_P)
@@ -5271,11 +5271,11 @@ f0102cdf:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
 f0102ce4:	77 20                	ja     f0102d06 <mem_init+0x1599>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
 f0102ce6:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0102cea:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
+f0102cea:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
 f0102cf1:	f0 
 f0102cf2:	c7 44 24 04 c5 00 00 	movl   $0xc5,0x4(%esp)
 f0102cf9:	00 
-f0102cfa:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102cfa:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102d01:	e8 ab d3 ff ff       	call   f01000b1 <_panic>
 f0102d06:	8b 3d 64 49 19 f0    	mov    0xf0194964,%edi
 f0102d0c:	8d 0c fd 00 00 00 00 	lea    0x0(,%edi,8),%ecx
@@ -5304,11 +5304,11 @@ f0102d37:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
 f0102d3c:	77 20                	ja     f0102d5e <mem_init+0x15f1>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
 f0102d3e:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0102d42:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
+f0102d42:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
 f0102d49:	f0 
 f0102d4a:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
 f0102d51:	00 
-f0102d52:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102d52:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102d59:	e8 53 d3 ff ff       	call   f01000b1 <_panic>
 f0102d5e:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
 f0102d65:	00 
@@ -5330,11 +5330,11 @@ f0102d87:	81 fb ff ff ff ef    	cmp    $0xefffffff,%ebx
 f0102d8d:	77 20                	ja     f0102daf <mem_init+0x1642>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
 f0102d8f:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
-f0102d93:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
+f0102d93:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
 f0102d9a:	f0 
 f0102d9b:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
 f0102da2:	00 
-f0102da3:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102da3:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102daa:	e8 02 d3 ff ff       	call   f01000b1 <_panic>
 	//     * [KSTACKTOP-PTSIZE, KSTACKTOP-KSTKSIZE) -- not backed; so if
 	//       the kernel overflows its stack, it will fault rather than
@@ -5355,8 +5355,8 @@ static void
 check_kern_pgdir(void)
 {
 	cprintf("start checking kern pgdir...\n");
-f0102dd2:	c7 04 24 40 5d 10 f0 	movl   $0xf0105d40,(%esp)
-f0102dd9:	e8 ac 0b 00 00       	call   f010398a <cprintf>
+f0102dd2:	c7 04 24 80 5f 10 f0 	movl   $0xf0105f80,(%esp)
+f0102dd9:	e8 78 0b 00 00       	call   f0103956 <cprintf>
 	uint32_t i, n;
 	pde_t *pgdir;
 
@@ -5407,23 +5407,23 @@ f0102e21:	81 7d cc ff ff ff ef 	cmpl   $0xefffffff,-0x34(%ebp)
 f0102e28:	77 20                	ja     f0102e4a <mem_init+0x16dd>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
 f0102e2a:	89 7c 24 0c          	mov    %edi,0xc(%esp)
-f0102e2e:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
+f0102e2e:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
 f0102e35:	f0 
 f0102e36:	c7 44 24 04 4a 03 00 	movl   $0x34a,0x4(%esp)
 f0102e3d:	00 
-f0102e3e:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102e3e:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102e45:	e8 67 d2 ff ff       	call   f01000b1 <_panic>
 f0102e4a:	8b 4d c8             	mov    -0x38(%ebp),%ecx
 f0102e4d:	8d 14 0e             	lea    (%esi,%ecx,1),%edx
 f0102e50:	39 d0                	cmp    %edx,%eax
 f0102e52:	74 24                	je     f0102e78 <mem_init+0x170b>
-f0102e54:	c7 44 24 0c 0c 64 10 	movl   $0xf010640c,0xc(%esp)
+f0102e54:	c7 44 24 0c 4c 66 10 	movl   $0xf010664c,0xc(%esp)
 f0102e5b:	f0 
-f0102e5c:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102e5c:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102e63:	f0 
 f0102e64:	c7 44 24 04 4a 03 00 	movl   $0x34a,0x4(%esp)
 f0102e6b:	00 
-f0102e6c:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102e6c:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102e73:	e8 39 d2 ff ff       	call   f01000b1 <_panic>
 	pde_t *pgdir;
 
@@ -5455,11 +5455,11 @@ f0102e98:	81 fe ff ff ff ef    	cmp    $0xefffffff,%esi
 f0102e9e:	77 20                	ja     f0102ec0 <mem_init+0x1753>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
 f0102ea0:	89 74 24 0c          	mov    %esi,0xc(%esp)
-f0102ea4:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
+f0102ea4:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
 f0102eab:	f0 
 f0102eac:	c7 44 24 04 50 03 00 	movl   $0x350,0x4(%esp)
 f0102eb3:	00 
-f0102eb4:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102eb4:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102ebb:	e8 f1 d1 ff ff       	call   f01000b1 <_panic>
 #define PADDR(kva) _paddr(__FILE__, __LINE__, kva)
 
@@ -5472,13 +5472,13 @@ f0102ec5:	81 c7 00 00 40 21    	add    $0x21400000,%edi
 f0102ecb:	8d 14 37             	lea    (%edi,%esi,1),%edx
 f0102ece:	39 d0                	cmp    %edx,%eax
 f0102ed0:	74 24                	je     f0102ef6 <mem_init+0x1789>
-f0102ed2:	c7 44 24 0c 40 64 10 	movl   $0xf0106440,0xc(%esp)
+f0102ed2:	c7 44 24 0c 80 66 10 	movl   $0xf0106680,0xc(%esp)
 f0102ed9:	f0 
-f0102eda:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102eda:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102ee1:	f0 
 f0102ee2:	c7 44 24 04 50 03 00 	movl   $0x350,0x4(%esp)
 f0102ee9:	00 
-f0102eea:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102eea:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102ef1:	e8 bb d1 ff ff       	call   f01000b1 <_panic>
 f0102ef6:	81 c6 00 10 00 00    	add    $0x1000,%esi
 		assert(check_va2pa(pgdir, UPAGES + i) == PADDR(pages) + i);
@@ -5503,13 +5503,13 @@ f0102f18:	e8 ed df ff ff       	call   f0100f0a <check_va2pa>
 f0102f1d:	8d 14 33             	lea    (%ebx,%esi,1),%edx
 f0102f20:	39 d0                	cmp    %edx,%eax
 f0102f22:	74 24                	je     f0102f48 <mem_init+0x17db>
-f0102f24:	c7 44 24 0c 74 64 10 	movl   $0xf0106474,0xc(%esp)
+f0102f24:	c7 44 24 0c b4 66 10 	movl   $0xf01066b4,0xc(%esp)
 f0102f2b:	f0 
-f0102f2c:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102f2c:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102f33:	f0 
 f0102f34:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
 f0102f3b:	00 
-f0102f3c:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102f3c:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102f43:	e8 69 d1 ff ff       	call   f01000b1 <_panic>
 f0102f48:	81 c6 00 10 00 00    	add    $0x1000,%esi
 	// check phys mem
@@ -5529,13 +5529,13 @@ f0102f63:	83 f8 ff             	cmp    $0xffffffff,%eax
 f0102f66:	75 07                	jne    f0102f6f <mem_init+0x1802>
 f0102f68:	b8 00 00 00 00       	mov    $0x0,%eax
 f0102f6d:	eb 67                	jmp    f0102fd6 <mem_init+0x1869>
-f0102f6f:	c7 44 24 0c bc 64 10 	movl   $0xf01064bc,0xc(%esp)
+f0102f6f:	c7 44 24 0c fc 66 10 	movl   $0xf01066fc,0xc(%esp)
 f0102f76:	f0 
-f0102f77:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102f77:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102f7e:	f0 
 f0102f7f:	c7 44 24 04 5a 03 00 	movl   $0x35a,0x4(%esp)
 f0102f86:	00 
-f0102f87:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102f87:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102f8e:	e8 1e d1 ff ff       	call   f01000b1 <_panic>
 
 	// check PDE permissions
@@ -5555,13 +5555,13 @@ f0102fa6:	75 2d                	jne    f0102fd5 <mem_init+0x1868>
 f0102fa8:	8b 7d d4             	mov    -0x2c(%ebp),%edi
 f0102fab:	f6 04 87 01          	testb  $0x1,(%edi,%eax,4)
 f0102faf:	75 24                	jne    f0102fd5 <mem_init+0x1868>
-f0102fb1:	c7 44 24 0c 5e 5d 10 	movl   $0xf0105d5e,0xc(%esp)
+f0102fb1:	c7 44 24 0c 9e 5f 10 	movl   $0xf0105f9e,0xc(%esp)
 f0102fb8:	f0 
-f0102fb9:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0102fb9:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0102fc0:	f0 
 f0102fc1:	c7 44 24 04 63 03 00 	movl   $0x363,0x4(%esp)
 f0102fc8:	00 
-f0102fc9:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0102fc9:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0102fd0:	e8 dc d0 ff ff       	call   f01000b1 <_panic>
 	for (i = 0; i < KSTKSIZE; i += PGSIZE)
 		assert(check_va2pa(pgdir, KSTACKTOP - KSTKSIZE + i) == PADDR(bootstack) + i);
@@ -5578,8 +5578,8 @@ f0102fdb:	75 b6                	jne    f0102f93 <mem_init+0x1826>
 		}
 	}
 	cprintf("check_kern_pgdir() succeeded!\n");
-f0102fdd:	c7 04 24 ec 64 10 f0 	movl   $0xf01064ec,(%esp)
-f0102fe4:	e8 a1 09 00 00       	call   f010398a <cprintf>
+f0102fdd:	c7 04 24 2c 67 10 f0 	movl   $0xf010672c,(%esp)
+f0102fe4:	e8 6d 09 00 00       	call   f0103956 <cprintf>
 	// Your code goes here:
 	//boot_map_region_4m(kern_pgdir, KERNBASE, 0xffffffff - KERNBASE, 0, PTE_P | PTE_W);
 	//boot_map_region(kern_pgdir, KERNBASE, 0xffffffff - KERNBASE, 0, PTE_P | PTE_W);
@@ -5595,13 +5595,13 @@ boot_map_region_4m(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int p
 	cprintf("size is %x\n", size);
 f0102fef:	c7 44 24 04 ff ff ff 	movl   $0xfffffff,0x4(%esp)
 f0102ff6:	0f 
-f0102ff7:	c7 04 24 6f 5d 10 f0 	movl   $0xf0105d6f,(%esp)
-f0102ffe:	e8 87 09 00 00       	call   f010398a <cprintf>
+f0102ff7:	c7 04 24 af 5f 10 f0 	movl   $0xf0105faf,(%esp)
+f0102ffe:	e8 53 09 00 00       	call   f0103956 <cprintf>
 	cprintf("pgnum is %d\n", pgnum);
 f0103003:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
 f010300a:	00 
-f010300b:	c7 04 24 7b 5d 10 f0 	movl   $0xf0105d7b,(%esp)
-f0103012:	e8 73 09 00 00       	call   f010398a <cprintf>
+f010300b:	c7 04 24 bb 5f 10 f0 	movl   $0xf0105fbb,(%esp)
+f0103012:	e8 3f 09 00 00       	call   f0103956 <cprintf>
 f0103017:	b8 00 00 00 f0       	mov    $0xf0000000,%eax
 	for(i = 0; i < pgnum; i++) {
 		pgdir[PDX(va)] = PTE4M(pa) | perm | PTE_P | PTE_PS;
@@ -5625,8 +5625,8 @@ f0103038:	75 e2                	jne    f010301c <mem_init+0x18af>
 static void
 check_kern_pgdir_4m(void){
 	cprintf("start checking kern pgdir 4m...\n");
-f010303a:	c7 04 24 0c 65 10 f0 	movl   $0xf010650c,(%esp)
-f0103041:	e8 44 09 00 00       	call   f010398a <cprintf>
+f010303a:	c7 04 24 4c 67 10 f0 	movl   $0xf010674c,(%esp)
+f0103041:	e8 10 09 00 00       	call   f0103956 <cprintf>
 	uint32_t i, npg;
 	
 	npg = (0xffffffff - KERNBASE) / PGSIZE4M;
@@ -5641,24 +5641,24 @@ f010305d:	89 d3                	mov    %edx,%ebx
 f010305f:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
 f0103065:	39 d8                	cmp    %ebx,%eax
 f0103067:	74 24                	je     f010308d <mem_init+0x1920>
-f0103069:	c7 44 24 0c 30 65 10 	movl   $0xf0106530,0xc(%esp)
+f0103069:	c7 44 24 0c 70 67 10 	movl   $0xf0106770,0xc(%esp)
 f0103070:	f0 
-f0103071:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f0103071:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f0103078:	f0 
 f0103079:	c7 44 24 04 78 03 00 	movl   $0x378,0x4(%esp)
 f0103080:	00 
-f0103081:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0103081:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f0103088:	e8 24 d0 ff ff       	call   f01000b1 <_panic>
 		assert(kern_pgdir[PDX(KERNBASE + i * PGSIZE4M)] & PTE_PS);
 f010308d:	f6 c2 80             	test   $0x80,%dl
 f0103090:	75 24                	jne    f01030b6 <mem_init+0x1949>
-f0103092:	c7 44 24 0c 70 65 10 	movl   $0xf0106570,0xc(%esp)
+f0103092:	c7 44 24 0c b0 67 10 	movl   $0xf01067b0,0xc(%esp)
 f0103099:	f0 
-f010309a:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
+f010309a:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
 f01030a1:	f0 
 f01030a2:	c7 44 24 04 79 03 00 	movl   $0x379,0x4(%esp)
 f01030a9:	00 
-f01030aa:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01030aa:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01030b1:	e8 fb cf ff ff       	call   f01000b1 <_panic>
 f01030b6:	05 00 00 40 00       	add    $0x400000,%eax
 check_kern_pgdir_4m(void){
@@ -5674,8 +5674,8 @@ f01030c0:	75 8f                	jne    f0103051 <mem_init+0x18e4>
 	}
 
 	cprintf("check_kern_pgdir_4m() succeeded!\n");
-f01030c2:	c7 04 24 a4 65 10 f0 	movl   $0xf01065a4,(%esp)
-f01030c9:	e8 bc 08 00 00       	call   f010398a <cprintf>
+f01030c2:	c7 04 24 e4 67 10 f0 	movl   $0xf01067e4,(%esp)
+f01030c9:	e8 88 08 00 00       	call   f0103956 <cprintf>
 	// somewhere between KERNBASE and KERNBASE+4MB right now, which is
 	// mapped the same way by both page tables.
 	//
@@ -5687,17 +5687,17 @@ f01030d3:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
 f01030d8:	77 20                	ja     f01030fa <mem_init+0x198d>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
 f01030da:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f01030de:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
+f01030de:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
 f01030e5:	f0 
 f01030e6:	c7 44 24 04 f4 00 00 	movl   $0xf4,0x4(%esp)
 f01030ed:	00 
-f01030ee:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f01030ee:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f01030f5:	e8 b7 cf ff ff       	call   f01000b1 <_panic>
 	return (physaddr_t)kva - KERNBASE;
 f01030fa:	05 00 00 00 10       	add    $0x10000000,%eax
 f01030ff:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103103:	c7 04 24 88 5d 10 f0 	movl   $0xf0105d88,(%esp)
-f010310a:	e8 7b 08 00 00       	call   f010398a <cprintf>
+f0103103:	c7 04 24 c8 5f 10 f0 	movl   $0xf0105fc8,(%esp)
+f010310a:	e8 47 08 00 00       	call   f0103956 <cprintf>
 
 static __inline uint32_t
 rcr4(void)
@@ -5731,11 +5731,11 @@ f010311d:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
 f0103122:	77 20                	ja     f0103144 <mem_init+0x19d7>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
 f0103124:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0103128:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
+f0103128:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
 f010312f:	f0 
 f0103130:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
 f0103137:	00 
-f0103138:	c7 04 24 0a 5a 10 f0 	movl   $0xf0105a0a,(%esp)
+f0103138:	c7 04 24 4a 5c 10 f0 	movl   $0xf0105c4a,(%esp)
 f010313f:	e8 6d cf ff ff       	call   f01000b1 <_panic>
 	return (physaddr_t)kva - KERNBASE;
 f0103144:	05 00 00 00 10       	add    $0x10000000,%eax
@@ -5747,8 +5747,8 @@ lcr3(uint32_t val)
 	__asm __volatile("movl %0,%%cr3" : : "r" (val));
 f0103149:	0f 22 d8             	mov    %eax,%cr3
 	cprintf("bug1\n");
-f010314c:	c7 04 24 a3 5d 10 f0 	movl   $0xf0105da3,(%esp)
-f0103153:	e8 32 08 00 00       	call   f010398a <cprintf>
+f010314c:	c7 04 24 e3 5f 10 f0 	movl   $0xf0105fe3,(%esp)
+f0103153:	e8 fe 07 00 00       	call   f0103956 <cprintf>
 
 	check_page_free_list(0);
 f0103158:	b8 00 00 00 00       	mov    $0x0,%eax
@@ -5871,4641 +5871,4961 @@ f01031a5:	89 e5                	mov    %esp,%ebp
 f01031a7:	57                   	push   %edi
 f01031a8:	56                   	push   %esi
 f01031a9:	53                   	push   %ebx
-f01031aa:	83 ec 2c             	sub    $0x2c,%esp
+f01031aa:	83 ec 1c             	sub    $0x1c,%esp
 f01031ad:	89 c7                	mov    %eax,%edi
-f01031af:	89 d6                	mov    %edx,%esi
-	cprintf("regin_alloc! va is 0x%08x, len is %d\n", va, len);
-f01031b1:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-f01031b4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-f01031b8:	89 54 24 04          	mov    %edx,0x4(%esp)
-f01031bc:	c7 04 24 c8 65 10 f0 	movl   $0xf01065c8,(%esp)
-f01031c3:	e8 c2 07 00 00       	call   f010398a <cprintf>
 	// Hint: It is easier to use region_alloc if the caller can pass
 	//   'va' and 'len' values that are not page-aligned.
 	//   You should round va down, and round (va + len) up.
 	//   (Watch out for corner-cases!)
 	void *i;
 	for (i = ROUNDDOWN(va, PGSIZE);i < ROUNDUP(len + va, PGSIZE); i += PGSIZE) {
-f01031c8:	89 f3                	mov    %esi,%ebx
-f01031ca:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-f01031d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-f01031d3:	8d b4 06 ff 0f 00 00 	lea    0xfff(%esi,%eax,1),%esi
-f01031da:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
-f01031e0:	eb 4d                	jmp    f010322f <region_alloc+0x8b>
+f01031af:	89 d3                	mov    %edx,%ebx
+f01031b1:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+f01031b7:	8d b4 0a ff 0f 00 00 	lea    0xfff(%edx,%ecx,1),%esi
+f01031be:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+f01031c4:	eb 4d                	jmp    f0103213 <region_alloc+0x6f>
 		struct PageInfo *pp = page_alloc(ALLOC_ZERO);
-f01031e2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-f01031e9:	e8 c5 e1 ff ff       	call   f01013b3 <page_alloc>
+f01031c6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+f01031cd:	e8 e1 e1 ff ff       	call   f01013b3 <page_alloc>
 
 		if (!pp)
-f01031ee:	85 c0                	test   %eax,%eax
-f01031f0:	75 1c                	jne    f010320e <region_alloc+0x6a>
+f01031d2:	85 c0                	test   %eax,%eax
+f01031d4:	75 1c                	jne    f01031f2 <region_alloc+0x4e>
 			panic("No free pages for envs!");
-f01031f2:	c7 44 24 08 26 66 10 	movl   $0xf0106626,0x8(%esp)
-f01031f9:	f0 
-f01031fa:	c7 44 24 04 23 01 00 	movl   $0x123,0x4(%esp)
-f0103201:	00 
-f0103202:	c7 04 24 3e 66 10 f0 	movl   $0xf010663e,(%esp)
-f0103209:	e8 a3 ce ff ff       	call   f01000b1 <_panic>
+f01031d6:	c7 44 24 08 06 68 10 	movl   $0xf0106806,0x8(%esp)
+f01031dd:	f0 
+f01031de:	c7 44 24 04 23 01 00 	movl   $0x123,0x4(%esp)
+f01031e5:	00 
+f01031e6:	c7 04 24 1e 68 10 f0 	movl   $0xf010681e,(%esp)
+f01031ed:	e8 bf ce ff ff       	call   f01000b1 <_panic>
 		page_insert(e->env_pgdir, pp, i, PTE_U | PTE_W);
-f010320e:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
-f0103215:	00 
-f0103216:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-f010321a:	89 44 24 04          	mov    %eax,0x4(%esp)
-f010321e:	8b 47 5c             	mov    0x5c(%edi),%eax
-f0103221:	89 04 24             	mov    %eax,(%esp)
-f0103224:	e8 b7 e4 ff ff       	call   f01016e0 <page_insert>
+f01031f2:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
+f01031f9:	00 
+f01031fa:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+f01031fe:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103202:	8b 47 5c             	mov    0x5c(%edi),%eax
+f0103205:	89 04 24             	mov    %eax,(%esp)
+f0103208:	e8 d3 e4 ff ff       	call   f01016e0 <page_insert>
 	// Hint: It is easier to use region_alloc if the caller can pass
 	//   'va' and 'len' values that are not page-aligned.
 	//   You should round va down, and round (va + len) up.
 	//   (Watch out for corner-cases!)
 	void *i;
 	for (i = ROUNDDOWN(va, PGSIZE);i < ROUNDUP(len + va, PGSIZE); i += PGSIZE) {
-f0103229:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-f010322f:	39 f3                	cmp    %esi,%ebx
-f0103231:	72 af                	jb     f01031e2 <region_alloc+0x3e>
-
+f010320d:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+f0103213:	39 f3                	cmp    %esi,%ebx
+f0103215:	72 af                	jb     f01031c6 <region_alloc+0x22>
 		if (!pp)
 			panic("No free pages for envs!");
 		page_insert(e->env_pgdir, pp, i, PTE_U | PTE_W);
 	}
-	cprintf("regin_alloc! end!\n");
-f0103233:	c7 04 24 49 66 10 f0 	movl   $0xf0106649,(%esp)
-f010323a:	e8 4b 07 00 00       	call   f010398a <cprintf>
-}
-f010323f:	83 c4 2c             	add    $0x2c,%esp
-f0103242:	5b                   	pop    %ebx
-f0103243:	5e                   	pop    %esi
-f0103244:	5f                   	pop    %edi
-f0103245:	5d                   	pop    %ebp
-f0103246:	c3                   	ret    
-
-f0103247 <envid2env>:
+	//cprintf("regin_alloc! end!\n");
+}
+f0103217:	83 c4 1c             	add    $0x1c,%esp
+f010321a:	5b                   	pop    %ebx
+f010321b:	5e                   	pop    %esi
+f010321c:	5f                   	pop    %edi
+f010321d:	5d                   	pop    %ebp
+f010321e:	c3                   	ret    
+
+f010321f <envid2env>:
 //   On success, sets *env_store to the environment.
 //   On error, sets *env_store to NULL.
 //
 int
 envid2env(envid_t envid, struct Env **env_store, bool checkperm)
 {
-f0103247:	55                   	push   %ebp
-f0103248:	89 e5                	mov    %esp,%ebp
-f010324a:	8b 45 08             	mov    0x8(%ebp),%eax
-f010324d:	8b 4d 10             	mov    0x10(%ebp),%ecx
+f010321f:	55                   	push   %ebp
+f0103220:	89 e5                	mov    %esp,%ebp
+f0103222:	8b 45 08             	mov    0x8(%ebp),%eax
+f0103225:	8b 4d 10             	mov    0x10(%ebp),%ecx
 	struct Env *e;
 
 	// If envid is zero, return the current environment.
 	if (envid == 0) {
-f0103250:	85 c0                	test   %eax,%eax
-f0103252:	75 11                	jne    f0103265 <envid2env+0x1e>
+f0103228:	85 c0                	test   %eax,%eax
+f010322a:	75 11                	jne    f010323d <envid2env+0x1e>
 		*env_store = curenv;
-f0103254:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
-f0103259:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-f010325c:	89 01                	mov    %eax,(%ecx)
+f010322c:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f0103231:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+f0103234:	89 01                	mov    %eax,(%ecx)
 		return 0;
-f010325e:	b8 00 00 00 00       	mov    $0x0,%eax
-f0103263:	eb 5e                	jmp    f01032c3 <envid2env+0x7c>
+f0103236:	b8 00 00 00 00       	mov    $0x0,%eax
+f010323b:	eb 5e                	jmp    f010329b <envid2env+0x7c>
 	// Look up the Env structure via the index part of the envid,
 	// then check the env_id field in that struct Env
 	// to ensure that the envid is not stale
 	// (i.e., does not refer to a _previous_ environment
 	// that used the same slot in the envs[] array).
 	e = &envs[ENVX(envid)];
-f0103265:	89 c2                	mov    %eax,%edx
-f0103267:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
-f010326d:	8d 14 52             	lea    (%edx,%edx,2),%edx
-f0103270:	c1 e2 05             	shl    $0x5,%edx
-f0103273:	03 15 a8 3c 19 f0    	add    0xf0193ca8,%edx
+f010323d:	89 c2                	mov    %eax,%edx
+f010323f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
+f0103245:	8d 14 52             	lea    (%edx,%edx,2),%edx
+f0103248:	c1 e2 05             	shl    $0x5,%edx
+f010324b:	03 15 a8 3c 19 f0    	add    0xf0193ca8,%edx
 	if (e->env_status == ENV_FREE || e->env_id != envid) {
-f0103279:	83 7a 54 00          	cmpl   $0x0,0x54(%edx)
-f010327d:	74 05                	je     f0103284 <envid2env+0x3d>
-f010327f:	39 42 48             	cmp    %eax,0x48(%edx)
-f0103282:	74 10                	je     f0103294 <envid2env+0x4d>
+f0103251:	83 7a 54 00          	cmpl   $0x0,0x54(%edx)
+f0103255:	74 05                	je     f010325c <envid2env+0x3d>
+f0103257:	39 42 48             	cmp    %eax,0x48(%edx)
+f010325a:	74 10                	je     f010326c <envid2env+0x4d>
 		*env_store = 0;
-f0103284:	8b 45 0c             	mov    0xc(%ebp),%eax
-f0103287:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+f010325c:	8b 45 0c             	mov    0xc(%ebp),%eax
+f010325f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 		return -E_BAD_ENV;
-f010328d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
-f0103292:	eb 2f                	jmp    f01032c3 <envid2env+0x7c>
+f0103265:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
+f010326a:	eb 2f                	jmp    f010329b <envid2env+0x7c>
 	// Check that the calling environment has legitimate permission
 	// to manipulate the specified environment.
 	// If checkperm is set, the specified environment
 	// must be either the current environment
 	// or an immediate child of the current environment.
 	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
-f0103294:	84 c9                	test   %cl,%cl
-f0103296:	74 21                	je     f01032b9 <envid2env+0x72>
-f0103298:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
-f010329d:	39 c2                	cmp    %eax,%edx
-f010329f:	74 18                	je     f01032b9 <envid2env+0x72>
-f01032a1:	8b 40 48             	mov    0x48(%eax),%eax
-f01032a4:	39 42 4c             	cmp    %eax,0x4c(%edx)
-f01032a7:	74 10                	je     f01032b9 <envid2env+0x72>
+f010326c:	84 c9                	test   %cl,%cl
+f010326e:	74 21                	je     f0103291 <envid2env+0x72>
+f0103270:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f0103275:	39 c2                	cmp    %eax,%edx
+f0103277:	74 18                	je     f0103291 <envid2env+0x72>
+f0103279:	8b 40 48             	mov    0x48(%eax),%eax
+f010327c:	39 42 4c             	cmp    %eax,0x4c(%edx)
+f010327f:	74 10                	je     f0103291 <envid2env+0x72>
 		*env_store = 0;
-f01032a9:	8b 45 0c             	mov    0xc(%ebp),%eax
-f01032ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+f0103281:	8b 45 0c             	mov    0xc(%ebp),%eax
+f0103284:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 		return -E_BAD_ENV;
-f01032b2:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
-f01032b7:	eb 0a                	jmp    f01032c3 <envid2env+0x7c>
+f010328a:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
+f010328f:	eb 0a                	jmp    f010329b <envid2env+0x7c>
 	}
 
 	*env_store = e;
-f01032b9:	8b 45 0c             	mov    0xc(%ebp),%eax
-f01032bc:	89 10                	mov    %edx,(%eax)
+f0103291:	8b 45 0c             	mov    0xc(%ebp),%eax
+f0103294:	89 10                	mov    %edx,(%eax)
 	return 0;
-f01032be:	b8 00 00 00 00       	mov    $0x0,%eax
+f0103296:	b8 00 00 00 00       	mov    $0x0,%eax
 }
-f01032c3:	5d                   	pop    %ebp
-f01032c4:	c3                   	ret    
+f010329b:	5d                   	pop    %ebp
+f010329c:	c3                   	ret    
 
-f01032c5 <env_init_percpu>:
+f010329d <env_init_percpu>:
 }
 
 // Load GDT and segment descriptors.
 void
 env_init_percpu(void)
 {
-f01032c5:	55                   	push   %ebp
-f01032c6:	89 e5                	mov    %esp,%ebp
+f010329d:	55                   	push   %ebp
+f010329e:	89 e5                	mov    %esp,%ebp
 }
 
 static __inline void
 lgdt(void *p)
 {
 	__asm __volatile("lgdt (%0)" : : "r" (p));
-f01032c8:	b8 00 c3 11 f0       	mov    $0xf011c300,%eax
-f01032cd:	0f 01 10             	lgdtl  (%eax)
+f01032a0:	b8 00 c3 11 f0       	mov    $0xf011c300,%eax
+f01032a5:	0f 01 10             	lgdtl  (%eax)
 	lgdt(&gdt_pd);
 	// The kernel never uses GS or FS, so we leave those set to
 	// the user data segment.
 	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
-f01032d0:	b8 23 00 00 00       	mov    $0x23,%eax
-f01032d5:	8e e8                	mov    %eax,%gs
+f01032a8:	b8 23 00 00 00       	mov    $0x23,%eax
+f01032ad:	8e e8                	mov    %eax,%gs
 	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
-f01032d7:	8e e0                	mov    %eax,%fs
+f01032af:	8e e0                	mov    %eax,%fs
 	// The kernel does use ES, DS, and SS.  We'll change between
 	// the kernel and user data segments as needed.
 	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
-f01032d9:	b0 10                	mov    $0x10,%al
-f01032db:	8e c0                	mov    %eax,%es
+f01032b1:	b0 10                	mov    $0x10,%al
+f01032b3:	8e c0                	mov    %eax,%es
 	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
-f01032dd:	8e d8                	mov    %eax,%ds
+f01032b5:	8e d8                	mov    %eax,%ds
 	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
-f01032df:	8e d0                	mov    %eax,%ss
+f01032b7:	8e d0                	mov    %eax,%ss
 	// Load the kernel text segment into CS.
 	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));
-f01032e1:	ea e8 32 10 f0 08 00 	ljmp   $0x8,$0xf01032e8
+f01032b9:	ea c0 32 10 f0 08 00 	ljmp   $0x8,$0xf01032c0
 }
 
 static __inline void
 lldt(uint16_t sel)
 {
 	__asm __volatile("lldt %0" : : "r" (sel));
-f01032e8:	b0 00                	mov    $0x0,%al
-f01032ea:	0f 00 d0             	lldt   %ax
+f01032c0:	b0 00                	mov    $0x0,%al
+f01032c2:	0f 00 d0             	lldt   %ax
 	// For good measure, clear the local descriptor table (LDT),
 	// since we don't use it.
 	lldt(0);
 }
-f01032ed:	5d                   	pop    %ebp
-f01032ee:	c3                   	ret    
+f01032c5:	5d                   	pop    %ebp
+f01032c6:	c3                   	ret    
 
-f01032ef <env_init>:
+f01032c7 <env_init>:
 // they are in the envs array (i.e., so that the first call to
 // env_alloc() returns envs[0]).
 //
 void
 env_init(void)
 {
-f01032ef:	55                   	push   %ebp
-f01032f0:	89 e5                	mov    %esp,%ebp
-f01032f2:	83 ec 18             	sub    $0x18,%esp
+f01032c7:	55                   	push   %ebp
+f01032c8:	89 e5                	mov    %esp,%ebp
+f01032ca:	83 ec 18             	sub    $0x18,%esp
 	cprintf("env_init!\n");
-f01032f5:	c7 04 24 5c 66 10 f0 	movl   $0xf010665c,(%esp)
-f01032fc:	e8 89 06 00 00       	call   f010398a <cprintf>
-f0103301:	a1 a8 3c 19 f0       	mov    0xf0193ca8,%eax
-f0103306:	83 c0 60             	add    $0x60,%eax
+f01032cd:	c7 04 24 29 68 10 f0 	movl   $0xf0106829,(%esp)
+f01032d4:	e8 7d 06 00 00       	call   f0103956 <cprintf>
+f01032d9:	a1 a8 3c 19 f0       	mov    0xf0193ca8,%eax
+f01032de:	83 c0 60             	add    $0x60,%eax
 	// Set up envs array
 	size_t i;
 	for (i = 0; i < NENV; i++) {
-f0103309:	ba 00 00 00 00       	mov    $0x0,%edx
+f01032e1:	ba 00 00 00 00       	mov    $0x0,%edx
 		envs[i].env_id = 0;
-f010330e:	c7 40 e8 00 00 00 00 	movl   $0x0,-0x18(%eax)
+f01032e6:	c7 40 e8 00 00 00 00 	movl   $0x0,-0x18(%eax)
 		if (i + 1 < NENV)
-f0103315:	42                   	inc    %edx
-f0103316:	81 fa ff 03 00 00    	cmp    $0x3ff,%edx
-f010331c:	77 05                	ja     f0103323 <env_init+0x34>
+f01032ed:	42                   	inc    %edx
+f01032ee:	81 fa ff 03 00 00    	cmp    $0x3ff,%edx
+f01032f4:	77 05                	ja     f01032fb <env_init+0x34>
 			envs[i].env_link = &envs[i + 1];
-f010331e:	89 40 e4             	mov    %eax,-0x1c(%eax)
-f0103321:	eb 07                	jmp    f010332a <env_init+0x3b>
+f01032f6:	89 40 e4             	mov    %eax,-0x1c(%eax)
+f01032f9:	eb 07                	jmp    f0103302 <env_init+0x3b>
 		else
 			envs[i].env_link = 0;
-f0103323:	c7 40 e4 00 00 00 00 	movl   $0x0,-0x1c(%eax)
-f010332a:	83 c0 60             	add    $0x60,%eax
+f01032fb:	c7 40 e4 00 00 00 00 	movl   $0x0,-0x1c(%eax)
+f0103302:	83 c0 60             	add    $0x60,%eax
 env_init(void)
 {
 	cprintf("env_init!\n");
 	// Set up envs array
 	size_t i;
 	for (i = 0; i < NENV; i++) {
-f010332d:	81 fa 00 04 00 00    	cmp    $0x400,%edx
-f0103333:	75 d9                	jne    f010330e <env_init+0x1f>
+f0103305:	81 fa 00 04 00 00    	cmp    $0x400,%edx
+f010330b:	75 d9                	jne    f01032e6 <env_init+0x1f>
 		if (i + 1 < NENV)
 			envs[i].env_link = &envs[i + 1];
 		else
 			envs[i].env_link = 0;
 	}
 	env_free_list = &envs[0];
-f0103335:	a1 a8 3c 19 f0       	mov    0xf0193ca8,%eax
-f010333a:	a3 ac 3c 19 f0       	mov    %eax,0xf0193cac
+f010330d:	a1 a8 3c 19 f0       	mov    0xf0193ca8,%eax
+f0103312:	a3 ac 3c 19 f0       	mov    %eax,0xf0193cac
 	// Per-CPU part of the initialization
 	env_init_percpu();
-f010333f:	e8 81 ff ff ff       	call   f01032c5 <env_init_percpu>
+f0103317:	e8 81 ff ff ff       	call   f010329d <env_init_percpu>
 }
-f0103344:	c9                   	leave  
-f0103345:	c3                   	ret    
+f010331c:	c9                   	leave  
+f010331d:	c3                   	ret    
 
-f0103346 <env_alloc>:
+f010331e <env_alloc>:
 //	-E_NO_FREE_ENV if all NENVS environments are allocated
 //	-E_NO_MEM on memory exhaustion
 //
 int
 env_alloc(struct Env **newenv_store, envid_t parent_id)
 {
-f0103346:	55                   	push   %ebp
-f0103347:	89 e5                	mov    %esp,%ebp
-f0103349:	56                   	push   %esi
-f010334a:	53                   	push   %ebx
-f010334b:	83 ec 10             	sub    $0x10,%esp
+f010331e:	55                   	push   %ebp
+f010331f:	89 e5                	mov    %esp,%ebp
+f0103321:	56                   	push   %esi
+f0103322:	53                   	push   %ebx
+f0103323:	83 ec 10             	sub    $0x10,%esp
 	cprintf("env_alloc!\n");
-f010334e:	c7 04 24 67 66 10 f0 	movl   $0xf0106667,(%esp)
-f0103355:	e8 30 06 00 00       	call   f010398a <cprintf>
+f0103326:	c7 04 24 34 68 10 f0 	movl   $0xf0106834,(%esp)
+f010332d:	e8 24 06 00 00       	call   f0103956 <cprintf>
 	int32_t generation;
 	int r;
 	struct Env *e;
 
 	if (!(e = env_free_list))
-f010335a:	8b 1d ac 3c 19 f0    	mov    0xf0193cac,%ebx
-f0103360:	85 db                	test   %ebx,%ebx
-f0103362:	0f 84 8d 01 00 00    	je     f01034f5 <env_alloc+0x1af>
+f0103332:	8b 1d ac 3c 19 f0    	mov    0xf0193cac,%ebx
+f0103338:	85 db                	test   %ebx,%ebx
+f010333a:	0f 84 8d 01 00 00    	je     f01034cd <env_alloc+0x1af>
 //	-E_NO_MEM if page directory or table could not be allocated.
 //
 static int
 env_setup_vm(struct Env *e)
 {
 	cprintf("env_setup_vm!\n");
-f0103368:	c7 04 24 73 66 10 f0 	movl   $0xf0106673,(%esp)
-f010336f:	e8 16 06 00 00       	call   f010398a <cprintf>
+f0103340:	c7 04 24 40 68 10 f0 	movl   $0xf0106840,(%esp)
+f0103347:	e8 0a 06 00 00       	call   f0103956 <cprintf>
 	int i;
 	struct PageInfo *p = NULL;
 
 	// Allocate a page for the page directory
 	if (!(p = page_alloc(ALLOC_ZERO)))
-f0103374:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-f010337b:	e8 33 e0 ff ff       	call   f01013b3 <page_alloc>
-f0103380:	85 c0                	test   %eax,%eax
-f0103382:	0f 84 74 01 00 00    	je     f01034fc <env_alloc+0x1b6>
+f010334c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+f0103353:	e8 5b e0 ff ff       	call   f01013b3 <page_alloc>
+f0103358:	85 c0                	test   %eax,%eax
+f010335a:	0f 84 74 01 00 00    	je     f01034d4 <env_alloc+0x1b6>
 	//	is an exception -- you need to increment env_pgdir's
 	//	pp_ref for env_free to work correctly.
 	//    - The functions in kern/pmap.h are handy.
 
 	// LAB 3: Your code here.
 	p->pp_ref++;
-f0103388:	66 ff 40 04          	incw   0x4(%eax)
+f0103360:	66 ff 40 04          	incw   0x4(%eax)
 void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);
 
 static inline physaddr_t
 page2pa(struct PageInfo *pp)
 {
 	return (pp - pages) << PGSHIFT;
-f010338c:	2b 05 6c 49 19 f0    	sub    0xf019496c,%eax
-f0103392:	c1 f8 03             	sar    $0x3,%eax
-f0103395:	c1 e0 0c             	shl    $0xc,%eax
+f0103364:	2b 05 6c 49 19 f0    	sub    0xf019496c,%eax
+f010336a:	c1 f8 03             	sar    $0x3,%eax
+f010336d:	c1 e0 0c             	shl    $0xc,%eax
 #define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)
 
 static inline void*
 _kaddr(const char *file, int line, physaddr_t pa)
 {
 	if (PGNUM(pa) >= npages)
-f0103398:	89 c2                	mov    %eax,%edx
-f010339a:	c1 ea 0c             	shr    $0xc,%edx
-f010339d:	3b 15 64 49 19 f0    	cmp    0xf0194964,%edx
-f01033a3:	72 20                	jb     f01033c5 <env_alloc+0x7f>
+f0103370:	89 c2                	mov    %eax,%edx
+f0103372:	c1 ea 0c             	shr    $0xc,%edx
+f0103375:	3b 15 64 49 19 f0    	cmp    0xf0194964,%edx
+f010337b:	72 20                	jb     f010339d <env_alloc+0x7f>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
-f01033a5:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f01033a9:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
-f01033b0:	f0 
-f01033b1:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
-f01033b8:	00 
-f01033b9:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
-f01033c0:	e8 ec cc ff ff       	call   f01000b1 <_panic>
+f010337d:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f0103381:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
+f0103388:	f0 
+f0103389:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
+f0103390:	00 
+f0103391:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
+f0103398:	e8 14 cd ff ff       	call   f01000b1 <_panic>
 	return (void *)(pa + KERNBASE);
-f01033c5:	2d 00 00 00 10       	sub    $0x10000000,%eax
-f01033ca:	89 43 5c             	mov    %eax,0x5c(%ebx)
+f010339d:	2d 00 00 00 10       	sub    $0x10000000,%eax
+f01033a2:	89 43 5c             	mov    %eax,0x5c(%ebx)
 	// the following is modified
 	e->env_pgdir = page2kva(p);
-f01033cd:	b8 ec 0e 00 00       	mov    $0xeec,%eax
+f01033a5:	b8 ec 0e 00 00       	mov    $0xeec,%eax
 
 	for (i = PDX(UTOP); i < 1024; i++)
 		e->env_pgdir[i] = kern_pgdir[i];
-f01033d2:	8b 15 68 49 19 f0    	mov    0xf0194968,%edx
-f01033d8:	8b 0c 02             	mov    (%edx,%eax,1),%ecx
-f01033db:	8b 53 5c             	mov    0x5c(%ebx),%edx
-f01033de:	89 0c 02             	mov    %ecx,(%edx,%eax,1)
-f01033e1:	83 c0 04             	add    $0x4,%eax
+f01033aa:	8b 15 68 49 19 f0    	mov    0xf0194968,%edx
+f01033b0:	8b 0c 02             	mov    (%edx,%eax,1),%ecx
+f01033b3:	8b 53 5c             	mov    0x5c(%ebx),%edx
+f01033b6:	89 0c 02             	mov    %ecx,(%edx,%eax,1)
+f01033b9:	83 c0 04             	add    $0x4,%eax
 	// LAB 3: Your code here.
 	p->pp_ref++;
 	// the following is modified
 	e->env_pgdir = page2kva(p);
 
 	for (i = PDX(UTOP); i < 1024; i++)
-f01033e4:	3d 00 10 00 00       	cmp    $0x1000,%eax
-f01033e9:	75 e7                	jne    f01033d2 <env_alloc+0x8c>
+f01033bc:	3d 00 10 00 00       	cmp    $0x1000,%eax
+f01033c1:	75 e7                	jne    f01033aa <env_alloc+0x8c>
 		e->env_pgdir[i] = kern_pgdir[i];
 	// UVPT maps the env's own page table read-only.
 	// Permissions: kernel R, user R
 	e->env_pgdir[PDX(UVPT)] = PADDR(e->env_pgdir) | PTE_P | PTE_U | PTE_W;
-f01033eb:	8b 43 5c             	mov    0x5c(%ebx),%eax
+f01033c3:	8b 43 5c             	mov    0x5c(%ebx),%eax
 #define PADDR(kva) _paddr(__FILE__, __LINE__, kva)
 
 static inline physaddr_t
 _paddr(const char *file, int line, void *kva)
 {
 	if ((uint32_t)kva < KERNBASE)
-f01033ee:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
-f01033f3:	77 20                	ja     f0103415 <env_alloc+0xcf>
+f01033c6:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
+f01033cb:	77 20                	ja     f01033ed <env_alloc+0xcf>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
-f01033f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f01033f9:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
-f0103400:	f0 
-f0103401:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
-f0103408:	00 
-f0103409:	c7 04 24 3e 66 10 f0 	movl   $0xf010663e,(%esp)
-f0103410:	e8 9c cc ff ff       	call   f01000b1 <_panic>
+f01033cd:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f01033d1:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
+f01033d8:	f0 
+f01033d9:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
+f01033e0:	00 
+f01033e1:	c7 04 24 1e 68 10 f0 	movl   $0xf010681e,(%esp)
+f01033e8:	e8 c4 cc ff ff       	call   f01000b1 <_panic>
 	return (physaddr_t)kva - KERNBASE;
-f0103415:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
-f010341b:	83 ca 07             	or     $0x7,%edx
-f010341e:	89 90 f4 0e 00 00    	mov    %edx,0xef4(%eax)
+f01033ed:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
+f01033f3:	83 ca 07             	or     $0x7,%edx
+f01033f6:	89 90 f4 0e 00 00    	mov    %edx,0xef4(%eax)
 	// Allocate and set up the page directory for this environment.
 	if ((r = env_setup_vm(e)) < 0)
 		return r;
 
 	// Generate an env_id for this environment.
 	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
-f0103424:	8b 43 48             	mov    0x48(%ebx),%eax
-f0103427:	05 00 10 00 00       	add    $0x1000,%eax
+f01033fc:	8b 43 48             	mov    0x48(%ebx),%eax
+f01033ff:	05 00 10 00 00       	add    $0x1000,%eax
 	if (generation <= 0)	// Don't create a negative env_id.
-f010342c:	25 00 fc ff ff       	and    $0xfffffc00,%eax
-f0103431:	89 c1                	mov    %eax,%ecx
-f0103433:	7f 05                	jg     f010343a <env_alloc+0xf4>
+f0103404:	25 00 fc ff ff       	and    $0xfffffc00,%eax
+f0103409:	89 c1                	mov    %eax,%ecx
+f010340b:	7f 05                	jg     f0103412 <env_alloc+0xf4>
 		generation = 1 << ENVGENSHIFT;
-f0103435:	b9 00 10 00 00       	mov    $0x1000,%ecx
+f010340d:	b9 00 10 00 00       	mov    $0x1000,%ecx
 	e->env_id = generation | (e - envs);
-f010343a:	89 d8                	mov    %ebx,%eax
-f010343c:	2b 05 a8 3c 19 f0    	sub    0xf0193ca8,%eax
-f0103442:	c1 f8 05             	sar    $0x5,%eax
-f0103445:	8d 14 80             	lea    (%eax,%eax,4),%edx
-f0103448:	89 d6                	mov    %edx,%esi
-f010344a:	c1 e6 04             	shl    $0x4,%esi
-f010344d:	01 f2                	add    %esi,%edx
-f010344f:	89 d6                	mov    %edx,%esi
-f0103451:	c1 e6 08             	shl    $0x8,%esi
-f0103454:	01 f2                	add    %esi,%edx
-f0103456:	89 d6                	mov    %edx,%esi
-f0103458:	c1 e6 10             	shl    $0x10,%esi
-f010345b:	01 f2                	add    %esi,%edx
-f010345d:	8d 04 50             	lea    (%eax,%edx,2),%eax
-f0103460:	09 c1                	or     %eax,%ecx
-f0103462:	89 4b 48             	mov    %ecx,0x48(%ebx)
+f0103412:	89 d8                	mov    %ebx,%eax
+f0103414:	2b 05 a8 3c 19 f0    	sub    0xf0193ca8,%eax
+f010341a:	c1 f8 05             	sar    $0x5,%eax
+f010341d:	8d 14 80             	lea    (%eax,%eax,4),%edx
+f0103420:	89 d6                	mov    %edx,%esi
+f0103422:	c1 e6 04             	shl    $0x4,%esi
+f0103425:	01 f2                	add    %esi,%edx
+f0103427:	89 d6                	mov    %edx,%esi
+f0103429:	c1 e6 08             	shl    $0x8,%esi
+f010342c:	01 f2                	add    %esi,%edx
+f010342e:	89 d6                	mov    %edx,%esi
+f0103430:	c1 e6 10             	shl    $0x10,%esi
+f0103433:	01 f2                	add    %esi,%edx
+f0103435:	8d 04 50             	lea    (%eax,%edx,2),%eax
+f0103438:	09 c1                	or     %eax,%ecx
+f010343a:	89 4b 48             	mov    %ecx,0x48(%ebx)
 
 	// Set the basic status variables.
 	e->env_parent_id = parent_id;
-f0103465:	8b 45 0c             	mov    0xc(%ebp),%eax
-f0103468:	89 43 4c             	mov    %eax,0x4c(%ebx)
+f010343d:	8b 45 0c             	mov    0xc(%ebp),%eax
+f0103440:	89 43 4c             	mov    %eax,0x4c(%ebx)
 	e->env_type = ENV_TYPE_USER;
-f010346b:	c7 43 50 00 00 00 00 	movl   $0x0,0x50(%ebx)
+f0103443:	c7 43 50 00 00 00 00 	movl   $0x0,0x50(%ebx)
 	e->env_status = ENV_RUNNABLE;
-f0103472:	c7 43 54 02 00 00 00 	movl   $0x2,0x54(%ebx)
+f010344a:	c7 43 54 02 00 00 00 	movl   $0x2,0x54(%ebx)
 	e->env_runs = 0;
-f0103479:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+f0103451:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
 
 	// Clear out all the saved register state,
 	// to prevent the register values
 	// of a prior environment inhabiting this Env structure
 	// from "leaking" into our new environment.
 	memset(&e->env_tf, 0, sizeof(e->env_tf));
-f0103480:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
-f0103487:	00 
-f0103488:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-f010348f:	00 
-f0103490:	89 1c 24             	mov    %ebx,(%esp)
-f0103493:	e8 cb 17 00 00       	call   f0104c63 <memset>
+f0103458:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
+f010345f:	00 
+f0103460:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+f0103467:	00 
+f0103468:	89 1c 24             	mov    %ebx,(%esp)
+f010346b:	e8 3b 1a 00 00       	call   f0104eab <memset>
 	// The low 2 bits of each segment register contains the
 	// Requestor Privilege Level (RPL); 3 means user mode.  When
 	// we switch privilege levels, the hardware does various
 	// checks involving the RPL and the Descriptor Privilege Level
 	// (DPL) stored in the descriptors themselves.
 	e->env_tf.tf_ds = GD_UD | 3;
-f0103498:	66 c7 43 24 23 00    	movw   $0x23,0x24(%ebx)
+f0103470:	66 c7 43 24 23 00    	movw   $0x23,0x24(%ebx)
 	e->env_tf.tf_es = GD_UD | 3;
-f010349e:	66 c7 43 20 23 00    	movw   $0x23,0x20(%ebx)
+f0103476:	66 c7 43 20 23 00    	movw   $0x23,0x20(%ebx)
 	e->env_tf.tf_ss = GD_UD | 3;
-f01034a4:	66 c7 43 40 23 00    	movw   $0x23,0x40(%ebx)
+f010347c:	66 c7 43 40 23 00    	movw   $0x23,0x40(%ebx)
 	e->env_tf.tf_esp = USTACKTOP;
-f01034aa:	c7 43 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%ebx)
+f0103482:	c7 43 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%ebx)
 	e->env_tf.tf_cs = GD_UT | 3;
-f01034b1:	66 c7 43 34 1b 00    	movw   $0x1b,0x34(%ebx)
+f0103489:	66 c7 43 34 1b 00    	movw   $0x1b,0x34(%ebx)
 	// You will set e->env_tf.tf_eip later.
 
 	// commit the allocation
 	env_free_list = e->env_link;
-f01034b7:	8b 43 44             	mov    0x44(%ebx),%eax
-f01034ba:	a3 ac 3c 19 f0       	mov    %eax,0xf0193cac
+f010348f:	8b 43 44             	mov    0x44(%ebx),%eax
+f0103492:	a3 ac 3c 19 f0       	mov    %eax,0xf0193cac
 	*newenv_store = e;
-f01034bf:	8b 45 08             	mov    0x8(%ebp),%eax
-f01034c2:	89 18                	mov    %ebx,(%eax)
+f0103497:	8b 45 08             	mov    0x8(%ebp),%eax
+f010349a:	89 18                	mov    %ebx,(%eax)
 
 	cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
-f01034c4:	8b 53 48             	mov    0x48(%ebx),%edx
-f01034c7:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
-f01034cc:	85 c0                	test   %eax,%eax
-f01034ce:	74 05                	je     f01034d5 <env_alloc+0x18f>
-f01034d0:	8b 40 48             	mov    0x48(%eax),%eax
-f01034d3:	eb 05                	jmp    f01034da <env_alloc+0x194>
-f01034d5:	b8 00 00 00 00       	mov    $0x0,%eax
-f01034da:	89 54 24 08          	mov    %edx,0x8(%esp)
-f01034de:	89 44 24 04          	mov    %eax,0x4(%esp)
-f01034e2:	c7 04 24 82 66 10 f0 	movl   $0xf0106682,(%esp)
-f01034e9:	e8 9c 04 00 00       	call   f010398a <cprintf>
+f010349c:	8b 53 48             	mov    0x48(%ebx),%edx
+f010349f:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f01034a4:	85 c0                	test   %eax,%eax
+f01034a6:	74 05                	je     f01034ad <env_alloc+0x18f>
+f01034a8:	8b 40 48             	mov    0x48(%eax),%eax
+f01034ab:	eb 05                	jmp    f01034b2 <env_alloc+0x194>
+f01034ad:	b8 00 00 00 00       	mov    $0x0,%eax
+f01034b2:	89 54 24 08          	mov    %edx,0x8(%esp)
+f01034b6:	89 44 24 04          	mov    %eax,0x4(%esp)
+f01034ba:	c7 04 24 4f 68 10 f0 	movl   $0xf010684f,(%esp)
+f01034c1:	e8 90 04 00 00       	call   f0103956 <cprintf>
 	return 0;
-f01034ee:	b8 00 00 00 00       	mov    $0x0,%eax
-f01034f3:	eb 0c                	jmp    f0103501 <env_alloc+0x1bb>
+f01034c6:	b8 00 00 00 00       	mov    $0x0,%eax
+f01034cb:	eb 0c                	jmp    f01034d9 <env_alloc+0x1bb>
 	int32_t generation;
 	int r;
 	struct Env *e;
 
 	if (!(e = env_free_list))
 		return -E_NO_FREE_ENV;
-f01034f5:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
-f01034fa:	eb 05                	jmp    f0103501 <env_alloc+0x1bb>
+f01034cd:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
+f01034d2:	eb 05                	jmp    f01034d9 <env_alloc+0x1bb>
 	int i;
 	struct PageInfo *p = NULL;
 
 	// Allocate a page for the page directory
 	if (!(p = page_alloc(ALLOC_ZERO)))
 		return -E_NO_MEM;
-f01034fc:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+f01034d4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
 	env_free_list = e->env_link;
 	*newenv_store = e;
 
 	cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
 	return 0;
 }
-f0103501:	83 c4 10             	add    $0x10,%esp
-f0103504:	5b                   	pop    %ebx
-f0103505:	5e                   	pop    %esi
-f0103506:	5d                   	pop    %ebp
-f0103507:	c3                   	ret    
+f01034d9:	83 c4 10             	add    $0x10,%esp
+f01034dc:	5b                   	pop    %ebx
+f01034dd:	5e                   	pop    %esi
+f01034de:	5d                   	pop    %ebp
+f01034df:	c3                   	ret    
 
-f0103508 <env_create>:
+f01034e0 <env_create>:
 // before running the first user-mode environment.
 // The new env's parent ID is set to 0.
 //
 void
 env_create(uint8_t *binary, enum EnvType type)
 {
-f0103508:	55                   	push   %ebp
-f0103509:	89 e5                	mov    %esp,%ebp
-f010350b:	57                   	push   %edi
-f010350c:	56                   	push   %esi
-f010350d:	53                   	push   %ebx
-f010350e:	83 ec 3c             	sub    $0x3c,%esp
-f0103511:	8b 75 08             	mov    0x8(%ebp),%esi
+f01034e0:	55                   	push   %ebp
+f01034e1:	89 e5                	mov    %esp,%ebp
+f01034e3:	57                   	push   %edi
+f01034e4:	56                   	push   %esi
+f01034e5:	53                   	push   %ebx
+f01034e6:	83 ec 3c             	sub    $0x3c,%esp
+f01034e9:	8b 75 08             	mov    0x8(%ebp),%esi
 	cprintf("env_create!\n");
-f0103514:	c7 04 24 97 66 10 f0 	movl   $0xf0106697,(%esp)
-f010351b:	e8 6a 04 00 00       	call   f010398a <cprintf>
+f01034ec:	c7 04 24 64 68 10 f0 	movl   $0xf0106864,(%esp)
+f01034f3:	e8 5e 04 00 00       	call   f0103956 <cprintf>
 	// LAB 3: Your code here.
 	struct Env *env;
 	int r = env_alloc(&env, 0);
-f0103520:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-f0103527:	00 
-f0103528:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-f010352b:	89 04 24             	mov    %eax,(%esp)
-f010352e:	e8 13 fe ff ff       	call   f0103346 <env_alloc>
+f01034f8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+f01034ff:	00 
+f0103500:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+f0103503:	89 04 24             	mov    %eax,(%esp)
+f0103506:	e8 13 fe ff ff       	call   f010331e <env_alloc>
 
 	if (r == 0) {
-f0103533:	85 c0                	test   %eax,%eax
-f0103535:	0f 85 16 01 00 00    	jne    f0103651 <env_create+0x149>
+f010350b:	85 c0                	test   %eax,%eax
+f010350d:	0f 85 0a 01 00 00    	jne    f010361d <env_create+0x13d>
 		env->env_type = type;
-f010353b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-f010353e:	89 c7                	mov    %eax,%edi
-f0103540:	89 45 d0             	mov    %eax,-0x30(%ebp)
-f0103543:	8b 45 0c             	mov    0xc(%ebp),%eax
-f0103546:	89 47 50             	mov    %eax,0x50(%edi)
+f0103513:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+f0103516:	89 c7                	mov    %eax,%edi
+f0103518:	89 45 d0             	mov    %eax,-0x30(%ebp)
+f010351b:	8b 45 0c             	mov    0xc(%ebp),%eax
+f010351e:	89 47 50             	mov    %eax,0x50(%edi)
 //  - How might load_icode fail?  What might be wrong with the given input?
 //
 static void
 load_icode(struct Env *e, uint8_t *binary)
 {
 	cprintf("load_icode!\n");
-f0103549:	c7 04 24 a4 66 10 f0 	movl   $0xf01066a4,(%esp)
-f0103550:	e8 35 04 00 00       	call   f010398a <cprintf>
+f0103521:	c7 04 24 71 68 10 f0 	movl   $0xf0106871,(%esp)
+f0103528:	e8 29 04 00 00       	call   f0103956 <cprintf>
 	//  You must also do something with the program's entry point,
 	//  to make sure that the environment starts executing there.
 	//  What?  (See env_run() and env_pop_tf() below.)
 
 	// LAB 3: Your code here.
 	lcr3(PADDR(e->env_pgdir));
-f0103555:	8b 47 5c             	mov    0x5c(%edi),%eax
+f010352d:	8b 47 5c             	mov    0x5c(%edi),%eax
 #define PADDR(kva) _paddr(__FILE__, __LINE__, kva)
 
 static inline physaddr_t
 _paddr(const char *file, int line, void *kva)
 {
 	if ((uint32_t)kva < KERNBASE)
-f0103558:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
-f010355d:	77 20                	ja     f010357f <env_create+0x77>
+f0103530:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
+f0103535:	77 20                	ja     f0103557 <env_create+0x77>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
-f010355f:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0103563:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
-f010356a:	f0 
-f010356b:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
-f0103572:	00 
-f0103573:	c7 04 24 3e 66 10 f0 	movl   $0xf010663e,(%esp)
-f010357a:	e8 32 cb ff ff       	call   f01000b1 <_panic>
+f0103537:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f010353b:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
+f0103542:	f0 
+f0103543:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
+f010354a:	00 
+f010354b:	c7 04 24 1e 68 10 f0 	movl   $0xf010681e,(%esp)
+f0103552:	e8 5a cb ff ff       	call   f01000b1 <_panic>
 	return (physaddr_t)kva - KERNBASE;
-f010357f:	05 00 00 00 10       	add    $0x10000000,%eax
+f0103557:	05 00 00 00 10       	add    $0x10000000,%eax
 }
 
 static __inline void
 lcr3(uint32_t val)
 {
 	__asm __volatile("movl %0,%%cr3" : : "r" (val));
-f0103584:	0f 22 d8             	mov    %eax,%cr3
+f010355c:	0f 22 d8             	mov    %eax,%cr3
 
 	struct Elf * elf = (struct Elf *)binary;
 	struct Proghdr *ph, *eph;
 	if (elf->e_magic != ELF_MAGIC)
-f0103587:	81 3e 7f 45 4c 46    	cmpl   $0x464c457f,(%esi)
-f010358d:	74 1c                	je     f01035ab <env_create+0xa3>
+f010355f:	81 3e 7f 45 4c 46    	cmpl   $0x464c457f,(%esi)
+f0103565:	74 1c                	je     f0103583 <env_create+0xa3>
 		panic("not an elf file!\n");
-f010358f:	c7 44 24 08 b1 66 10 	movl   $0xf01066b1,0x8(%esp)
-f0103596:	f0 
-f0103597:	c7 44 24 04 66 01 00 	movl   $0x166,0x4(%esp)
-f010359e:	00 
-f010359f:	c7 04 24 3e 66 10 f0 	movl   $0xf010663e,(%esp)
-f01035a6:	e8 06 cb ff ff       	call   f01000b1 <_panic>
+f0103567:	c7 44 24 08 7e 68 10 	movl   $0xf010687e,0x8(%esp)
+f010356e:	f0 
+f010356f:	c7 44 24 04 66 01 00 	movl   $0x166,0x4(%esp)
+f0103576:	00 
+f0103577:	c7 04 24 1e 68 10 f0 	movl   $0xf010681e,(%esp)
+f010357e:	e8 2e cb ff ff       	call   f01000b1 <_panic>
 
 	ph = (struct Proghdr *) ((uint8_t *) elf + elf->e_phoff);
-f01035ab:	89 f3                	mov    %esi,%ebx
-f01035ad:	03 5e 1c             	add    0x1c(%esi),%ebx
+f0103583:	89 f3                	mov    %esi,%ebx
+f0103585:	03 5e 1c             	add    0x1c(%esi),%ebx
 	eph = ph + elf->e_phnum;
-f01035b0:	31 ff                	xor    %edi,%edi
-f01035b2:	66 8b 7e 2c          	mov    0x2c(%esi),%di
-f01035b6:	c1 e7 05             	shl    $0x5,%edi
-f01035b9:	01 df                	add    %ebx,%edi
-f01035bb:	eb 40                	jmp    f01035fd <env_create+0xf5>
+f0103588:	31 ff                	xor    %edi,%edi
+f010358a:	66 8b 7e 2c          	mov    0x2c(%esi),%di
+f010358e:	c1 e7 05             	shl    $0x5,%edi
+f0103591:	01 df                	add    %ebx,%edi
+f0103593:	eb 34                	jmp    f01035c9 <env_create+0xe9>
 	for (; ph < eph; ph++)
 		if (ph->p_type == ELF_PROG_LOAD) {
-f01035bd:	83 3b 01             	cmpl   $0x1,(%ebx)
-f01035c0:	75 38                	jne    f01035fa <env_create+0xf2>
+f0103595:	83 3b 01             	cmpl   $0x1,(%ebx)
+f0103598:	75 2c                	jne    f01035c6 <env_create+0xe6>
 			region_alloc(e, (void *)ph->p_va, ph->p_filesz);
-f01035c2:	8b 4b 10             	mov    0x10(%ebx),%ecx
-f01035c5:	8b 53 08             	mov    0x8(%ebx),%edx
-f01035c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
-f01035cb:	e8 d4 fb ff ff       	call   f01031a4 <region_alloc>
+f010359a:	8b 4b 10             	mov    0x10(%ebx),%ecx
+f010359d:	8b 53 08             	mov    0x8(%ebx),%edx
+f01035a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+f01035a3:	e8 fc fb ff ff       	call   f01031a4 <region_alloc>
 			int i = 0;
 			char * va = (char *)ph->p_va;			
-f01035d0:	8b 4b 08             	mov    0x8(%ebx),%ecx
+f01035a8:	8b 4b 08             	mov    0x8(%ebx),%ecx
 	ph = (struct Proghdr *) ((uint8_t *) elf + elf->e_phoff);
 	eph = ph + elf->e_phnum;
 	for (; ph < eph; ph++)
 		if (ph->p_type == ELF_PROG_LOAD) {
 			region_alloc(e, (void *)ph->p_va, ph->p_filesz);
 			int i = 0;
-f01035d3:	b8 00 00 00 00       	mov    $0x0,%eax
-f01035d8:	eb 0f                	jmp    f01035e9 <env_create+0xe1>
+f01035ab:	b8 00 00 00 00       	mov    $0x0,%eax
+f01035b0:	eb 0f                	jmp    f01035c1 <env_create+0xe1>
 			// 			cprintf("%04d| 0x%08x |0x%08x\n", j, j * PGSIZE, pte[j]);
 			//cprintf("va is %08x\n", va);
 			for (;i < ph->p_filesz; i++) {
 				//cprintf("%d\n", i);
 				//cprintf("binary[ph->p_offset + i] is %d\n", binary[ph->p_offset + i]);
 				va[i] = binary[ph->p_offset + i];
-f01035da:	8d 14 06             	lea    (%esi,%eax,1),%edx
-f01035dd:	03 53 04             	add    0x4(%ebx),%edx
-f01035e0:	8a 12                	mov    (%edx),%dl
-f01035e2:	88 55 d7             	mov    %dl,-0x29(%ebp)
-f01035e5:	88 14 08             	mov    %dl,(%eax,%ecx,1)
+f01035b2:	8d 14 06             	lea    (%esi,%eax,1),%edx
+f01035b5:	03 53 04             	add    0x4(%ebx),%edx
+f01035b8:	8a 12                	mov    (%edx),%dl
+f01035ba:	88 55 d7             	mov    %dl,-0x29(%ebp)
+f01035bd:	88 14 08             	mov    %dl,(%eax,%ecx,1)
 			// pte_t *pte = (pte_t *)page2kva(pa2page(PTE_ADDR(e->env_pgdir[0])));
 			// for (;j < 1024; j++)
 			// 	if (pte[j] & PTE_P)
 			// 			cprintf("%04d| 0x%08x |0x%08x\n", j, j * PGSIZE, pte[j]);
 			//cprintf("va is %08x\n", va);
 			for (;i < ph->p_filesz; i++) {
-f01035e8:	40                   	inc    %eax
-f01035e9:	3b 43 10             	cmp    0x10(%ebx),%eax
-f01035ec:	72 ec                	jb     f01035da <env_create+0xd2>
-				//cprintf("%d\n", i);
-				//cprintf("binary[ph->p_offset + i] is %d\n", binary[ph->p_offset + i]);
-				va[i] = binary[ph->p_offset + i];
-			}
-			cprintf("bug2\n");
-f01035ee:	c7 04 24 c3 66 10 f0 	movl   $0xf01066c3,(%esp)
-f01035f5:	e8 90 03 00 00       	call   f010398a <cprintf>
+f01035c0:	40                   	inc    %eax
+f01035c1:	3b 43 10             	cmp    0x10(%ebx),%eax
+f01035c4:	72 ec                	jb     f01035b2 <env_create+0xd2>
 	if (elf->e_magic != ELF_MAGIC)
 		panic("not an elf file!\n");
 
 	ph = (struct Proghdr *) ((uint8_t *) elf + elf->e_phoff);
 	eph = ph + elf->e_phnum;
 	for (; ph < eph; ph++)
-f01035fa:	83 c3 20             	add    $0x20,%ebx
-f01035fd:	39 df                	cmp    %ebx,%edi
-f01035ff:	77 bc                	ja     f01035bd <env_create+0xb5>
+f01035c6:	83 c3 20             	add    $0x20,%ebx
+f01035c9:	39 df                	cmp    %ebx,%edi
+f01035cb:	77 c8                	ja     f0103595 <env_create+0xb5>
+				//cprintf("%d\n", i);
 				//cprintf("binary[ph->p_offset + i] is %d\n", binary[ph->p_offset + i]);
 				va[i] = binary[ph->p_offset + i];
 			}
-			cprintf("bug2\n");
 		}
 	e->env_tf.tf_eip = elf->e_entry;
-f0103601:	8b 46 18             	mov    0x18(%esi),%eax
-f0103604:	8b 7d d0             	mov    -0x30(%ebp),%edi
-f0103607:	89 47 30             	mov    %eax,0x30(%edi)
+f01035cd:	8b 46 18             	mov    0x18(%esi),%eax
+f01035d0:	8b 7d d0             	mov    -0x30(%ebp),%edi
+f01035d3:	89 47 30             	mov    %eax,0x30(%edi)
 	// Now map one page for the program's initial stack
 	// at virtual address USTACKTOP - PGSIZE.
 	region_alloc(e, (void *)USTACKTOP - PGSIZE, PGSIZE);
-f010360a:	b9 00 10 00 00       	mov    $0x1000,%ecx
-f010360f:	ba 00 d0 bf ee       	mov    $0xeebfd000,%edx
-f0103614:	89 f8                	mov    %edi,%eax
-f0103616:	e8 89 fb ff ff       	call   f01031a4 <region_alloc>
+f01035d6:	b9 00 10 00 00       	mov    $0x1000,%ecx
+f01035db:	ba 00 d0 bf ee       	mov    $0xeebfd000,%edx
+f01035e0:	89 f8                	mov    %edi,%eax
+f01035e2:	e8 bd fb ff ff       	call   f01031a4 <region_alloc>
 	lcr3(PADDR(kern_pgdir));
-f010361b:	a1 68 49 19 f0       	mov    0xf0194968,%eax
+f01035e7:	a1 68 49 19 f0       	mov    0xf0194968,%eax
 #define PADDR(kva) _paddr(__FILE__, __LINE__, kva)
 
 static inline physaddr_t
 _paddr(const char *file, int line, void *kva)
 {
 	if ((uint32_t)kva < KERNBASE)
-f0103620:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
-f0103625:	77 20                	ja     f0103647 <env_create+0x13f>
+f01035ec:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
+f01035f1:	77 20                	ja     f0103613 <env_create+0x133>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
-f0103627:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f010362b:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
-f0103632:	f0 
-f0103633:	c7 44 24 04 81 01 00 	movl   $0x181,0x4(%esp)
-f010363a:	00 
-f010363b:	c7 04 24 3e 66 10 f0 	movl   $0xf010663e,(%esp)
-f0103642:	e8 6a ca ff ff       	call   f01000b1 <_panic>
+f01035f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f01035f7:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
+f01035fe:	f0 
+f01035ff:	c7 44 24 04 80 01 00 	movl   $0x180,0x4(%esp)
+f0103606:	00 
+f0103607:	c7 04 24 1e 68 10 f0 	movl   $0xf010681e,(%esp)
+f010360e:	e8 9e ca ff ff       	call   f01000b1 <_panic>
 	return (physaddr_t)kva - KERNBASE;
-f0103647:	05 00 00 00 10       	add    $0x10000000,%eax
-f010364c:	0f 22 d8             	mov    %eax,%cr3
-f010364f:	eb 0c                	jmp    f010365d <env_create+0x155>
+f0103613:	05 00 00 00 10       	add    $0x10000000,%eax
+f0103618:	0f 22 d8             	mov    %eax,%cr3
+f010361b:	eb 0c                	jmp    f0103629 <env_create+0x149>
 	if (r == 0) {
 		env->env_type = type;
 		load_icode(env, binary);
 	}
 	else
 		cprintf("create env fails!");
-f0103651:	c7 04 24 c9 66 10 f0 	movl   $0xf01066c9,(%esp)
-f0103658:	e8 2d 03 00 00       	call   f010398a <cprintf>
+f010361d:	c7 04 24 90 68 10 f0 	movl   $0xf0106890,(%esp)
+f0103624:	e8 2d 03 00 00       	call   f0103956 <cprintf>
 }
-f010365d:	83 c4 3c             	add    $0x3c,%esp
-f0103660:	5b                   	pop    %ebx
-f0103661:	5e                   	pop    %esi
-f0103662:	5f                   	pop    %edi
-f0103663:	5d                   	pop    %ebp
-f0103664:	c3                   	ret    
-
-f0103665 <env_free>:
+f0103629:	83 c4 3c             	add    $0x3c,%esp
+f010362c:	5b                   	pop    %ebx
+f010362d:	5e                   	pop    %esi
+f010362e:	5f                   	pop    %edi
+f010362f:	5d                   	pop    %ebp
+f0103630:	c3                   	ret    
+
+f0103631 <env_free>:
 //
 // Frees env e and all memory it uses.
 //
 void
 env_free(struct Env *e)
 {
-f0103665:	55                   	push   %ebp
-f0103666:	89 e5                	mov    %esp,%ebp
-f0103668:	57                   	push   %edi
-f0103669:	56                   	push   %esi
-f010366a:	53                   	push   %ebx
-f010366b:	83 ec 2c             	sub    $0x2c,%esp
-f010366e:	8b 7d 08             	mov    0x8(%ebp),%edi
+f0103631:	55                   	push   %ebp
+f0103632:	89 e5                	mov    %esp,%ebp
+f0103634:	57                   	push   %edi
+f0103635:	56                   	push   %esi
+f0103636:	53                   	push   %ebx
+f0103637:	83 ec 2c             	sub    $0x2c,%esp
+f010363a:	8b 7d 08             	mov    0x8(%ebp),%edi
 	physaddr_t pa;
 
 	// If freeing the current environment, switch to kern_pgdir
 	// before freeing the page directory, just in case the page
 	// gets reused.
 	if (e == curenv)
-f0103671:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
-f0103676:	39 c7                	cmp    %eax,%edi
-f0103678:	75 37                	jne    f01036b1 <env_free+0x4c>
+f010363d:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f0103642:	39 c7                	cmp    %eax,%edi
+f0103644:	75 37                	jne    f010367d <env_free+0x4c>
 		lcr3(PADDR(kern_pgdir));
-f010367a:	8b 15 68 49 19 f0    	mov    0xf0194968,%edx
+f0103646:	8b 15 68 49 19 f0    	mov    0xf0194968,%edx
 #define PADDR(kva) _paddr(__FILE__, __LINE__, kva)
 
 static inline physaddr_t
 _paddr(const char *file, int line, void *kva)
 {
 	if ((uint32_t)kva < KERNBASE)
-f0103680:	81 fa ff ff ff ef    	cmp    $0xefffffff,%edx
-f0103686:	77 20                	ja     f01036a8 <env_free+0x43>
+f010364c:	81 fa ff ff ff ef    	cmp    $0xefffffff,%edx
+f0103652:	77 20                	ja     f0103674 <env_free+0x43>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
-f0103688:	89 54 24 0c          	mov    %edx,0xc(%esp)
-f010368c:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
-f0103693:	f0 
-f0103694:	c7 44 24 04 a9 01 00 	movl   $0x1a9,0x4(%esp)
-f010369b:	00 
-f010369c:	c7 04 24 3e 66 10 f0 	movl   $0xf010663e,(%esp)
-f01036a3:	e8 09 ca ff ff       	call   f01000b1 <_panic>
+f0103654:	89 54 24 0c          	mov    %edx,0xc(%esp)
+f0103658:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
+f010365f:	f0 
+f0103660:	c7 44 24 04 a8 01 00 	movl   $0x1a8,0x4(%esp)
+f0103667:	00 
+f0103668:	c7 04 24 1e 68 10 f0 	movl   $0xf010681e,(%esp)
+f010366f:	e8 3d ca ff ff       	call   f01000b1 <_panic>
 	return (physaddr_t)kva - KERNBASE;
-f01036a8:	81 c2 00 00 00 10    	add    $0x10000000,%edx
-f01036ae:	0f 22 da             	mov    %edx,%cr3
+f0103674:	81 c2 00 00 00 10    	add    $0x10000000,%edx
+f010367a:	0f 22 da             	mov    %edx,%cr3
 
 	// Note the environment's demise.
 	cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
-f01036b1:	8b 57 48             	mov    0x48(%edi),%edx
-f01036b4:	85 c0                	test   %eax,%eax
-f01036b6:	74 05                	je     f01036bd <env_free+0x58>
-f01036b8:	8b 40 48             	mov    0x48(%eax),%eax
-f01036bb:	eb 05                	jmp    f01036c2 <env_free+0x5d>
-f01036bd:	b8 00 00 00 00       	mov    $0x0,%eax
-f01036c2:	89 54 24 08          	mov    %edx,0x8(%esp)
-f01036c6:	89 44 24 04          	mov    %eax,0x4(%esp)
-f01036ca:	c7 04 24 db 66 10 f0 	movl   $0xf01066db,(%esp)
-f01036d1:	e8 b4 02 00 00       	call   f010398a <cprintf>
+f010367d:	8b 57 48             	mov    0x48(%edi),%edx
+f0103680:	85 c0                	test   %eax,%eax
+f0103682:	74 05                	je     f0103689 <env_free+0x58>
+f0103684:	8b 40 48             	mov    0x48(%eax),%eax
+f0103687:	eb 05                	jmp    f010368e <env_free+0x5d>
+f0103689:	b8 00 00 00 00       	mov    $0x0,%eax
+f010368e:	89 54 24 08          	mov    %edx,0x8(%esp)
+f0103692:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103696:	c7 04 24 a2 68 10 f0 	movl   $0xf01068a2,(%esp)
+f010369d:	e8 b4 02 00 00       	call   f0103956 <cprintf>
 
 	// Flush all mapped pages in the user portion of the address space
 	static_assert(UTOP % PTSIZE == 0);
 	for (pdeno = 0; pdeno < PDX(UTOP); pdeno++) {
-f01036d6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-f01036dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
-f01036e0:	c1 e0 02             	shl    $0x2,%eax
-f01036e3:	89 c1                	mov    %eax,%ecx
-f01036e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
+f01036a2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+f01036a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f01036ac:	c1 e0 02             	shl    $0x2,%eax
+f01036af:	89 c1                	mov    %eax,%ecx
+f01036b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
 
 		// only look at mapped page tables
 		if (!(e->env_pgdir[pdeno] & PTE_P))
-f01036e8:	8b 47 5c             	mov    0x5c(%edi),%eax
-f01036eb:	8b 34 08             	mov    (%eax,%ecx,1),%esi
-f01036ee:	f7 c6 01 00 00 00    	test   $0x1,%esi
-f01036f4:	0f 84 b5 00 00 00    	je     f01037af <env_free+0x14a>
+f01036b4:	8b 47 5c             	mov    0x5c(%edi),%eax
+f01036b7:	8b 34 08             	mov    (%eax,%ecx,1),%esi
+f01036ba:	f7 c6 01 00 00 00    	test   $0x1,%esi
+f01036c0:	0f 84 b5 00 00 00    	je     f010377b <env_free+0x14a>
 			continue;
 
 		// find the pa and va of the page table
 		pa = PTE_ADDR(e->env_pgdir[pdeno]);
-f01036fa:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+f01036c6:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
 #define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)
 
 static inline void*
 _kaddr(const char *file, int line, physaddr_t pa)
 {
 	if (PGNUM(pa) >= npages)
-f0103700:	89 f0                	mov    %esi,%eax
-f0103702:	c1 e8 0c             	shr    $0xc,%eax
-f0103705:	89 45 d8             	mov    %eax,-0x28(%ebp)
-f0103708:	3b 05 64 49 19 f0    	cmp    0xf0194964,%eax
-f010370e:	72 20                	jb     f0103730 <env_free+0xcb>
+f01036cc:	89 f0                	mov    %esi,%eax
+f01036ce:	c1 e8 0c             	shr    $0xc,%eax
+f01036d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
+f01036d4:	3b 05 64 49 19 f0    	cmp    0xf0194964,%eax
+f01036da:	72 20                	jb     f01036fc <env_free+0xcb>
 		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
-f0103710:	89 74 24 0c          	mov    %esi,0xc(%esp)
-f0103714:	c7 44 24 08 ac 5d 10 	movl   $0xf0105dac,0x8(%esp)
-f010371b:	f0 
-f010371c:	c7 44 24 04 b8 01 00 	movl   $0x1b8,0x4(%esp)
-f0103723:	00 
-f0103724:	c7 04 24 3e 66 10 f0 	movl   $0xf010663e,(%esp)
-f010372b:	e8 81 c9 ff ff       	call   f01000b1 <_panic>
+f01036dc:	89 74 24 0c          	mov    %esi,0xc(%esp)
+f01036e0:	c7 44 24 08 ec 5f 10 	movl   $0xf0105fec,0x8(%esp)
+f01036e7:	f0 
+f01036e8:	c7 44 24 04 b7 01 00 	movl   $0x1b7,0x4(%esp)
+f01036ef:	00 
+f01036f0:	c7 04 24 1e 68 10 f0 	movl   $0xf010681e,(%esp)
+f01036f7:	e8 b5 c9 ff ff       	call   f01000b1 <_panic>
 		pt = (pte_t*) KADDR(pa);
 
 		// unmap all PTEs in this page table
 		for (pteno = 0; pteno <= PTX(~0); pteno++) {
 			if (pt[pteno] & PTE_P)
 				page_remove(e->env_pgdir, PGADDR(pdeno, pteno, 0));
-f0103730:	8b 45 e0             	mov    -0x20(%ebp),%eax
-f0103733:	c1 e0 16             	shl    $0x16,%eax
-f0103736:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+f01036fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f01036ff:	c1 e0 16             	shl    $0x16,%eax
+f0103702:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 		// find the pa and va of the page table
 		pa = PTE_ADDR(e->env_pgdir[pdeno]);
 		pt = (pte_t*) KADDR(pa);
 
 		// unmap all PTEs in this page table
 		for (pteno = 0; pteno <= PTX(~0); pteno++) {
-f0103739:	bb 00 00 00 00       	mov    $0x0,%ebx
+f0103705:	bb 00 00 00 00       	mov    $0x0,%ebx
 			if (pt[pteno] & PTE_P)
-f010373e:	f6 84 9e 00 00 00 f0 	testb  $0x1,-0x10000000(%esi,%ebx,4)
-f0103745:	01 
-f0103746:	74 17                	je     f010375f <env_free+0xfa>
+f010370a:	f6 84 9e 00 00 00 f0 	testb  $0x1,-0x10000000(%esi,%ebx,4)
+f0103711:	01 
+f0103712:	74 17                	je     f010372b <env_free+0xfa>
 				page_remove(e->env_pgdir, PGADDR(pdeno, pteno, 0));
-f0103748:	89 d8                	mov    %ebx,%eax
-f010374a:	c1 e0 0c             	shl    $0xc,%eax
-f010374d:	0b 45 e4             	or     -0x1c(%ebp),%eax
-f0103750:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103754:	8b 47 5c             	mov    0x5c(%edi),%eax
-f0103757:	89 04 24             	mov    %eax,(%esp)
-f010375a:	e8 43 df ff ff       	call   f01016a2 <page_remove>
+f0103714:	89 d8                	mov    %ebx,%eax
+f0103716:	c1 e0 0c             	shl    $0xc,%eax
+f0103719:	0b 45 e4             	or     -0x1c(%ebp),%eax
+f010371c:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103720:	8b 47 5c             	mov    0x5c(%edi),%eax
+f0103723:	89 04 24             	mov    %eax,(%esp)
+f0103726:	e8 77 df ff ff       	call   f01016a2 <page_remove>
 		// find the pa and va of the page table
 		pa = PTE_ADDR(e->env_pgdir[pdeno]);
 		pt = (pte_t*) KADDR(pa);
 
 		// unmap all PTEs in this page table
 		for (pteno = 0; pteno <= PTX(~0); pteno++) {
-f010375f:	43                   	inc    %ebx
-f0103760:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
-f0103766:	75 d6                	jne    f010373e <env_free+0xd9>
+f010372b:	43                   	inc    %ebx
+f010372c:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
+f0103732:	75 d6                	jne    f010370a <env_free+0xd9>
 			if (pt[pteno] & PTE_P)
 				page_remove(e->env_pgdir, PGADDR(pdeno, pteno, 0));
 		}
 
 		// free the page table itself
 		e->env_pgdir[pdeno] = 0;
-f0103768:	8b 47 5c             	mov    0x5c(%edi),%eax
-f010376b:	8b 55 dc             	mov    -0x24(%ebp),%edx
-f010376e:	c7 04 10 00 00 00 00 	movl   $0x0,(%eax,%edx,1)
+f0103734:	8b 47 5c             	mov    0x5c(%edi),%eax
+f0103737:	8b 55 dc             	mov    -0x24(%ebp),%edx
+f010373a:	c7 04 10 00 00 00 00 	movl   $0x0,(%eax,%edx,1)
 }
 
 static inline struct PageInfo*
 pa2page(physaddr_t pa)
 {
 	if (PGNUM(pa) >= npages)
-f0103775:	8b 45 d8             	mov    -0x28(%ebp),%eax
-f0103778:	3b 05 64 49 19 f0    	cmp    0xf0194964,%eax
-f010377e:	72 1c                	jb     f010379c <env_free+0x137>
+f0103741:	8b 45 d8             	mov    -0x28(%ebp),%eax
+f0103744:	3b 05 64 49 19 f0    	cmp    0xf0194964,%eax
+f010374a:	72 1c                	jb     f0103768 <env_free+0x137>
 		panic("pa2page called with invalid pa");
-f0103780:	c7 44 24 08 00 5f 10 	movl   $0xf0105f00,0x8(%esp)
-f0103787:	f0 
-f0103788:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
-f010378f:	00 
-f0103790:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
-f0103797:	e8 15 c9 ff ff       	call   f01000b1 <_panic>
+f010374c:	c7 44 24 08 40 61 10 	movl   $0xf0106140,0x8(%esp)
+f0103753:	f0 
+f0103754:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
+f010375b:	00 
+f010375c:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
+f0103763:	e8 49 c9 ff ff       	call   f01000b1 <_panic>
 	return &pages[PGNUM(pa)];
-f010379c:	a1 6c 49 19 f0       	mov    0xf019496c,%eax
-f01037a1:	8b 55 d8             	mov    -0x28(%ebp),%edx
-f01037a4:	8d 04 d0             	lea    (%eax,%edx,8),%eax
+f0103768:	a1 6c 49 19 f0       	mov    0xf019496c,%eax
+f010376d:	8b 55 d8             	mov    -0x28(%ebp),%edx
+f0103770:	8d 04 d0             	lea    (%eax,%edx,8),%eax
 		page_decref(pa2page(pa));
-f01037a7:	89 04 24             	mov    %eax,(%esp)
-f01037aa:	e8 d5 dc ff ff       	call   f0101484 <page_decref>
+f0103773:	89 04 24             	mov    %eax,(%esp)
+f0103776:	e8 09 dd ff ff       	call   f0101484 <page_decref>
 	// Note the environment's demise.
 	cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
 
 	// Flush all mapped pages in the user portion of the address space
 	static_assert(UTOP % PTSIZE == 0);
 	for (pdeno = 0; pdeno < PDX(UTOP); pdeno++) {
-f01037af:	ff 45 e0             	incl   -0x20(%ebp)
-f01037b2:	81 7d e0 bb 03 00 00 	cmpl   $0x3bb,-0x20(%ebp)
-f01037b9:	0f 85 1e ff ff ff    	jne    f01036dd <env_free+0x78>
+f010377b:	ff 45 e0             	incl   -0x20(%ebp)
+f010377e:	81 7d e0 bb 03 00 00 	cmpl   $0x3bb,-0x20(%ebp)
+f0103785:	0f 85 1e ff ff ff    	jne    f01036a9 <env_free+0x78>
 		e->env_pgdir[pdeno] = 0;
 		page_decref(pa2page(pa));
 	}
 
 	// free the page directory
 	pa = PADDR(e->env_pgdir);
-f01037bf:	8b 47 5c             	mov    0x5c(%edi),%eax
+f010378b:	8b 47 5c             	mov    0x5c(%edi),%eax
 #define PADDR(kva) _paddr(__FILE__, __LINE__, kva)
 
 static inline physaddr_t
 _paddr(const char *file, int line, void *kva)
 {
 	if ((uint32_t)kva < KERNBASE)
-f01037c2:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
-f01037c7:	77 20                	ja     f01037e9 <env_free+0x184>
+f010378e:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
+f0103793:	77 20                	ja     f01037b5 <env_free+0x184>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
-f01037c9:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f01037cd:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
-f01037d4:	f0 
-f01037d5:	c7 44 24 04 c6 01 00 	movl   $0x1c6,0x4(%esp)
-f01037dc:	00 
-f01037dd:	c7 04 24 3e 66 10 f0 	movl   $0xf010663e,(%esp)
-f01037e4:	e8 c8 c8 ff ff       	call   f01000b1 <_panic>
+f0103795:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f0103799:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
+f01037a0:	f0 
+f01037a1:	c7 44 24 04 c5 01 00 	movl   $0x1c5,0x4(%esp)
+f01037a8:	00 
+f01037a9:	c7 04 24 1e 68 10 f0 	movl   $0xf010681e,(%esp)
+f01037b0:	e8 fc c8 ff ff       	call   f01000b1 <_panic>
 	e->env_pgdir = 0;
-f01037e9:	c7 47 5c 00 00 00 00 	movl   $0x0,0x5c(%edi)
+f01037b5:	c7 47 5c 00 00 00 00 	movl   $0x0,0x5c(%edi)
 	return (physaddr_t)kva - KERNBASE;
-f01037f0:	05 00 00 00 10       	add    $0x10000000,%eax
+f01037bc:	05 00 00 00 10       	add    $0x10000000,%eax
 }
 
 static inline struct PageInfo*
 pa2page(physaddr_t pa)
 {
 	if (PGNUM(pa) >= npages)
-f01037f5:	c1 e8 0c             	shr    $0xc,%eax
-f01037f8:	3b 05 64 49 19 f0    	cmp    0xf0194964,%eax
-f01037fe:	72 1c                	jb     f010381c <env_free+0x1b7>
+f01037c1:	c1 e8 0c             	shr    $0xc,%eax
+f01037c4:	3b 05 64 49 19 f0    	cmp    0xf0194964,%eax
+f01037ca:	72 1c                	jb     f01037e8 <env_free+0x1b7>
 		panic("pa2page called with invalid pa");
-f0103800:	c7 44 24 08 00 5f 10 	movl   $0xf0105f00,0x8(%esp)
-f0103807:	f0 
-f0103808:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
-f010380f:	00 
-f0103810:	c7 04 24 16 5a 10 f0 	movl   $0xf0105a16,(%esp)
-f0103817:	e8 95 c8 ff ff       	call   f01000b1 <_panic>
+f01037cc:	c7 44 24 08 40 61 10 	movl   $0xf0106140,0x8(%esp)
+f01037d3:	f0 
+f01037d4:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
+f01037db:	00 
+f01037dc:	c7 04 24 56 5c 10 f0 	movl   $0xf0105c56,(%esp)
+f01037e3:	e8 c9 c8 ff ff       	call   f01000b1 <_panic>
 	return &pages[PGNUM(pa)];
-f010381c:	8b 15 6c 49 19 f0    	mov    0xf019496c,%edx
-f0103822:	8d 04 c2             	lea    (%edx,%eax,8),%eax
+f01037e8:	8b 15 6c 49 19 f0    	mov    0xf019496c,%edx
+f01037ee:	8d 04 c2             	lea    (%edx,%eax,8),%eax
 	page_decref(pa2page(pa));
-f0103825:	89 04 24             	mov    %eax,(%esp)
-f0103828:	e8 57 dc ff ff       	call   f0101484 <page_decref>
+f01037f1:	89 04 24             	mov    %eax,(%esp)
+f01037f4:	e8 8b dc ff ff       	call   f0101484 <page_decref>
 
 	// return the environment to the free list
 	e->env_status = ENV_FREE;
-f010382d:	c7 47 54 00 00 00 00 	movl   $0x0,0x54(%edi)
+f01037f9:	c7 47 54 00 00 00 00 	movl   $0x0,0x54(%edi)
 	e->env_link = env_free_list;
-f0103834:	a1 ac 3c 19 f0       	mov    0xf0193cac,%eax
-f0103839:	89 47 44             	mov    %eax,0x44(%edi)
+f0103800:	a1 ac 3c 19 f0       	mov    0xf0193cac,%eax
+f0103805:	89 47 44             	mov    %eax,0x44(%edi)
 	env_free_list = e;
-f010383c:	89 3d ac 3c 19 f0    	mov    %edi,0xf0193cac
+f0103808:	89 3d ac 3c 19 f0    	mov    %edi,0xf0193cac
 }
-f0103842:	83 c4 2c             	add    $0x2c,%esp
-f0103845:	5b                   	pop    %ebx
-f0103846:	5e                   	pop    %esi
-f0103847:	5f                   	pop    %edi
-f0103848:	5d                   	pop    %ebp
-f0103849:	c3                   	ret    
-
-f010384a <env_destroy>:
+f010380e:	83 c4 2c             	add    $0x2c,%esp
+f0103811:	5b                   	pop    %ebx
+f0103812:	5e                   	pop    %esi
+f0103813:	5f                   	pop    %edi
+f0103814:	5d                   	pop    %ebp
+f0103815:	c3                   	ret    
+
+f0103816 <env_destroy>:
 //
 // Frees environment e.
 //
 void
 env_destroy(struct Env *e)
 {
-f010384a:	55                   	push   %ebp
-f010384b:	89 e5                	mov    %esp,%ebp
-f010384d:	83 ec 18             	sub    $0x18,%esp
+f0103816:	55                   	push   %ebp
+f0103817:	89 e5                	mov    %esp,%ebp
+f0103819:	83 ec 18             	sub    $0x18,%esp
 	env_free(e);
-f0103850:	8b 45 08             	mov    0x8(%ebp),%eax
-f0103853:	89 04 24             	mov    %eax,(%esp)
-f0103856:	e8 0a fe ff ff       	call   f0103665 <env_free>
+f010381c:	8b 45 08             	mov    0x8(%ebp),%eax
+f010381f:	89 04 24             	mov    %eax,(%esp)
+f0103822:	e8 0a fe ff ff       	call   f0103631 <env_free>
 
 	cprintf("Destroyed the only environment - nothing more to do!\n");
-f010385b:	c7 04 24 f0 65 10 f0 	movl   $0xf01065f0,(%esp)
-f0103862:	e8 23 01 00 00       	call   f010398a <cprintf>
+f0103827:	c7 04 24 d0 68 10 f0 	movl   $0xf01068d0,(%esp)
+f010382e:	e8 23 01 00 00       	call   f0103956 <cprintf>
 	while (1)
 		monitor(NULL);
-f0103867:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-f010386e:	e8 f9 d4 ff ff       	call   f0100d6c <monitor>
-f0103873:	eb f2                	jmp    f0103867 <env_destroy+0x1d>
+f0103833:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+f010383a:	e8 2d d5 ff ff       	call   f0100d6c <monitor>
+f010383f:	eb f2                	jmp    f0103833 <env_destroy+0x1d>
 
-f0103875 <env_pop_tf>:
+f0103841 <env_pop_tf>:
 //
 // This function does not return.
 //
 void
 env_pop_tf(struct Trapframe *tf)
 {
-f0103875:	55                   	push   %ebp
-f0103876:	89 e5                	mov    %esp,%ebp
-f0103878:	83 ec 18             	sub    $0x18,%esp
+f0103841:	55                   	push   %ebp
+f0103842:	89 e5                	mov    %esp,%ebp
+f0103844:	83 ec 18             	sub    $0x18,%esp
 	__asm __volatile("movl %0,%%esp\n"
-f010387b:	8b 65 08             	mov    0x8(%ebp),%esp
-f010387e:	61                   	popa   
-f010387f:	07                   	pop    %es
-f0103880:	1f                   	pop    %ds
-f0103881:	83 c4 08             	add    $0x8,%esp
-f0103884:	cf                   	iret   
+f0103847:	8b 65 08             	mov    0x8(%ebp),%esp
+f010384a:	61                   	popa   
+f010384b:	07                   	pop    %es
+f010384c:	1f                   	pop    %ds
+f010384d:	83 c4 08             	add    $0x8,%esp
+f0103850:	cf                   	iret   
 		"\tpopl %%es\n"
 		"\tpopl %%ds\n"
 		"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
 		"\tiret"
 		: : "g" (tf) : "memory");
 	panic("iret failed");  /* mostly to placate the compiler */
-f0103885:	c7 44 24 08 f1 66 10 	movl   $0xf01066f1,0x8(%esp)
-f010388c:	f0 
-f010388d:	c7 44 24 04 ee 01 00 	movl   $0x1ee,0x4(%esp)
-f0103894:	00 
-f0103895:	c7 04 24 3e 66 10 f0 	movl   $0xf010663e,(%esp)
-f010389c:	e8 10 c8 ff ff       	call   f01000b1 <_panic>
-
-f01038a1 <env_run>:
+f0103851:	c7 44 24 08 b8 68 10 	movl   $0xf01068b8,0x8(%esp)
+f0103858:	f0 
+f0103859:	c7 44 24 04 ed 01 00 	movl   $0x1ed,0x4(%esp)
+f0103860:	00 
+f0103861:	c7 04 24 1e 68 10 f0 	movl   $0xf010681e,(%esp)
+f0103868:	e8 44 c8 ff ff       	call   f01000b1 <_panic>
+
+f010386d <env_run>:
 //
 // This function does not return.
 //
 void
 env_run(struct Env *e)
 {
-f01038a1:	55                   	push   %ebp
-f01038a2:	89 e5                	mov    %esp,%ebp
-f01038a4:	53                   	push   %ebx
-f01038a5:	83 ec 14             	sub    $0x14,%esp
-f01038a8:	8b 5d 08             	mov    0x8(%ebp),%ebx
+f010386d:	55                   	push   %ebp
+f010386e:	89 e5                	mov    %esp,%ebp
+f0103870:	53                   	push   %ebx
+f0103871:	83 ec 14             	sub    $0x14,%esp
+f0103874:	8b 5d 08             	mov    0x8(%ebp),%ebx
 	cprintf("env_run!\n");
-f01038ab:	c7 04 24 fd 66 10 f0 	movl   $0xf01066fd,(%esp)
-f01038b2:	e8 d3 00 00 00       	call   f010398a <cprintf>
+f0103877:	c7 04 24 c4 68 10 f0 	movl   $0xf01068c4,(%esp)
+f010387e:	e8 d3 00 00 00       	call   f0103956 <cprintf>
 	// Hint: This function loads the new environment's state from
 	//	e->env_tf.  Go back through the code you wrote above
 	//	and make sure you have set the relevant parts of
 	//	e->env_tf to sensible values.
 
 	if (curenv) 
-f01038b7:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
-f01038bc:	85 c0                	test   %eax,%eax
-f01038be:	74 07                	je     f01038c7 <env_run+0x26>
+f0103883:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f0103888:	85 c0                	test   %eax,%eax
+f010388a:	74 07                	je     f0103893 <env_run+0x26>
 		curenv->env_status = ENV_RUNNABLE;
-f01038c0:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
+f010388c:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
 
 	curenv = e;
-f01038c7:	89 1d a4 3c 19 f0    	mov    %ebx,0xf0193ca4
+f0103893:	89 1d a4 3c 19 f0    	mov    %ebx,0xf0193ca4
 	curenv->env_status = ENV_RUNNING;
-f01038cd:	c7 43 54 03 00 00 00 	movl   $0x3,0x54(%ebx)
+f0103899:	c7 43 54 03 00 00 00 	movl   $0x3,0x54(%ebx)
 	curenv->env_runs++;
-f01038d4:	ff 43 58             	incl   0x58(%ebx)
+f01038a0:	ff 43 58             	incl   0x58(%ebx)
 	lcr3(PADDR(curenv->env_pgdir));
-f01038d7:	8b 43 5c             	mov    0x5c(%ebx),%eax
+f01038a3:	8b 43 5c             	mov    0x5c(%ebx),%eax
 #define PADDR(kva) _paddr(__FILE__, __LINE__, kva)
 
 static inline physaddr_t
 _paddr(const char *file, int line, void *kva)
 {
 	if ((uint32_t)kva < KERNBASE)
-f01038da:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
-f01038df:	77 20                	ja     f0103901 <env_run+0x60>
+f01038a6:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
+f01038ab:	77 20                	ja     f01038cd <env_run+0x60>
 		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
-f01038e1:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f01038e5:	c7 44 24 08 90 5f 10 	movl   $0xf0105f90,0x8(%esp)
-f01038ec:	f0 
-f01038ed:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
-f01038f4:	00 
-f01038f5:	c7 04 24 3e 66 10 f0 	movl   $0xf010663e,(%esp)
-f01038fc:	e8 b0 c7 ff ff       	call   f01000b1 <_panic>
+f01038ad:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f01038b1:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
+f01038b8:	f0 
+f01038b9:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
+f01038c0:	00 
+f01038c1:	c7 04 24 1e 68 10 f0 	movl   $0xf010681e,(%esp)
+f01038c8:	e8 e4 c7 ff ff       	call   f01000b1 <_panic>
 	return (physaddr_t)kva - KERNBASE;
-f0103901:	05 00 00 00 10       	add    $0x10000000,%eax
-f0103906:	0f 22 d8             	mov    %eax,%cr3
+f01038cd:	05 00 00 00 10       	add    $0x10000000,%eax
+f01038d2:	0f 22 d8             	mov    %eax,%cr3
 	env_pop_tf(&curenv->env_tf);
-f0103909:	89 1c 24             	mov    %ebx,(%esp)
-f010390c:	e8 64 ff ff ff       	call   f0103875 <env_pop_tf>
-f0103911:	66 90                	xchg   %ax,%ax
-f0103913:	90                   	nop
+f01038d5:	89 1c 24             	mov    %ebx,(%esp)
+f01038d8:	e8 64 ff ff ff       	call   f0103841 <env_pop_tf>
+f01038dd:	66 90                	xchg   %ax,%ax
+f01038df:	90                   	nop
 
-f0103914 <mc146818_read>:
+f01038e0 <mc146818_read>:
 #include <kern/kclock.h>
 
 
 unsigned
 mc146818_read(unsigned reg)
 {
-f0103914:	55                   	push   %ebp
-f0103915:	89 e5                	mov    %esp,%ebp
-f0103917:	31 c0                	xor    %eax,%eax
-f0103919:	8a 45 08             	mov    0x8(%ebp),%al
+f01038e0:	55                   	push   %ebp
+f01038e1:	89 e5                	mov    %esp,%ebp
+f01038e3:	31 c0                	xor    %eax,%eax
+f01038e5:	8a 45 08             	mov    0x8(%ebp),%al
 }
 
 static __inline void
 outb(int port, uint8_t data)
 {
 	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
-f010391c:	ba 70 00 00 00       	mov    $0x70,%edx
-f0103921:	ee                   	out    %al,(%dx)
+f01038e8:	ba 70 00 00 00       	mov    $0x70,%edx
+f01038ed:	ee                   	out    %al,(%dx)
 
 static __inline uint8_t
 inb(int port)
 {
 	uint8_t data;
 	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
-f0103922:	b2 71                	mov    $0x71,%dl
-f0103924:	ec                   	in     (%dx),%al
+f01038ee:	b2 71                	mov    $0x71,%dl
+f01038f0:	ec                   	in     (%dx),%al
 	outb(IO_RTC, reg);
 	return inb(IO_RTC+1);
-f0103925:	25 ff 00 00 00       	and    $0xff,%eax
+f01038f1:	25 ff 00 00 00       	and    $0xff,%eax
 }
-f010392a:	5d                   	pop    %ebp
-f010392b:	c3                   	ret    
+f01038f6:	5d                   	pop    %ebp
+f01038f7:	c3                   	ret    
 
-f010392c <mc146818_write>:
+f01038f8 <mc146818_write>:
 
 void
 mc146818_write(unsigned reg, unsigned datum)
 {
-f010392c:	55                   	push   %ebp
-f010392d:	89 e5                	mov    %esp,%ebp
-f010392f:	31 c0                	xor    %eax,%eax
-f0103931:	8a 45 08             	mov    0x8(%ebp),%al
+f01038f8:	55                   	push   %ebp
+f01038f9:	89 e5                	mov    %esp,%ebp
+f01038fb:	31 c0                	xor    %eax,%eax
+f01038fd:	8a 45 08             	mov    0x8(%ebp),%al
 }
 
 static __inline void
 outb(int port, uint8_t data)
 {
 	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
-f0103934:	ba 70 00 00 00       	mov    $0x70,%edx
-f0103939:	ee                   	out    %al,(%dx)
-f010393a:	b2 71                	mov    $0x71,%dl
-f010393c:	8b 45 0c             	mov    0xc(%ebp),%eax
-f010393f:	ee                   	out    %al,(%dx)
+f0103900:	ba 70 00 00 00       	mov    $0x70,%edx
+f0103905:	ee                   	out    %al,(%dx)
+f0103906:	b2 71                	mov    $0x71,%dl
+f0103908:	8b 45 0c             	mov    0xc(%ebp),%eax
+f010390b:	ee                   	out    %al,(%dx)
 	outb(IO_RTC, reg);
 	outb(IO_RTC+1, datum);
 }
-f0103940:	5d                   	pop    %ebp
-f0103941:	c3                   	ret    
-f0103942:	66 90                	xchg   %ax,%ax
+f010390c:	5d                   	pop    %ebp
+f010390d:	c3                   	ret    
+f010390e:	66 90                	xchg   %ax,%ax
 
-f0103944 <putch>:
+f0103910 <putch>:
 #include <inc/stdarg.h>
 
 
 static void
 putch(int ch, int *cnt)
 {
-f0103944:	55                   	push   %ebp
-f0103945:	89 e5                	mov    %esp,%ebp
-f0103947:	83 ec 18             	sub    $0x18,%esp
+f0103910:	55                   	push   %ebp
+f0103911:	89 e5                	mov    %esp,%ebp
+f0103913:	83 ec 18             	sub    $0x18,%esp
 	cputchar(ch);
-f010394a:	8b 45 08             	mov    0x8(%ebp),%eax
-f010394d:	89 04 24             	mov    %eax,(%esp)
-f0103950:	e8 c0 cc ff ff       	call   f0100615 <cputchar>
+f0103916:	8b 45 08             	mov    0x8(%ebp),%eax
+f0103919:	89 04 24             	mov    %eax,(%esp)
+f010391c:	e8 f4 cc ff ff       	call   f0100615 <cputchar>
 	*cnt++;
 }
-f0103955:	c9                   	leave  
-f0103956:	c3                   	ret    
+f0103921:	c9                   	leave  
+f0103922:	c3                   	ret    
 
-f0103957 <vcprintf>:
+f0103923 <vcprintf>:
 
 int
 vcprintf(const char *fmt, va_list ap)
 {
-f0103957:	55                   	push   %ebp
-f0103958:	89 e5                	mov    %esp,%ebp
-f010395a:	83 ec 28             	sub    $0x28,%esp
+f0103923:	55                   	push   %ebp
+f0103924:	89 e5                	mov    %esp,%ebp
+f0103926:	83 ec 28             	sub    $0x28,%esp
 	int cnt = 0;
-f010395d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+f0103929:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 
 	vprintfmt((void*)putch, &cnt, fmt, ap);
-f0103964:	8b 45 0c             	mov    0xc(%ebp),%eax
-f0103967:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f010396b:	8b 45 08             	mov    0x8(%ebp),%eax
-f010396e:	89 44 24 08          	mov    %eax,0x8(%esp)
-f0103972:	8d 45 f4             	lea    -0xc(%ebp),%eax
-f0103975:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103979:	c7 04 24 44 39 10 f0 	movl   $0xf0103944,(%esp)
-f0103980:	e8 72 0c 00 00       	call   f01045f7 <vprintfmt>
+f0103930:	8b 45 0c             	mov    0xc(%ebp),%eax
+f0103933:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f0103937:	8b 45 08             	mov    0x8(%ebp),%eax
+f010393a:	89 44 24 08          	mov    %eax,0x8(%esp)
+f010393e:	8d 45 f4             	lea    -0xc(%ebp),%eax
+f0103941:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103945:	c7 04 24 10 39 10 f0 	movl   $0xf0103910,(%esp)
+f010394c:	e8 ee 0e 00 00       	call   f010483f <vprintfmt>
 	return cnt;
 }
-f0103985:	8b 45 f4             	mov    -0xc(%ebp),%eax
-f0103988:	c9                   	leave  
-f0103989:	c3                   	ret    
+f0103951:	8b 45 f4             	mov    -0xc(%ebp),%eax
+f0103954:	c9                   	leave  
+f0103955:	c3                   	ret    
 
-f010398a <cprintf>:
+f0103956 <cprintf>:
 
 int
 cprintf(const char *fmt, ...)
 {
-f010398a:	55                   	push   %ebp
-f010398b:	89 e5                	mov    %esp,%ebp
-f010398d:	83 ec 18             	sub    $0x18,%esp
+f0103956:	55                   	push   %ebp
+f0103957:	89 e5                	mov    %esp,%ebp
+f0103959:	83 ec 18             	sub    $0x18,%esp
 	va_list ap;
 	int cnt;
 
 	va_start(ap, fmt);
-f0103990:	8d 45 0c             	lea    0xc(%ebp),%eax
+f010395c:	8d 45 0c             	lea    0xc(%ebp),%eax
 	cnt = vcprintf(fmt, ap);
-f0103993:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103997:	8b 45 08             	mov    0x8(%ebp),%eax
-f010399a:	89 04 24             	mov    %eax,(%esp)
-f010399d:	e8 b5 ff ff ff       	call   f0103957 <vcprintf>
+f010395f:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103963:	8b 45 08             	mov    0x8(%ebp),%eax
+f0103966:	89 04 24             	mov    %eax,(%esp)
+f0103969:	e8 b5 ff ff ff       	call   f0103923 <vcprintf>
 	va_end(ap);
 
 	return cnt;
 }
-f01039a2:	c9                   	leave  
-f01039a3:	c3                   	ret    
+f010396e:	c9                   	leave  
+f010396f:	c3                   	ret    
 
-f01039a4 <trap_init_percpu>:
+f0103970 <trap_init_percpu>:
 }
 
 // Initialize and load the per-CPU TSS and IDT
 void
 trap_init_percpu(void)
 {
-f01039a4:	55                   	push   %ebp
-f01039a5:	89 e5                	mov    %esp,%ebp
+f0103970:	55                   	push   %ebp
+f0103971:	89 e5                	mov    %esp,%ebp
 	// Setup a TSS so that we get the right stack
 	// when we trap to the kernel.
 	ts.ts_esp0 = KSTACKTOP;
-f01039a7:	c7 05 e4 44 19 f0 00 	movl   $0xf0000000,0xf01944e4
-f01039ae:	00 00 f0 
+f0103973:	c7 05 e4 44 19 f0 00 	movl   $0xf0000000,0xf01944e4
+f010397a:	00 00 f0 
 	ts.ts_ss0 = GD_KD;
-f01039b1:	66 c7 05 e8 44 19 f0 	movw   $0x10,0xf01944e8
-f01039b8:	10 00 
+f010397d:	66 c7 05 e8 44 19 f0 	movw   $0x10,0xf01944e8
+f0103984:	10 00 
 
 	// Initialize the TSS slot of the gdt.
 	gdt[GD_TSS0 >> 3] = SEG16(STS_T32A, (uint32_t) (&ts),
-f01039ba:	66 c7 05 48 c3 11 f0 	movw   $0x67,0xf011c348
-f01039c1:	67 00 
-f01039c3:	b8 e0 44 19 f0       	mov    $0xf01944e0,%eax
-f01039c8:	66 a3 4a c3 11 f0    	mov    %ax,0xf011c34a
-f01039ce:	89 c2                	mov    %eax,%edx
-f01039d0:	c1 ea 10             	shr    $0x10,%edx
-f01039d3:	88 15 4c c3 11 f0    	mov    %dl,0xf011c34c
-f01039d9:	c6 05 4e c3 11 f0 40 	movb   $0x40,0xf011c34e
-f01039e0:	c1 e8 18             	shr    $0x18,%eax
-f01039e3:	a2 4f c3 11 f0       	mov    %al,0xf011c34f
+f0103986:	66 c7 05 48 c3 11 f0 	movw   $0x67,0xf011c348
+f010398d:	67 00 
+f010398f:	b8 e0 44 19 f0       	mov    $0xf01944e0,%eax
+f0103994:	66 a3 4a c3 11 f0    	mov    %ax,0xf011c34a
+f010399a:	89 c2                	mov    %eax,%edx
+f010399c:	c1 ea 10             	shr    $0x10,%edx
+f010399f:	88 15 4c c3 11 f0    	mov    %dl,0xf011c34c
+f01039a5:	c6 05 4e c3 11 f0 40 	movb   $0x40,0xf011c34e
+f01039ac:	c1 e8 18             	shr    $0x18,%eax
+f01039af:	a2 4f c3 11 f0       	mov    %al,0xf011c34f
 					sizeof(struct Taskstate) - 1, 0);
 	gdt[GD_TSS0 >> 3].sd_s = 0;
-f01039e8:	c6 05 4d c3 11 f0 89 	movb   $0x89,0xf011c34d
+f01039b4:	c6 05 4d c3 11 f0 89 	movb   $0x89,0xf011c34d
 }
 
 static __inline void
 ltr(uint16_t sel)
 {
 	__asm __volatile("ltr %0" : : "r" (sel));
-f01039ef:	b8 28 00 00 00       	mov    $0x28,%eax
-f01039f4:	0f 00 d8             	ltr    %ax
+f01039bb:	b8 28 00 00 00       	mov    $0x28,%eax
+f01039c0:	0f 00 d8             	ltr    %ax
 }
 
 static __inline void
 lidt(void *p)
 {
 	__asm __volatile("lidt (%0)" : : "r" (p));
-f01039f7:	b8 50 c3 11 f0       	mov    $0xf011c350,%eax
-f01039fc:	0f 01 18             	lidtl  (%eax)
+f01039c3:	b8 50 c3 11 f0       	mov    $0xf011c350,%eax
+f01039c8:	0f 01 18             	lidtl  (%eax)
 	// bottom three bits are special; we leave them 0)
 	ltr(GD_TSS0);
 
 	// Load the IDT
 	lidt(&idt_pd);
 }
-f01039ff:	5d                   	pop    %ebp
-f0103a00:	c3                   	ret    
+f01039cb:	5d                   	pop    %ebp
+f01039cc:	c3                   	ret    
 
-f0103a01 <trap_init>:
+f01039cd <trap_init>:
 	return "(unknown trap)";
 }
 
 void
 trap_init(void)
 {
-f0103a01:	55                   	push   %ebp
-f0103a02:	89 e5                	mov    %esp,%ebp
+f01039cd:	55                   	push   %ebp
+f01039ce:	89 e5                	mov    %esp,%ebp
 	NAME(H_T_ALIGN  );
 	NAME(H_T_MCHK   );
 	NAME(H_T_SIMDERR);
-	//NAME(H_T_SYSCALL);
+	NAME(H_T_SYSCALL);
 
 	SETGATE(idt[0] , 0, GD_KT, H_T_DIVIDE , 0);
-f0103a04:	b8 a0 40 10 f0       	mov    $0xf01040a0,%eax
-f0103a09:	66 a3 c0 3c 19 f0    	mov    %ax,0xf0193cc0
-f0103a0f:	66 c7 05 c2 3c 19 f0 	movw   $0x8,0xf0193cc2
-f0103a16:	08 00 
-f0103a18:	c6 05 c4 3c 19 f0 00 	movb   $0x0,0xf0193cc4
-f0103a1f:	c6 05 c5 3c 19 f0 8e 	movb   $0x8e,0xf0193cc5
-f0103a26:	c1 e8 10             	shr    $0x10,%eax
-f0103a29:	66 a3 c6 3c 19 f0    	mov    %ax,0xf0193cc6
+f01039d0:	b8 60 41 10 f0       	mov    $0xf0104160,%eax
+f01039d5:	66 a3 c0 3c 19 f0    	mov    %ax,0xf0193cc0
+f01039db:	66 c7 05 c2 3c 19 f0 	movw   $0x8,0xf0193cc2
+f01039e2:	08 00 
+f01039e4:	c6 05 c4 3c 19 f0 00 	movb   $0x0,0xf0193cc4
+f01039eb:	c6 05 c5 3c 19 f0 8e 	movb   $0x8e,0xf0193cc5
+f01039f2:	c1 e8 10             	shr    $0x10,%eax
+f01039f5:	66 a3 c6 3c 19 f0    	mov    %ax,0xf0193cc6
 	SETGATE(idt[1] , 0, GD_KT, H_T_DEBUG  , 0);
-f0103a2f:	b8 a6 40 10 f0       	mov    $0xf01040a6,%eax
-f0103a34:	66 a3 c8 3c 19 f0    	mov    %ax,0xf0193cc8
-f0103a3a:	66 c7 05 ca 3c 19 f0 	movw   $0x8,0xf0193cca
-f0103a41:	08 00 
-f0103a43:	c6 05 cc 3c 19 f0 00 	movb   $0x0,0xf0193ccc
-f0103a4a:	c6 05 cd 3c 19 f0 8e 	movb   $0x8e,0xf0193ccd
-f0103a51:	c1 e8 10             	shr    $0x10,%eax
-f0103a54:	66 a3 ce 3c 19 f0    	mov    %ax,0xf0193cce
+f01039fb:	b8 66 41 10 f0       	mov    $0xf0104166,%eax
+f0103a00:	66 a3 c8 3c 19 f0    	mov    %ax,0xf0193cc8
+f0103a06:	66 c7 05 ca 3c 19 f0 	movw   $0x8,0xf0193cca
+f0103a0d:	08 00 
+f0103a0f:	c6 05 cc 3c 19 f0 00 	movb   $0x0,0xf0193ccc
+f0103a16:	c6 05 cd 3c 19 f0 8e 	movb   $0x8e,0xf0193ccd
+f0103a1d:	c1 e8 10             	shr    $0x10,%eax
+f0103a20:	66 a3 ce 3c 19 f0    	mov    %ax,0xf0193cce
 	SETGATE(idt[2] , 0, GD_KT, H_T_NMI    , 0);
-f0103a5a:	b8 ac 40 10 f0       	mov    $0xf01040ac,%eax
-f0103a5f:	66 a3 d0 3c 19 f0    	mov    %ax,0xf0193cd0
-f0103a65:	66 c7 05 d2 3c 19 f0 	movw   $0x8,0xf0193cd2
-f0103a6c:	08 00 
-f0103a6e:	c6 05 d4 3c 19 f0 00 	movb   $0x0,0xf0193cd4
-f0103a75:	c6 05 d5 3c 19 f0 8e 	movb   $0x8e,0xf0193cd5
-f0103a7c:	c1 e8 10             	shr    $0x10,%eax
-f0103a7f:	66 a3 d6 3c 19 f0    	mov    %ax,0xf0193cd6
-	SETGATE(idt[3] , 0, GD_KT, H_T_BRKPT  , 0);
-f0103a85:	b8 b2 40 10 f0       	mov    $0xf01040b2,%eax
-f0103a8a:	66 a3 d8 3c 19 f0    	mov    %ax,0xf0193cd8
-f0103a90:	66 c7 05 da 3c 19 f0 	movw   $0x8,0xf0193cda
-f0103a97:	08 00 
-f0103a99:	c6 05 dc 3c 19 f0 00 	movb   $0x0,0xf0193cdc
-f0103aa0:	c6 05 dd 3c 19 f0 8e 	movb   $0x8e,0xf0193cdd
-f0103aa7:	c1 e8 10             	shr    $0x10,%eax
-f0103aaa:	66 a3 de 3c 19 f0    	mov    %ax,0xf0193cde
+f0103a26:	b8 6c 41 10 f0       	mov    $0xf010416c,%eax
+f0103a2b:	66 a3 d0 3c 19 f0    	mov    %ax,0xf0193cd0
+f0103a31:	66 c7 05 d2 3c 19 f0 	movw   $0x8,0xf0193cd2
+f0103a38:	08 00 
+f0103a3a:	c6 05 d4 3c 19 f0 00 	movb   $0x0,0xf0193cd4
+f0103a41:	c6 05 d5 3c 19 f0 8e 	movb   $0x8e,0xf0193cd5
+f0103a48:	c1 e8 10             	shr    $0x10,%eax
+f0103a4b:	66 a3 d6 3c 19 f0    	mov    %ax,0xf0193cd6
+	SETGATE(idt[3] , 0, GD_KT, H_T_BRKPT  , 3);
+f0103a51:	b8 72 41 10 f0       	mov    $0xf0104172,%eax
+f0103a56:	66 a3 d8 3c 19 f0    	mov    %ax,0xf0193cd8
+f0103a5c:	66 c7 05 da 3c 19 f0 	movw   $0x8,0xf0193cda
+f0103a63:	08 00 
+f0103a65:	c6 05 dc 3c 19 f0 00 	movb   $0x0,0xf0193cdc
+f0103a6c:	c6 05 dd 3c 19 f0 ee 	movb   $0xee,0xf0193cdd
+f0103a73:	c1 e8 10             	shr    $0x10,%eax
+f0103a76:	66 a3 de 3c 19 f0    	mov    %ax,0xf0193cde
 	SETGATE(idt[4] , 0, GD_KT, H_T_OFLOW  , 0);
-f0103ab0:	b8 b8 40 10 f0       	mov    $0xf01040b8,%eax
-f0103ab5:	66 a3 e0 3c 19 f0    	mov    %ax,0xf0193ce0
-f0103abb:	66 c7 05 e2 3c 19 f0 	movw   $0x8,0xf0193ce2
-f0103ac2:	08 00 
-f0103ac4:	c6 05 e4 3c 19 f0 00 	movb   $0x0,0xf0193ce4
-f0103acb:	c6 05 e5 3c 19 f0 8e 	movb   $0x8e,0xf0193ce5
-f0103ad2:	c1 e8 10             	shr    $0x10,%eax
-f0103ad5:	66 a3 e6 3c 19 f0    	mov    %ax,0xf0193ce6
+f0103a7c:	b8 78 41 10 f0       	mov    $0xf0104178,%eax
+f0103a81:	66 a3 e0 3c 19 f0    	mov    %ax,0xf0193ce0
+f0103a87:	66 c7 05 e2 3c 19 f0 	movw   $0x8,0xf0193ce2
+f0103a8e:	08 00 
+f0103a90:	c6 05 e4 3c 19 f0 00 	movb   $0x0,0xf0193ce4
+f0103a97:	c6 05 e5 3c 19 f0 8e 	movb   $0x8e,0xf0193ce5
+f0103a9e:	c1 e8 10             	shr    $0x10,%eax
+f0103aa1:	66 a3 e6 3c 19 f0    	mov    %ax,0xf0193ce6
 	SETGATE(idt[5] , 0, GD_KT, H_T_BOUND  , 0);
-f0103adb:	b8 be 40 10 f0       	mov    $0xf01040be,%eax
-f0103ae0:	66 a3 e8 3c 19 f0    	mov    %ax,0xf0193ce8
-f0103ae6:	66 c7 05 ea 3c 19 f0 	movw   $0x8,0xf0193cea
-f0103aed:	08 00 
-f0103aef:	c6 05 ec 3c 19 f0 00 	movb   $0x0,0xf0193cec
-f0103af6:	c6 05 ed 3c 19 f0 8e 	movb   $0x8e,0xf0193ced
-f0103afd:	c1 e8 10             	shr    $0x10,%eax
-f0103b00:	66 a3 ee 3c 19 f0    	mov    %ax,0xf0193cee
+f0103aa7:	b8 7e 41 10 f0       	mov    $0xf010417e,%eax
+f0103aac:	66 a3 e8 3c 19 f0    	mov    %ax,0xf0193ce8
+f0103ab2:	66 c7 05 ea 3c 19 f0 	movw   $0x8,0xf0193cea
+f0103ab9:	08 00 
+f0103abb:	c6 05 ec 3c 19 f0 00 	movb   $0x0,0xf0193cec
+f0103ac2:	c6 05 ed 3c 19 f0 8e 	movb   $0x8e,0xf0193ced
+f0103ac9:	c1 e8 10             	shr    $0x10,%eax
+f0103acc:	66 a3 ee 3c 19 f0    	mov    %ax,0xf0193cee
 	SETGATE(idt[6] , 0, GD_KT, H_T_ILLOP  , 0);
-f0103b06:	b8 c4 40 10 f0       	mov    $0xf01040c4,%eax
-f0103b0b:	66 a3 f0 3c 19 f0    	mov    %ax,0xf0193cf0
-f0103b11:	66 c7 05 f2 3c 19 f0 	movw   $0x8,0xf0193cf2
-f0103b18:	08 00 
-f0103b1a:	c6 05 f4 3c 19 f0 00 	movb   $0x0,0xf0193cf4
-f0103b21:	c6 05 f5 3c 19 f0 8e 	movb   $0x8e,0xf0193cf5
-f0103b28:	c1 e8 10             	shr    $0x10,%eax
-f0103b2b:	66 a3 f6 3c 19 f0    	mov    %ax,0xf0193cf6
+f0103ad2:	b8 84 41 10 f0       	mov    $0xf0104184,%eax
+f0103ad7:	66 a3 f0 3c 19 f0    	mov    %ax,0xf0193cf0
+f0103add:	66 c7 05 f2 3c 19 f0 	movw   $0x8,0xf0193cf2
+f0103ae4:	08 00 
+f0103ae6:	c6 05 f4 3c 19 f0 00 	movb   $0x0,0xf0193cf4
+f0103aed:	c6 05 f5 3c 19 f0 8e 	movb   $0x8e,0xf0193cf5
+f0103af4:	c1 e8 10             	shr    $0x10,%eax
+f0103af7:	66 a3 f6 3c 19 f0    	mov    %ax,0xf0193cf6
 	SETGATE(idt[7] , 0, GD_KT, H_T_DEVICE , 0);
-f0103b31:	b8 ca 40 10 f0       	mov    $0xf01040ca,%eax
-f0103b36:	66 a3 f8 3c 19 f0    	mov    %ax,0xf0193cf8
-f0103b3c:	66 c7 05 fa 3c 19 f0 	movw   $0x8,0xf0193cfa
-f0103b43:	08 00 
-f0103b45:	c6 05 fc 3c 19 f0 00 	movb   $0x0,0xf0193cfc
-f0103b4c:	c6 05 fd 3c 19 f0 8e 	movb   $0x8e,0xf0193cfd
-f0103b53:	c1 e8 10             	shr    $0x10,%eax
-f0103b56:	66 a3 fe 3c 19 f0    	mov    %ax,0xf0193cfe
+f0103afd:	b8 8a 41 10 f0       	mov    $0xf010418a,%eax
+f0103b02:	66 a3 f8 3c 19 f0    	mov    %ax,0xf0193cf8
+f0103b08:	66 c7 05 fa 3c 19 f0 	movw   $0x8,0xf0193cfa
+f0103b0f:	08 00 
+f0103b11:	c6 05 fc 3c 19 f0 00 	movb   $0x0,0xf0193cfc
+f0103b18:	c6 05 fd 3c 19 f0 8e 	movb   $0x8e,0xf0193cfd
+f0103b1f:	c1 e8 10             	shr    $0x10,%eax
+f0103b22:	66 a3 fe 3c 19 f0    	mov    %ax,0xf0193cfe
 	SETGATE(idt[8] , 0, GD_KT, H_T_DBLFLT , 0);
-f0103b5c:	b8 d0 40 10 f0       	mov    $0xf01040d0,%eax
-f0103b61:	66 a3 00 3d 19 f0    	mov    %ax,0xf0193d00
-f0103b67:	66 c7 05 02 3d 19 f0 	movw   $0x8,0xf0193d02
-f0103b6e:	08 00 
-f0103b70:	c6 05 04 3d 19 f0 00 	movb   $0x0,0xf0193d04
-f0103b77:	c6 05 05 3d 19 f0 8e 	movb   $0x8e,0xf0193d05
-f0103b7e:	c1 e8 10             	shr    $0x10,%eax
-f0103b81:	66 a3 06 3d 19 f0    	mov    %ax,0xf0193d06
+f0103b28:	b8 90 41 10 f0       	mov    $0xf0104190,%eax
+f0103b2d:	66 a3 00 3d 19 f0    	mov    %ax,0xf0193d00
+f0103b33:	66 c7 05 02 3d 19 f0 	movw   $0x8,0xf0193d02
+f0103b3a:	08 00 
+f0103b3c:	c6 05 04 3d 19 f0 00 	movb   $0x0,0xf0193d04
+f0103b43:	c6 05 05 3d 19 f0 8e 	movb   $0x8e,0xf0193d05
+f0103b4a:	c1 e8 10             	shr    $0x10,%eax
+f0103b4d:	66 a3 06 3d 19 f0    	mov    %ax,0xf0193d06
 	SETGATE(idt[10], 0, GD_KT, H_T_TSS    , 0);
-f0103b87:	b8 d4 40 10 f0       	mov    $0xf01040d4,%eax
-f0103b8c:	66 a3 10 3d 19 f0    	mov    %ax,0xf0193d10
-f0103b92:	66 c7 05 12 3d 19 f0 	movw   $0x8,0xf0193d12
-f0103b99:	08 00 
-f0103b9b:	c6 05 14 3d 19 f0 00 	movb   $0x0,0xf0193d14
-f0103ba2:	c6 05 15 3d 19 f0 8e 	movb   $0x8e,0xf0193d15
-f0103ba9:	c1 e8 10             	shr    $0x10,%eax
-f0103bac:	66 a3 16 3d 19 f0    	mov    %ax,0xf0193d16
+f0103b53:	b8 94 41 10 f0       	mov    $0xf0104194,%eax
+f0103b58:	66 a3 10 3d 19 f0    	mov    %ax,0xf0193d10
+f0103b5e:	66 c7 05 12 3d 19 f0 	movw   $0x8,0xf0193d12
+f0103b65:	08 00 
+f0103b67:	c6 05 14 3d 19 f0 00 	movb   $0x0,0xf0193d14
+f0103b6e:	c6 05 15 3d 19 f0 8e 	movb   $0x8e,0xf0193d15
+f0103b75:	c1 e8 10             	shr    $0x10,%eax
+f0103b78:	66 a3 16 3d 19 f0    	mov    %ax,0xf0193d16
 	SETGATE(idt[11], 0, GD_KT, H_T_SEGNP  , 0);
-f0103bb2:	b8 d8 40 10 f0       	mov    $0xf01040d8,%eax
-f0103bb7:	66 a3 18 3d 19 f0    	mov    %ax,0xf0193d18
-f0103bbd:	66 c7 05 1a 3d 19 f0 	movw   $0x8,0xf0193d1a
-f0103bc4:	08 00 
-f0103bc6:	c6 05 1c 3d 19 f0 00 	movb   $0x0,0xf0193d1c
-f0103bcd:	c6 05 1d 3d 19 f0 8e 	movb   $0x8e,0xf0193d1d
-f0103bd4:	c1 e8 10             	shr    $0x10,%eax
-f0103bd7:	66 a3 1e 3d 19 f0    	mov    %ax,0xf0193d1e
+f0103b7e:	b8 98 41 10 f0       	mov    $0xf0104198,%eax
+f0103b83:	66 a3 18 3d 19 f0    	mov    %ax,0xf0193d18
+f0103b89:	66 c7 05 1a 3d 19 f0 	movw   $0x8,0xf0193d1a
+f0103b90:	08 00 
+f0103b92:	c6 05 1c 3d 19 f0 00 	movb   $0x0,0xf0193d1c
+f0103b99:	c6 05 1d 3d 19 f0 8e 	movb   $0x8e,0xf0193d1d
+f0103ba0:	c1 e8 10             	shr    $0x10,%eax
+f0103ba3:	66 a3 1e 3d 19 f0    	mov    %ax,0xf0193d1e
 	SETGATE(idt[12], 0, GD_KT, H_T_STACK  , 0);
-f0103bdd:	b8 dc 40 10 f0       	mov    $0xf01040dc,%eax
-f0103be2:	66 a3 20 3d 19 f0    	mov    %ax,0xf0193d20
-f0103be8:	66 c7 05 22 3d 19 f0 	movw   $0x8,0xf0193d22
-f0103bef:	08 00 
-f0103bf1:	c6 05 24 3d 19 f0 00 	movb   $0x0,0xf0193d24
-f0103bf8:	c6 05 25 3d 19 f0 8e 	movb   $0x8e,0xf0193d25
-f0103bff:	c1 e8 10             	shr    $0x10,%eax
-f0103c02:	66 a3 26 3d 19 f0    	mov    %ax,0xf0193d26
+f0103ba9:	b8 9c 41 10 f0       	mov    $0xf010419c,%eax
+f0103bae:	66 a3 20 3d 19 f0    	mov    %ax,0xf0193d20
+f0103bb4:	66 c7 05 22 3d 19 f0 	movw   $0x8,0xf0193d22
+f0103bbb:	08 00 
+f0103bbd:	c6 05 24 3d 19 f0 00 	movb   $0x0,0xf0193d24
+f0103bc4:	c6 05 25 3d 19 f0 8e 	movb   $0x8e,0xf0193d25
+f0103bcb:	c1 e8 10             	shr    $0x10,%eax
+f0103bce:	66 a3 26 3d 19 f0    	mov    %ax,0xf0193d26
 	SETGATE(idt[13], 0, GD_KT, H_T_GPFLT  , 0);
-f0103c08:	b8 e0 40 10 f0       	mov    $0xf01040e0,%eax
-f0103c0d:	66 a3 28 3d 19 f0    	mov    %ax,0xf0193d28
-f0103c13:	66 c7 05 2a 3d 19 f0 	movw   $0x8,0xf0193d2a
-f0103c1a:	08 00 
-f0103c1c:	c6 05 2c 3d 19 f0 00 	movb   $0x0,0xf0193d2c
-f0103c23:	c6 05 2d 3d 19 f0 8e 	movb   $0x8e,0xf0193d2d
-f0103c2a:	c1 e8 10             	shr    $0x10,%eax
-f0103c2d:	66 a3 2e 3d 19 f0    	mov    %ax,0xf0193d2e
+f0103bd4:	b8 a0 41 10 f0       	mov    $0xf01041a0,%eax
+f0103bd9:	66 a3 28 3d 19 f0    	mov    %ax,0xf0193d28
+f0103bdf:	66 c7 05 2a 3d 19 f0 	movw   $0x8,0xf0193d2a
+f0103be6:	08 00 
+f0103be8:	c6 05 2c 3d 19 f0 00 	movb   $0x0,0xf0193d2c
+f0103bef:	c6 05 2d 3d 19 f0 8e 	movb   $0x8e,0xf0193d2d
+f0103bf6:	c1 e8 10             	shr    $0x10,%eax
+f0103bf9:	66 a3 2e 3d 19 f0    	mov    %ax,0xf0193d2e
 	SETGATE(idt[14], 0, GD_KT, H_T_PGFLT  , 0);
-f0103c33:	b8 e4 40 10 f0       	mov    $0xf01040e4,%eax
-f0103c38:	66 a3 30 3d 19 f0    	mov    %ax,0xf0193d30
-f0103c3e:	66 c7 05 32 3d 19 f0 	movw   $0x8,0xf0193d32
-f0103c45:	08 00 
-f0103c47:	c6 05 34 3d 19 f0 00 	movb   $0x0,0xf0193d34
-f0103c4e:	c6 05 35 3d 19 f0 8e 	movb   $0x8e,0xf0193d35
-f0103c55:	c1 e8 10             	shr    $0x10,%eax
-f0103c58:	66 a3 36 3d 19 f0    	mov    %ax,0xf0193d36
+f0103bff:	b8 a4 41 10 f0       	mov    $0xf01041a4,%eax
+f0103c04:	66 a3 30 3d 19 f0    	mov    %ax,0xf0193d30
+f0103c0a:	66 c7 05 32 3d 19 f0 	movw   $0x8,0xf0193d32
+f0103c11:	08 00 
+f0103c13:	c6 05 34 3d 19 f0 00 	movb   $0x0,0xf0193d34
+f0103c1a:	c6 05 35 3d 19 f0 8e 	movb   $0x8e,0xf0193d35
+f0103c21:	c1 e8 10             	shr    $0x10,%eax
+f0103c24:	66 a3 36 3d 19 f0    	mov    %ax,0xf0193d36
 	SETGATE(idt[16], 0, GD_KT, H_T_FPERR  , 0);
-f0103c5e:	b8 e8 40 10 f0       	mov    $0xf01040e8,%eax
-f0103c63:	66 a3 40 3d 19 f0    	mov    %ax,0xf0193d40
-f0103c69:	66 c7 05 42 3d 19 f0 	movw   $0x8,0xf0193d42
-f0103c70:	08 00 
-f0103c72:	c6 05 44 3d 19 f0 00 	movb   $0x0,0xf0193d44
-f0103c79:	c6 05 45 3d 19 f0 8e 	movb   $0x8e,0xf0193d45
-f0103c80:	c1 e8 10             	shr    $0x10,%eax
-f0103c83:	66 a3 46 3d 19 f0    	mov    %ax,0xf0193d46
+f0103c2a:	b8 a8 41 10 f0       	mov    $0xf01041a8,%eax
+f0103c2f:	66 a3 40 3d 19 f0    	mov    %ax,0xf0193d40
+f0103c35:	66 c7 05 42 3d 19 f0 	movw   $0x8,0xf0193d42
+f0103c3c:	08 00 
+f0103c3e:	c6 05 44 3d 19 f0 00 	movb   $0x0,0xf0193d44
+f0103c45:	c6 05 45 3d 19 f0 8e 	movb   $0x8e,0xf0193d45
+f0103c4c:	c1 e8 10             	shr    $0x10,%eax
+f0103c4f:	66 a3 46 3d 19 f0    	mov    %ax,0xf0193d46
 	SETGATE(idt[17], 0, GD_KT, H_T_ALIGN  , 0);
-f0103c89:	b8 ee 40 10 f0       	mov    $0xf01040ee,%eax
-f0103c8e:	66 a3 48 3d 19 f0    	mov    %ax,0xf0193d48
-f0103c94:	66 c7 05 4a 3d 19 f0 	movw   $0x8,0xf0193d4a
-f0103c9b:	08 00 
-f0103c9d:	c6 05 4c 3d 19 f0 00 	movb   $0x0,0xf0193d4c
-f0103ca4:	c6 05 4d 3d 19 f0 8e 	movb   $0x8e,0xf0193d4d
-f0103cab:	c1 e8 10             	shr    $0x10,%eax
-f0103cae:	66 a3 4e 3d 19 f0    	mov    %ax,0xf0193d4e
+f0103c55:	b8 ae 41 10 f0       	mov    $0xf01041ae,%eax
+f0103c5a:	66 a3 48 3d 19 f0    	mov    %ax,0xf0193d48
+f0103c60:	66 c7 05 4a 3d 19 f0 	movw   $0x8,0xf0193d4a
+f0103c67:	08 00 
+f0103c69:	c6 05 4c 3d 19 f0 00 	movb   $0x0,0xf0193d4c
+f0103c70:	c6 05 4d 3d 19 f0 8e 	movb   $0x8e,0xf0193d4d
+f0103c77:	c1 e8 10             	shr    $0x10,%eax
+f0103c7a:	66 a3 4e 3d 19 f0    	mov    %ax,0xf0193d4e
 	SETGATE(idt[18], 0, GD_KT, H_T_MCHK   , 0);
-f0103cb4:	b8 f2 40 10 f0       	mov    $0xf01040f2,%eax
-f0103cb9:	66 a3 50 3d 19 f0    	mov    %ax,0xf0193d50
-f0103cbf:	66 c7 05 52 3d 19 f0 	movw   $0x8,0xf0193d52
-f0103cc6:	08 00 
-f0103cc8:	c6 05 54 3d 19 f0 00 	movb   $0x0,0xf0193d54
-f0103ccf:	c6 05 55 3d 19 f0 8e 	movb   $0x8e,0xf0193d55
-f0103cd6:	c1 e8 10             	shr    $0x10,%eax
-f0103cd9:	66 a3 56 3d 19 f0    	mov    %ax,0xf0193d56
+f0103c80:	b8 b2 41 10 f0       	mov    $0xf01041b2,%eax
+f0103c85:	66 a3 50 3d 19 f0    	mov    %ax,0xf0193d50
+f0103c8b:	66 c7 05 52 3d 19 f0 	movw   $0x8,0xf0193d52
+f0103c92:	08 00 
+f0103c94:	c6 05 54 3d 19 f0 00 	movb   $0x0,0xf0193d54
+f0103c9b:	c6 05 55 3d 19 f0 8e 	movb   $0x8e,0xf0193d55
+f0103ca2:	c1 e8 10             	shr    $0x10,%eax
+f0103ca5:	66 a3 56 3d 19 f0    	mov    %ax,0xf0193d56
 	SETGATE(idt[19], 0, GD_KT, H_T_SIMDERR, 0);
-f0103cdf:	b8 f8 40 10 f0       	mov    $0xf01040f8,%eax
-f0103ce4:	66 a3 58 3d 19 f0    	mov    %ax,0xf0193d58
-f0103cea:	66 c7 05 5a 3d 19 f0 	movw   $0x8,0xf0193d5a
-f0103cf1:	08 00 
-f0103cf3:	c6 05 5c 3d 19 f0 00 	movb   $0x0,0xf0193d5c
-f0103cfa:	c6 05 5d 3d 19 f0 8e 	movb   $0x8e,0xf0193d5d
-f0103d01:	c1 e8 10             	shr    $0x10,%eax
-f0103d04:	66 a3 5e 3d 19 f0    	mov    %ax,0xf0193d5e
-	//SETGATE(idt[48], 1, GD_KT, H_T_SYSCALL, 0);
+f0103cab:	b8 b8 41 10 f0       	mov    $0xf01041b8,%eax
+f0103cb0:	66 a3 58 3d 19 f0    	mov    %ax,0xf0193d58
+f0103cb6:	66 c7 05 5a 3d 19 f0 	movw   $0x8,0xf0193d5a
+f0103cbd:	08 00 
+f0103cbf:	c6 05 5c 3d 19 f0 00 	movb   $0x0,0xf0193d5c
+f0103cc6:	c6 05 5d 3d 19 f0 8e 	movb   $0x8e,0xf0193d5d
+f0103ccd:	c1 e8 10             	shr    $0x10,%eax
+f0103cd0:	66 a3 5e 3d 19 f0    	mov    %ax,0xf0193d5e
+	SETGATE(idt[48], 1, GD_KT, H_T_SYSCALL, 3);
+f0103cd6:	b8 be 41 10 f0       	mov    $0xf01041be,%eax
+f0103cdb:	66 a3 40 3e 19 f0    	mov    %ax,0xf0193e40
+f0103ce1:	66 c7 05 42 3e 19 f0 	movw   $0x8,0xf0193e42
+f0103ce8:	08 00 
+f0103cea:	c6 05 44 3e 19 f0 00 	movb   $0x0,0xf0193e44
+f0103cf1:	c6 05 45 3e 19 f0 ef 	movb   $0xef,0xf0193e45
+f0103cf8:	c1 e8 10             	shr    $0x10,%eax
+f0103cfb:	66 a3 46 3e 19 f0    	mov    %ax,0xf0193e46
 
 	// Per-CPU setup 
 	trap_init_percpu();
-f0103d0a:	e8 95 fc ff ff       	call   f01039a4 <trap_init_percpu>
+f0103d01:	e8 6a fc ff ff       	call   f0103970 <trap_init_percpu>
 }
-f0103d0f:	5d                   	pop    %ebp
-f0103d10:	c3                   	ret    
+f0103d06:	5d                   	pop    %ebp
+f0103d07:	c3                   	ret    
 
-f0103d11 <print_regs>:
+f0103d08 <print_regs>:
 	}
 }
 
 void
 print_regs(struct PushRegs *regs)
 {
-f0103d11:	55                   	push   %ebp
-f0103d12:	89 e5                	mov    %esp,%ebp
-f0103d14:	53                   	push   %ebx
-f0103d15:	83 ec 14             	sub    $0x14,%esp
-f0103d18:	8b 5d 08             	mov    0x8(%ebp),%ebx
+f0103d08:	55                   	push   %ebp
+f0103d09:	89 e5                	mov    %esp,%ebp
+f0103d0b:	53                   	push   %ebx
+f0103d0c:	83 ec 14             	sub    $0x14,%esp
+f0103d0f:	8b 5d 08             	mov    0x8(%ebp),%ebx
 	cprintf("  edi  0x%08x\n", regs->reg_edi);
-f0103d1b:	8b 03                	mov    (%ebx),%eax
-f0103d1d:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103d21:	c7 04 24 07 67 10 f0 	movl   $0xf0106707,(%esp)
-f0103d28:	e8 5d fc ff ff       	call   f010398a <cprintf>
+f0103d12:	8b 03                	mov    (%ebx),%eax
+f0103d14:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103d18:	c7 04 24 06 69 10 f0 	movl   $0xf0106906,(%esp)
+f0103d1f:	e8 32 fc ff ff       	call   f0103956 <cprintf>
 	cprintf("  esi  0x%08x\n", regs->reg_esi);
-f0103d2d:	8b 43 04             	mov    0x4(%ebx),%eax
-f0103d30:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103d34:	c7 04 24 16 67 10 f0 	movl   $0xf0106716,(%esp)
-f0103d3b:	e8 4a fc ff ff       	call   f010398a <cprintf>
+f0103d24:	8b 43 04             	mov    0x4(%ebx),%eax
+f0103d27:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103d2b:	c7 04 24 15 69 10 f0 	movl   $0xf0106915,(%esp)
+f0103d32:	e8 1f fc ff ff       	call   f0103956 <cprintf>
 	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
-f0103d40:	8b 43 08             	mov    0x8(%ebx),%eax
-f0103d43:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103d47:	c7 04 24 25 67 10 f0 	movl   $0xf0106725,(%esp)
-f0103d4e:	e8 37 fc ff ff       	call   f010398a <cprintf>
+f0103d37:	8b 43 08             	mov    0x8(%ebx),%eax
+f0103d3a:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103d3e:	c7 04 24 24 69 10 f0 	movl   $0xf0106924,(%esp)
+f0103d45:	e8 0c fc ff ff       	call   f0103956 <cprintf>
 	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
-f0103d53:	8b 43 0c             	mov    0xc(%ebx),%eax
-f0103d56:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103d5a:	c7 04 24 34 67 10 f0 	movl   $0xf0106734,(%esp)
-f0103d61:	e8 24 fc ff ff       	call   f010398a <cprintf>
+f0103d4a:	8b 43 0c             	mov    0xc(%ebx),%eax
+f0103d4d:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103d51:	c7 04 24 33 69 10 f0 	movl   $0xf0106933,(%esp)
+f0103d58:	e8 f9 fb ff ff       	call   f0103956 <cprintf>
 	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
-f0103d66:	8b 43 10             	mov    0x10(%ebx),%eax
-f0103d69:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103d6d:	c7 04 24 43 67 10 f0 	movl   $0xf0106743,(%esp)
-f0103d74:	e8 11 fc ff ff       	call   f010398a <cprintf>
+f0103d5d:	8b 43 10             	mov    0x10(%ebx),%eax
+f0103d60:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103d64:	c7 04 24 42 69 10 f0 	movl   $0xf0106942,(%esp)
+f0103d6b:	e8 e6 fb ff ff       	call   f0103956 <cprintf>
 	cprintf("  edx  0x%08x\n", regs->reg_edx);
-f0103d79:	8b 43 14             	mov    0x14(%ebx),%eax
-f0103d7c:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103d80:	c7 04 24 52 67 10 f0 	movl   $0xf0106752,(%esp)
-f0103d87:	e8 fe fb ff ff       	call   f010398a <cprintf>
+f0103d70:	8b 43 14             	mov    0x14(%ebx),%eax
+f0103d73:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103d77:	c7 04 24 51 69 10 f0 	movl   $0xf0106951,(%esp)
+f0103d7e:	e8 d3 fb ff ff       	call   f0103956 <cprintf>
 	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
-f0103d8c:	8b 43 18             	mov    0x18(%ebx),%eax
-f0103d8f:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103d93:	c7 04 24 61 67 10 f0 	movl   $0xf0106761,(%esp)
-f0103d9a:	e8 eb fb ff ff       	call   f010398a <cprintf>
+f0103d83:	8b 43 18             	mov    0x18(%ebx),%eax
+f0103d86:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103d8a:	c7 04 24 60 69 10 f0 	movl   $0xf0106960,(%esp)
+f0103d91:	e8 c0 fb ff ff       	call   f0103956 <cprintf>
 	cprintf("  eax  0x%08x\n", regs->reg_eax);
-f0103d9f:	8b 43 1c             	mov    0x1c(%ebx),%eax
-f0103da2:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103da6:	c7 04 24 70 67 10 f0 	movl   $0xf0106770,(%esp)
-f0103dad:	e8 d8 fb ff ff       	call   f010398a <cprintf>
+f0103d96:	8b 43 1c             	mov    0x1c(%ebx),%eax
+f0103d99:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103d9d:	c7 04 24 6f 69 10 f0 	movl   $0xf010696f,(%esp)
+f0103da4:	e8 ad fb ff ff       	call   f0103956 <cprintf>
 }
-f0103db2:	83 c4 14             	add    $0x14,%esp
-f0103db5:	5b                   	pop    %ebx
-f0103db6:	5d                   	pop    %ebp
-f0103db7:	c3                   	ret    
+f0103da9:	83 c4 14             	add    $0x14,%esp
+f0103dac:	5b                   	pop    %ebx
+f0103dad:	5d                   	pop    %ebp
+f0103dae:	c3                   	ret    
 
-f0103db8 <print_trapframe>:
+f0103daf <print_trapframe>:
 	lidt(&idt_pd);
 }
 
 void
 print_trapframe(struct Trapframe *tf)
 {
-f0103db8:	55                   	push   %ebp
-f0103db9:	89 e5                	mov    %esp,%ebp
-f0103dbb:	56                   	push   %esi
-f0103dbc:	53                   	push   %ebx
-f0103dbd:	83 ec 10             	sub    $0x10,%esp
-f0103dc0:	8b 5d 08             	mov    0x8(%ebp),%ebx
+f0103daf:	55                   	push   %ebp
+f0103db0:	89 e5                	mov    %esp,%ebp
+f0103db2:	56                   	push   %esi
+f0103db3:	53                   	push   %ebx
+f0103db4:	83 ec 10             	sub    $0x10,%esp
+f0103db7:	8b 5d 08             	mov    0x8(%ebp),%ebx
 	cprintf("TRAP frame at %p\n", tf);
-f0103dc3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-f0103dc7:	c7 04 24 a6 68 10 f0 	movl   $0xf01068a6,(%esp)
-f0103dce:	e8 b7 fb ff ff       	call   f010398a <cprintf>
+f0103dba:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+f0103dbe:	c7 04 24 b9 6a 10 f0 	movl   $0xf0106ab9,(%esp)
+f0103dc5:	e8 8c fb ff ff       	call   f0103956 <cprintf>
 	print_regs(&tf->tf_regs);
-f0103dd3:	89 1c 24             	mov    %ebx,(%esp)
-f0103dd6:	e8 36 ff ff ff       	call   f0103d11 <print_regs>
+f0103dca:	89 1c 24             	mov    %ebx,(%esp)
+f0103dcd:	e8 36 ff ff ff       	call   f0103d08 <print_regs>
 	cprintf("  es   0x----%04x\n", tf->tf_es);
-f0103ddb:	31 c0                	xor    %eax,%eax
-f0103ddd:	66 8b 43 20          	mov    0x20(%ebx),%ax
-f0103de1:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103de5:	c7 04 24 c1 67 10 f0 	movl   $0xf01067c1,(%esp)
-f0103dec:	e8 99 fb ff ff       	call   f010398a <cprintf>
+f0103dd2:	31 c0                	xor    %eax,%eax
+f0103dd4:	66 8b 43 20          	mov    0x20(%ebx),%ax
+f0103dd8:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103ddc:	c7 04 24 c0 69 10 f0 	movl   $0xf01069c0,(%esp)
+f0103de3:	e8 6e fb ff ff       	call   f0103956 <cprintf>
 	cprintf("  ds   0x----%04x\n", tf->tf_ds);
-f0103df1:	31 c0                	xor    %eax,%eax
-f0103df3:	66 8b 43 24          	mov    0x24(%ebx),%ax
-f0103df7:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103dfb:	c7 04 24 d4 67 10 f0 	movl   $0xf01067d4,(%esp)
-f0103e02:	e8 83 fb ff ff       	call   f010398a <cprintf>
+f0103de8:	31 c0                	xor    %eax,%eax
+f0103dea:	66 8b 43 24          	mov    0x24(%ebx),%ax
+f0103dee:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103df2:	c7 04 24 d3 69 10 f0 	movl   $0xf01069d3,(%esp)
+f0103df9:	e8 58 fb ff ff       	call   f0103956 <cprintf>
 	cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
-f0103e07:	8b 43 28             	mov    0x28(%ebx),%eax
+f0103dfe:	8b 43 28             	mov    0x28(%ebx),%eax
 		"Alignment Check",
 		"Machine-Check",
 		"SIMD Floating-Point Exception"
 	};
 
 	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
-f0103e0a:	83 f8 13             	cmp    $0x13,%eax
-f0103e0d:	77 09                	ja     f0103e18 <print_trapframe+0x60>
+f0103e01:	83 f8 13             	cmp    $0x13,%eax
+f0103e04:	77 09                	ja     f0103e0f <print_trapframe+0x60>
 		return excnames[trapno];
-f0103e0f:	8b 14 85 80 6a 10 f0 	mov    -0xfef9580(,%eax,4),%edx
-f0103e16:	eb 0f                	jmp    f0103e27 <print_trapframe+0x6f>
+f0103e06:	8b 14 85 e0 6c 10 f0 	mov    -0xfef9320(,%eax,4),%edx
+f0103e0d:	eb 0f                	jmp    f0103e1e <print_trapframe+0x6f>
 	if (trapno == T_SYSCALL)
 		return "System call";
 	return "(unknown trap)";
-f0103e18:	ba 8b 67 10 f0       	mov    $0xf010678b,%edx
+f0103e0f:	ba 8a 69 10 f0       	mov    $0xf010698a,%edx
 		"SIMD Floating-Point Exception"
 	};
 
 	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
 		return excnames[trapno];
 	if (trapno == T_SYSCALL)
-f0103e1d:	83 f8 30             	cmp    $0x30,%eax
-f0103e20:	75 05                	jne    f0103e27 <print_trapframe+0x6f>
+f0103e14:	83 f8 30             	cmp    $0x30,%eax
+f0103e17:	75 05                	jne    f0103e1e <print_trapframe+0x6f>
 		return "System call";
-f0103e22:	ba 7f 67 10 f0       	mov    $0xf010677f,%edx
+f0103e19:	ba 7e 69 10 f0       	mov    $0xf010697e,%edx
 {
 	cprintf("TRAP frame at %p\n", tf);
 	print_regs(&tf->tf_regs);
 	cprintf("  es   0x----%04x\n", tf->tf_es);
 	cprintf("  ds   0x----%04x\n", tf->tf_ds);
 	cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
-f0103e27:	89 54 24 08          	mov    %edx,0x8(%esp)
-f0103e2b:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103e2f:	c7 04 24 e7 67 10 f0 	movl   $0xf01067e7,(%esp)
-f0103e36:	e8 4f fb ff ff       	call   f010398a <cprintf>
+f0103e1e:	89 54 24 08          	mov    %edx,0x8(%esp)
+f0103e22:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103e26:	c7 04 24 e6 69 10 f0 	movl   $0xf01069e6,(%esp)
+f0103e2d:	e8 24 fb ff ff       	call   f0103956 <cprintf>
 	// If this trap was a page fault that just happened
 	// (so %cr2 is meaningful), print the faulting linear address.
 	if (tf == last_tf && tf->tf_trapno == T_PGFLT)
-f0103e3b:	3b 1d c0 44 19 f0    	cmp    0xf01944c0,%ebx
-f0103e41:	75 19                	jne    f0103e5c <print_trapframe+0xa4>
-f0103e43:	83 7b 28 0e          	cmpl   $0xe,0x28(%ebx)
-f0103e47:	75 13                	jne    f0103e5c <print_trapframe+0xa4>
+f0103e32:	3b 1d c0 44 19 f0    	cmp    0xf01944c0,%ebx
+f0103e38:	75 19                	jne    f0103e53 <print_trapframe+0xa4>
+f0103e3a:	83 7b 28 0e          	cmpl   $0xe,0x28(%ebx)
+f0103e3e:	75 13                	jne    f0103e53 <print_trapframe+0xa4>
 
 static __inline uint32_t
 rcr2(void)
 {
 	uint32_t val;
 	__asm __volatile("movl %%cr2,%0" : "=r" (val));
-f0103e49:	0f 20 d0             	mov    %cr2,%eax
+f0103e40:	0f 20 d0             	mov    %cr2,%eax
 		cprintf("  cr2  0x%08x\n", rcr2());
-f0103e4c:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103e50:	c7 04 24 f9 67 10 f0 	movl   $0xf01067f9,(%esp)
-f0103e57:	e8 2e fb ff ff       	call   f010398a <cprintf>
+f0103e43:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103e47:	c7 04 24 f8 69 10 f0 	movl   $0xf01069f8,(%esp)
+f0103e4e:	e8 03 fb ff ff       	call   f0103956 <cprintf>
 	cprintf("  err  0x%08x", tf->tf_err);
-f0103e5c:	8b 43 2c             	mov    0x2c(%ebx),%eax
-f0103e5f:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103e63:	c7 04 24 08 68 10 f0 	movl   $0xf0106808,(%esp)
-f0103e6a:	e8 1b fb ff ff       	call   f010398a <cprintf>
+f0103e53:	8b 43 2c             	mov    0x2c(%ebx),%eax
+f0103e56:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103e5a:	c7 04 24 07 6a 10 f0 	movl   $0xf0106a07,(%esp)
+f0103e61:	e8 f0 fa ff ff       	call   f0103956 <cprintf>
 	// For page faults, print decoded fault error code:
 	// U/K=fault occurred in user/kernel mode
 	// W/R=a write/read caused the fault
 	// PR=a protection violation caused the fault (NP=page not present).
 	if (tf->tf_trapno == T_PGFLT)
-f0103e6f:	83 7b 28 0e          	cmpl   $0xe,0x28(%ebx)
-f0103e73:	75 47                	jne    f0103ebc <print_trapframe+0x104>
+f0103e66:	83 7b 28 0e          	cmpl   $0xe,0x28(%ebx)
+f0103e6a:	75 47                	jne    f0103eb3 <print_trapframe+0x104>
 		cprintf(" [%s, %s, %s]\n",
 			tf->tf_err & 4 ? "user" : "kernel",
 			tf->tf_err & 2 ? "write" : "read",
 			tf->tf_err & 1 ? "protection" : "not-present");
-f0103e75:	8b 43 2c             	mov    0x2c(%ebx),%eax
+f0103e6c:	8b 43 2c             	mov    0x2c(%ebx),%eax
 	// For page faults, print decoded fault error code:
 	// U/K=fault occurred in user/kernel mode
 	// W/R=a write/read caused the fault
 	// PR=a protection violation caused the fault (NP=page not present).
 	if (tf->tf_trapno == T_PGFLT)
 		cprintf(" [%s, %s, %s]\n",
-f0103e78:	be a5 67 10 f0       	mov    $0xf01067a5,%esi
-f0103e7d:	a8 01                	test   $0x1,%al
-f0103e7f:	74 05                	je     f0103e86 <print_trapframe+0xce>
-f0103e81:	be 9a 67 10 f0       	mov    $0xf010679a,%esi
-f0103e86:	b9 b7 67 10 f0       	mov    $0xf01067b7,%ecx
-f0103e8b:	a8 02                	test   $0x2,%al
-f0103e8d:	74 05                	je     f0103e94 <print_trapframe+0xdc>
-f0103e8f:	b9 b1 67 10 f0       	mov    $0xf01067b1,%ecx
-f0103e94:	ba e6 68 10 f0       	mov    $0xf01068e6,%edx
-f0103e99:	a8 04                	test   $0x4,%al
-f0103e9b:	74 05                	je     f0103ea2 <print_trapframe+0xea>
-f0103e9d:	ba bc 67 10 f0       	mov    $0xf01067bc,%edx
-f0103ea2:	89 74 24 0c          	mov    %esi,0xc(%esp)
-f0103ea6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-f0103eaa:	89 54 24 04          	mov    %edx,0x4(%esp)
-f0103eae:	c7 04 24 16 68 10 f0 	movl   $0xf0106816,(%esp)
-f0103eb5:	e8 d0 fa ff ff       	call   f010398a <cprintf>
-f0103eba:	eb 0c                	jmp    f0103ec8 <print_trapframe+0x110>
+f0103e6f:	be a4 69 10 f0       	mov    $0xf01069a4,%esi
+f0103e74:	a8 01                	test   $0x1,%al
+f0103e76:	74 05                	je     f0103e7d <print_trapframe+0xce>
+f0103e78:	be 99 69 10 f0       	mov    $0xf0106999,%esi
+f0103e7d:	b9 b6 69 10 f0       	mov    $0xf01069b6,%ecx
+f0103e82:	a8 02                	test   $0x2,%al
+f0103e84:	74 05                	je     f0103e8b <print_trapframe+0xdc>
+f0103e86:	b9 b0 69 10 f0       	mov    $0xf01069b0,%ecx
+f0103e8b:	ba 31 6b 10 f0       	mov    $0xf0106b31,%edx
+f0103e90:	a8 04                	test   $0x4,%al
+f0103e92:	74 05                	je     f0103e99 <print_trapframe+0xea>
+f0103e94:	ba bb 69 10 f0       	mov    $0xf01069bb,%edx
+f0103e99:	89 74 24 0c          	mov    %esi,0xc(%esp)
+f0103e9d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+f0103ea1:	89 54 24 04          	mov    %edx,0x4(%esp)
+f0103ea5:	c7 04 24 15 6a 10 f0 	movl   $0xf0106a15,(%esp)
+f0103eac:	e8 a5 fa ff ff       	call   f0103956 <cprintf>
+f0103eb1:	eb 0c                	jmp    f0103ebf <print_trapframe+0x110>
 			tf->tf_err & 4 ? "user" : "kernel",
 			tf->tf_err & 2 ? "write" : "read",
 			tf->tf_err & 1 ? "protection" : "not-present");
 	else
 		cprintf("\n");
-f0103ebc:	c7 04 24 71 66 10 f0 	movl   $0xf0106671,(%esp)
-f0103ec3:	e8 c2 fa ff ff       	call   f010398a <cprintf>
+f0103eb3:	c7 04 24 3e 68 10 f0 	movl   $0xf010683e,(%esp)
+f0103eba:	e8 97 fa ff ff       	call   f0103956 <cprintf>
 	cprintf("  eip  0x%08x\n", tf->tf_eip);
-f0103ec8:	8b 43 30             	mov    0x30(%ebx),%eax
-f0103ecb:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103ecf:	c7 04 24 25 68 10 f0 	movl   $0xf0106825,(%esp)
-f0103ed6:	e8 af fa ff ff       	call   f010398a <cprintf>
+f0103ebf:	8b 43 30             	mov    0x30(%ebx),%eax
+f0103ec2:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103ec6:	c7 04 24 24 6a 10 f0 	movl   $0xf0106a24,(%esp)
+f0103ecd:	e8 84 fa ff ff       	call   f0103956 <cprintf>
 	cprintf("  cs   0x----%04x\n", tf->tf_cs);
-f0103edb:	31 c0                	xor    %eax,%eax
-f0103edd:	66 8b 43 34          	mov    0x34(%ebx),%ax
-f0103ee1:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103ee5:	c7 04 24 34 68 10 f0 	movl   $0xf0106834,(%esp)
-f0103eec:	e8 99 fa ff ff       	call   f010398a <cprintf>
+f0103ed2:	31 c0                	xor    %eax,%eax
+f0103ed4:	66 8b 43 34          	mov    0x34(%ebx),%ax
+f0103ed8:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103edc:	c7 04 24 33 6a 10 f0 	movl   $0xf0106a33,(%esp)
+f0103ee3:	e8 6e fa ff ff       	call   f0103956 <cprintf>
 	cprintf("  flag 0x%08x\n", tf->tf_eflags);
-f0103ef1:	8b 43 38             	mov    0x38(%ebx),%eax
-f0103ef4:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103ef8:	c7 04 24 47 68 10 f0 	movl   $0xf0106847,(%esp)
-f0103eff:	e8 86 fa ff ff       	call   f010398a <cprintf>
+f0103ee8:	8b 43 38             	mov    0x38(%ebx),%eax
+f0103eeb:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103eef:	c7 04 24 46 6a 10 f0 	movl   $0xf0106a46,(%esp)
+f0103ef6:	e8 5b fa ff ff       	call   f0103956 <cprintf>
 	if ((tf->tf_cs & 3) != 0) {
-f0103f04:	f6 43 34 03          	testb  $0x3,0x34(%ebx)
-f0103f08:	74 29                	je     f0103f33 <print_trapframe+0x17b>
+f0103efb:	f6 43 34 03          	testb  $0x3,0x34(%ebx)
+f0103eff:	74 29                	je     f0103f2a <print_trapframe+0x17b>
 		cprintf("  esp  0x%08x\n", tf->tf_esp);
-f0103f0a:	8b 43 3c             	mov    0x3c(%ebx),%eax
-f0103f0d:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103f11:	c7 04 24 56 68 10 f0 	movl   $0xf0106856,(%esp)
-f0103f18:	e8 6d fa ff ff       	call   f010398a <cprintf>
+f0103f01:	8b 43 3c             	mov    0x3c(%ebx),%eax
+f0103f04:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103f08:	c7 04 24 55 6a 10 f0 	movl   $0xf0106a55,(%esp)
+f0103f0f:	e8 42 fa ff ff       	call   f0103956 <cprintf>
 		cprintf("  ss   0x----%04x\n", tf->tf_ss);
-f0103f1d:	31 c0                	xor    %eax,%eax
-f0103f1f:	66 8b 43 40          	mov    0x40(%ebx),%ax
-f0103f23:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0103f27:	c7 04 24 65 68 10 f0 	movl   $0xf0106865,(%esp)
-f0103f2e:	e8 57 fa ff ff       	call   f010398a <cprintf>
+f0103f14:	31 c0                	xor    %eax,%eax
+f0103f16:	66 8b 43 40          	mov    0x40(%ebx),%ax
+f0103f1a:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103f1e:	c7 04 24 64 6a 10 f0 	movl   $0xf0106a64,(%esp)
+f0103f25:	e8 2c fa ff ff       	call   f0103956 <cprintf>
 	}
 }
-f0103f33:	83 c4 10             	add    $0x10,%esp
-f0103f36:	5b                   	pop    %ebx
-f0103f37:	5e                   	pop    %esi
-f0103f38:	5d                   	pop    %ebp
-f0103f39:	c3                   	ret    
+f0103f2a:	83 c4 10             	add    $0x10,%esp
+f0103f2d:	5b                   	pop    %ebx
+f0103f2e:	5e                   	pop    %esi
+f0103f2f:	5d                   	pop    %ebp
+f0103f30:	c3                   	ret    
+
+f0103f31 <page_fault_handler>:
+}
+
+
+void
+page_fault_handler(struct Trapframe *tf)
+{
+f0103f31:	55                   	push   %ebp
+f0103f32:	89 e5                	mov    %esp,%ebp
+f0103f34:	53                   	push   %ebx
+f0103f35:	83 ec 14             	sub    $0x14,%esp
+f0103f38:	8b 5d 08             	mov    0x8(%ebp),%ebx
+f0103f3b:	0f 20 d1             	mov    %cr2,%ecx
+
+static __inline uint32_t
+rcr3(void)
+{
+	uint32_t val;
+	__asm __volatile("movl %%cr3,%0" : "=r" (val));
+f0103f3e:	0f 20 da             	mov    %cr3,%edx
+
+	// Read processor's CR2 register to find the faulting address
+	fault_va = rcr2();
 
-f0103f3a <trap>:
+	// Handle kernel-mode page faults.
+	if (rcr3() == PADDR(kern_pgdir)) {
+f0103f41:	a1 68 49 19 f0       	mov    0xf0194968,%eax
+#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)
+
+static inline physaddr_t
+_paddr(const char *file, int line, void *kva)
+{
+	if ((uint32_t)kva < KERNBASE)
+f0103f46:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
+f0103f4b:	77 20                	ja     f0103f6d <page_fault_handler+0x3c>
+		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
+f0103f4d:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f0103f51:	c7 44 24 08 d0 61 10 	movl   $0xf01061d0,0x8(%esp)
+f0103f58:	f0 
+f0103f59:	c7 44 24 04 07 01 00 	movl   $0x107,0x4(%esp)
+f0103f60:	00 
+f0103f61:	c7 04 24 77 6a 10 f0 	movl   $0xf0106a77,(%esp)
+f0103f68:	e8 44 c1 ff ff       	call   f01000b1 <_panic>
+	return (physaddr_t)kva - KERNBASE;
+f0103f6d:	05 00 00 00 10       	add    $0x10000000,%eax
+f0103f72:	39 c2                	cmp    %eax,%edx
+f0103f74:	75 0e                	jne    f0103f84 <page_fault_handler+0x53>
+		cprintf("Kernel page fault!\n");
+f0103f76:	c7 04 24 83 6a 10 f0 	movl   $0xf0106a83,(%esp)
+f0103f7d:	e8 d4 f9 ff ff       	call   f0103956 <cprintf>
+		return;
+f0103f82:	eb 38                	jmp    f0103fbc <page_fault_handler+0x8b>
+	
+	// cprintf("[%08x] user_mem_check assertion failure for va [%08x]",
+	// 		curenv->env_id, fault_va);
+
+	// Destroy the environment that caused the fault.
+	cprintf("[%08x] user fault va %08x ip %08x\n",
+f0103f84:	8b 43 30             	mov    0x30(%ebx),%eax
+f0103f87:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f0103f8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+f0103f8f:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f0103f94:	8b 40 48             	mov    0x48(%eax),%eax
+f0103f97:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0103f9b:	c7 04 24 7c 6c 10 f0 	movl   $0xf0106c7c,(%esp)
+f0103fa2:	e8 af f9 ff ff       	call   f0103956 <cprintf>
+		curenv->env_id, fault_va, tf->tf_eip);
+	print_trapframe(tf);
+f0103fa7:	89 1c 24             	mov    %ebx,(%esp)
+f0103faa:	e8 00 fe ff ff       	call   f0103daf <print_trapframe>
+	env_destroy(curenv);
+f0103faf:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f0103fb4:	89 04 24             	mov    %eax,(%esp)
+f0103fb7:	e8 5a f8 ff ff       	call   f0103816 <env_destroy>
+}
+f0103fbc:	83 c4 14             	add    $0x14,%esp
+f0103fbf:	5b                   	pop    %ebx
+f0103fc0:	5d                   	pop    %ebp
+f0103fc1:	c3                   	ret    
+
+f0103fc2 <trap>:
 	}
 }
 
 void
 trap(struct Trapframe *tf)
 {
-f0103f3a:	55                   	push   %ebp
-f0103f3b:	89 e5                	mov    %esp,%ebp
-f0103f3d:	57                   	push   %edi
-f0103f3e:	56                   	push   %esi
-f0103f3f:	83 ec 10             	sub    $0x10,%esp
-f0103f42:	8b 75 08             	mov    0x8(%ebp),%esi
+f0103fc2:	55                   	push   %ebp
+f0103fc3:	89 e5                	mov    %esp,%ebp
+f0103fc5:	57                   	push   %edi
+f0103fc6:	56                   	push   %esi
+f0103fc7:	83 ec 20             	sub    $0x20,%esp
+f0103fca:	8b 75 08             	mov    0x8(%ebp),%esi
 	// The environment may have set DF and some versions
 	// of GCC rely on DF being clear
 	asm volatile("cld" ::: "cc");
-f0103f45:	fc                   	cld    
+f0103fcd:	fc                   	cld    
 
 static __inline uint32_t
 read_eflags(void)
 {
 	uint32_t eflags;
 	__asm __volatile("pushfl; popl %0" : "=r" (eflags));
-f0103f46:	9c                   	pushf  
-f0103f47:	58                   	pop    %eax
+f0103fce:	9c                   	pushf  
+f0103fcf:	58                   	pop    %eax
 
 	// Check that interrupts are disabled.  If this assertion
 	// fails, DO NOT be tempted to fix it by inserting a "cli" in
 	// the interrupt path.
 	assert(!(read_eflags() & FL_IF));
-f0103f48:	f6 c4 02             	test   $0x2,%ah
-f0103f4b:	74 24                	je     f0103f71 <trap+0x37>
-f0103f4d:	c7 44 24 0c 78 68 10 	movl   $0xf0106878,0xc(%esp)
-f0103f54:	f0 
-f0103f55:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
-f0103f5c:	f0 
-f0103f5d:	c7 44 24 04 d4 00 00 	movl   $0xd4,0x4(%esp)
-f0103f64:	00 
-f0103f65:	c7 04 24 91 68 10 f0 	movl   $0xf0106891,(%esp)
-f0103f6c:	e8 40 c1 ff ff       	call   f01000b1 <_panic>
+f0103fd0:	f6 c4 02             	test   $0x2,%ah
+f0103fd3:	74 24                	je     f0103ff9 <trap+0x37>
+f0103fd5:	c7 44 24 0c 97 6a 10 	movl   $0xf0106a97,0xc(%esp)
+f0103fdc:	f0 
+f0103fdd:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
+f0103fe4:	f0 
+f0103fe5:	c7 44 24 04 e1 00 00 	movl   $0xe1,0x4(%esp)
+f0103fec:	00 
+f0103fed:	c7 04 24 77 6a 10 f0 	movl   $0xf0106a77,(%esp)
+f0103ff4:	e8 b8 c0 ff ff       	call   f01000b1 <_panic>
 
 	cprintf("Incoming TRAP frame at %p\n", tf);
-f0103f71:	89 74 24 04          	mov    %esi,0x4(%esp)
-f0103f75:	c7 04 24 9d 68 10 f0 	movl   $0xf010689d,(%esp)
-f0103f7c:	e8 09 fa ff ff       	call   f010398a <cprintf>
+f0103ff9:	89 74 24 04          	mov    %esi,0x4(%esp)
+f0103ffd:	c7 04 24 b0 6a 10 f0 	movl   $0xf0106ab0,(%esp)
+f0104004:	e8 4d f9 ff ff       	call   f0103956 <cprintf>
 
 	if ((tf->tf_cs & 3) == 3) {
-f0103f81:	66 8b 46 34          	mov    0x34(%esi),%ax
-f0103f85:	83 e0 03             	and    $0x3,%eax
-f0103f88:	66 83 f8 03          	cmp    $0x3,%ax
-f0103f8c:	75 3c                	jne    f0103fca <trap+0x90>
+f0104009:	66 8b 46 34          	mov    0x34(%esi),%ax
+f010400d:	83 e0 03             	and    $0x3,%eax
+f0104010:	66 83 f8 03          	cmp    $0x3,%ax
+f0104014:	75 3c                	jne    f0104052 <trap+0x90>
 		// Trapped from user mode.
 		assert(curenv);
-f0103f8e:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
-f0103f93:	85 c0                	test   %eax,%eax
-f0103f95:	75 24                	jne    f0103fbb <trap+0x81>
-f0103f97:	c7 44 24 0c b8 68 10 	movl   $0xf01068b8,0xc(%esp)
-f0103f9e:	f0 
-f0103f9f:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
-f0103fa6:	f0 
-f0103fa7:	c7 44 24 04 da 00 00 	movl   $0xda,0x4(%esp)
-f0103fae:	00 
-f0103faf:	c7 04 24 91 68 10 f0 	movl   $0xf0106891,(%esp)
-f0103fb6:	e8 f6 c0 ff ff       	call   f01000b1 <_panic>
+f0104016:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f010401b:	85 c0                	test   %eax,%eax
+f010401d:	75 24                	jne    f0104043 <trap+0x81>
+f010401f:	c7 44 24 0c cb 6a 10 	movl   $0xf0106acb,0xc(%esp)
+f0104026:	f0 
+f0104027:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
+f010402e:	f0 
+f010402f:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
+f0104036:	00 
+f0104037:	c7 04 24 77 6a 10 f0 	movl   $0xf0106a77,(%esp)
+f010403e:	e8 6e c0 ff ff       	call   f01000b1 <_panic>
 
 		// Copy trap frame (which is currently on the stack)
 		// into 'curenv->env_tf', so that running the environment
 		// will restart at the trap point.
 		curenv->env_tf = *tf;
-f0103fbb:	b9 11 00 00 00       	mov    $0x11,%ecx
-f0103fc0:	89 c7                	mov    %eax,%edi
-f0103fc2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+f0104043:	b9 11 00 00 00       	mov    $0x11,%ecx
+f0104048:	89 c7                	mov    %eax,%edi
+f010404a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 		// The trapframe on the stack should be ignored from here on.
 		tf = &curenv->env_tf;
-f0103fc4:	8b 35 a4 3c 19 f0    	mov    0xf0193ca4,%esi
+f010404c:	8b 35 a4 3c 19 f0    	mov    0xf0193ca4,%esi
 	}
 
 	// Record that tf is the last real trapframe so
 	// print_trapframe can print some additional information.
 	last_tf = tf;
-f0103fca:	89 35 c0 44 19 f0    	mov    %esi,0xf01944c0
+f0104052:	89 35 c0 44 19 f0    	mov    %esi,0xf01944c0
 static void
 trap_dispatch(struct Trapframe *tf)
 {
 	// Handle processor exceptions.
 	// LAB 3: Your code here.
-	switch(tf->tf_trapno) {
-f0103fd0:	83 7e 28 00          	cmpl   $0x0,0x28(%esi)
-f0103fd4:	75 0c                	jne    f0103fe2 <trap+0xa8>
-		case 0: {
+	cprintf(">> Dispatch <<\n");
+f0104058:	c7 04 24 d2 6a 10 f0 	movl   $0xf0106ad2,(%esp)
+f010405f:	e8 f2 f8 ff ff       	call   f0103956 <cprintf>
+	if(tf->tf_trapno == T_DIVIDE) {
+f0104064:	83 7e 28 00          	cmpl   $0x0,0x28(%esi)
+f0104068:	75 0c                	jne    f0104076 <trap+0xb4>
 			cprintf("1/0 is not allowed!\n");
-f0103fd6:	c7 04 24 bf 68 10 f0 	movl   $0xf01068bf,(%esp)
-f0103fdd:	e8 a8 f9 ff ff       	call   f010398a <cprintf>
-			break;
+f010406a:	c7 04 24 e2 6a 10 f0 	movl   $0xf0106ae2,(%esp)
+f0104071:	e8 e0 f8 ff ff       	call   f0103956 <cprintf>
 		}
-	}
+	if(tf->tf_trapno == T_BRKPT) {
+f0104076:	83 7e 28 03          	cmpl   $0x3,0x28(%esi)
+f010407a:	75 14                	jne    f0104090 <trap+0xce>
+			cprintf("Breakpoint!\n");
+f010407c:	c7 04 24 f7 6a 10 f0 	movl   $0xf0106af7,(%esp)
+f0104083:	e8 ce f8 ff ff       	call   f0103956 <cprintf>
+			monitor(tf);
+f0104088:	89 34 24             	mov    %esi,(%esp)
+f010408b:	e8 dc cc ff ff       	call   f0100d6c <monitor>
+		}
+	if(tf->tf_trapno == T_PGFLT) {
+f0104090:	83 7e 28 0e          	cmpl   $0xe,0x28(%esi)
+f0104094:	75 14                	jne    f01040aa <trap+0xe8>
+			cprintf("Page fault!\n");
+f0104096:	c7 04 24 04 6b 10 f0 	movl   $0xf0106b04,(%esp)
+f010409d:	e8 b4 f8 ff ff       	call   f0103956 <cprintf>
+			page_fault_handler(tf);
+f01040a2:	89 34 24             	mov    %esi,(%esp)
+f01040a5:	e8 87 fe ff ff       	call   f0103f31 <page_fault_handler>
+		}
+	if(tf->tf_trapno == T_SYSCALL) {
+f01040aa:	83 7e 28 30          	cmpl   $0x30,0x28(%esi)
+f01040ae:	75 3b                	jne    f01040eb <trap+0x129>
+			cprintf("System call!\n");
+f01040b0:	c7 04 24 11 6b 10 f0 	movl   $0xf0106b11,(%esp)
+f01040b7:	e8 9a f8 ff ff       	call   f0103956 <cprintf>
+			syscall(tf->tf_regs.reg_eax, tf->tf_regs.reg_edx, tf->tf_regs.reg_ecx,
+f01040bc:	8b 46 04             	mov    0x4(%esi),%eax
+f01040bf:	89 44 24 14          	mov    %eax,0x14(%esp)
+f01040c3:	8b 06                	mov    (%esi),%eax
+f01040c5:	89 44 24 10          	mov    %eax,0x10(%esp)
+f01040c9:	8b 46 10             	mov    0x10(%esi),%eax
+f01040cc:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f01040d0:	8b 46 18             	mov    0x18(%esi),%eax
+f01040d3:	89 44 24 08          	mov    %eax,0x8(%esp)
+f01040d7:	8b 46 14             	mov    0x14(%esi),%eax
+f01040da:	89 44 24 04          	mov    %eax,0x4(%esp)
+f01040de:	8b 46 1c             	mov    0x1c(%esi),%eax
+f01040e1:	89 04 24             	mov    %eax,(%esp)
+f01040e4:	e8 26 02 00 00       	call   f010430f <syscall>
+f01040e9:	eb 38                	jmp    f0104123 <trap+0x161>
+				tf->tf_regs.reg_ebx, tf->tf_regs.reg_edi, tf->tf_regs.reg_esi);
+			return;
+		}
+	
 	// Unexpected trap: The user process or the kernel has a bug.
 	print_trapframe(tf);
-f0103fe2:	89 34 24             	mov    %esi,(%esp)
-f0103fe5:	e8 ce fd ff ff       	call   f0103db8 <print_trapframe>
+f01040eb:	89 34 24             	mov    %esi,(%esp)
+f01040ee:	e8 bc fc ff ff       	call   f0103daf <print_trapframe>
 	if (tf->tf_cs == GD_KT)
-f0103fea:	66 83 7e 34 08       	cmpw   $0x8,0x34(%esi)
-f0103fef:	75 1c                	jne    f010400d <trap+0xd3>
+f01040f3:	66 83 7e 34 08       	cmpw   $0x8,0x34(%esi)
+f01040f8:	75 1c                	jne    f0104116 <trap+0x154>
 		panic("unhandled trap in kernel");
-f0103ff1:	c7 44 24 08 d4 68 10 	movl   $0xf01068d4,0x8(%esp)
-f0103ff8:	f0 
-f0103ff9:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
-f0104000:	00 
-f0104001:	c7 04 24 91 68 10 f0 	movl   $0xf0106891,(%esp)
-f0104008:	e8 a4 c0 ff ff       	call   f01000b1 <_panic>
+f01040fa:	c7 44 24 08 1f 6b 10 	movl   $0xf0106b1f,0x8(%esp)
+f0104101:	f0 
+f0104102:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
+f0104109:	00 
+f010410a:	c7 04 24 77 6a 10 f0 	movl   $0xf0106a77,(%esp)
+f0104111:	e8 9b bf ff ff       	call   f01000b1 <_panic>
 	else {
 		env_destroy(curenv);
-f010400d:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
-f0104012:	89 04 24             	mov    %eax,(%esp)
-f0104015:	e8 30 f8 ff ff       	call   f010384a <env_destroy>
+f0104116:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f010411b:	89 04 24             	mov    %eax,(%esp)
+f010411e:	e8 f3 f6 ff ff       	call   f0103816 <env_destroy>
 
 	// Dispatch based on what type of trap occurred
 	trap_dispatch(tf);
 
 	// Return to the current environment, which should be running.
 	assert(curenv && curenv->env_status == ENV_RUNNING);
-f010401a:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
-f010401f:	85 c0                	test   %eax,%eax
-f0104021:	74 06                	je     f0104029 <trap+0xef>
-f0104023:	83 78 54 03          	cmpl   $0x3,0x54(%eax)
-f0104027:	74 24                	je     f010404d <trap+0x113>
-f0104029:	c7 44 24 0c 30 6a 10 	movl   $0xf0106a30,0xc(%esp)
-f0104030:	f0 
-f0104031:	c7 44 24 08 30 5a 10 	movl   $0xf0105a30,0x8(%esp)
-f0104038:	f0 
-f0104039:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
-f0104040:	00 
-f0104041:	c7 04 24 91 68 10 f0 	movl   $0xf0106891,(%esp)
-f0104048:	e8 64 c0 ff ff       	call   f01000b1 <_panic>
+f0104123:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f0104128:	85 c0                	test   %eax,%eax
+f010412a:	74 06                	je     f0104132 <trap+0x170>
+f010412c:	83 78 54 03          	cmpl   $0x3,0x54(%eax)
+f0104130:	74 24                	je     f0104156 <trap+0x194>
+f0104132:	c7 44 24 0c a0 6c 10 	movl   $0xf0106ca0,0xc(%esp)
+f0104139:	f0 
+f010413a:	c7 44 24 08 70 5c 10 	movl   $0xf0105c70,0x8(%esp)
+f0104141:	f0 
+f0104142:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
+f0104149:	00 
+f010414a:	c7 04 24 77 6a 10 f0 	movl   $0xf0106a77,(%esp)
+f0104151:	e8 5b bf ff ff       	call   f01000b1 <_panic>
 	env_run(curenv);
-f010404d:	89 04 24             	mov    %eax,(%esp)
-f0104050:	e8 4c f8 ff ff       	call   f01038a1 <env_run>
+f0104156:	89 04 24             	mov    %eax,(%esp)
+f0104159:	e8 0f f7 ff ff       	call   f010386d <env_run>
+f010415e:	66 90                	xchg   %ax,%ax
 
-f0104055 <page_fault_handler>:
-}
-
-
-void
-page_fault_handler(struct Trapframe *tf)
-{
-f0104055:	55                   	push   %ebp
-f0104056:	89 e5                	mov    %esp,%ebp
-f0104058:	53                   	push   %ebx
-f0104059:	83 ec 14             	sub    $0x14,%esp
-f010405c:	8b 5d 08             	mov    0x8(%ebp),%ebx
-
-static __inline uint32_t
-rcr2(void)
-{
-	uint32_t val;
-	__asm __volatile("movl %%cr2,%0" : "=r" (val));
-f010405f:	0f 20 d0             	mov    %cr2,%eax
-
-	// We've already handled kernel-mode exceptions, so if we get here,
-	// the page fault happened in user mode.
-
-	// Destroy the environment that caused the fault.
-	cprintf("[%08x] user fault va %08x ip %08x\n",
-f0104062:	8b 53 30             	mov    0x30(%ebx),%edx
-f0104065:	89 54 24 0c          	mov    %edx,0xc(%esp)
-f0104069:	89 44 24 08          	mov    %eax,0x8(%esp)
-f010406d:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
-f0104072:	8b 40 48             	mov    0x48(%eax),%eax
-f0104075:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0104079:	c7 04 24 5c 6a 10 f0 	movl   $0xf0106a5c,(%esp)
-f0104080:	e8 05 f9 ff ff       	call   f010398a <cprintf>
-		curenv->env_id, fault_va, tf->tf_eip);
-	print_trapframe(tf);
-f0104085:	89 1c 24             	mov    %ebx,(%esp)
-f0104088:	e8 2b fd ff ff       	call   f0103db8 <print_trapframe>
-	env_destroy(curenv);
-f010408d:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
-f0104092:	89 04 24             	mov    %eax,(%esp)
-f0104095:	e8 b0 f7 ff ff       	call   f010384a <env_destroy>
-}
-f010409a:	83 c4 14             	add    $0x14,%esp
-f010409d:	5b                   	pop    %ebx
-f010409e:	5d                   	pop    %ebp
-f010409f:	c3                   	ret    
-
-f01040a0 <H_T_DIVIDE>:
+f0104160 <H_T_DIVIDE>:
 .text
 
 /*
  * Lab 3: Your code here for generating entry points for the different traps.
  */
 TRAPHANDLER_NOEC(H_T_DIVIDE ,  0)		
-f01040a0:	6a 00                	push   $0x0
-f01040a2:	6a 00                	push   $0x0
-f01040a4:	eb 58                	jmp    f01040fe <_alltraps>
+f0104160:	6a 00                	push   $0x0
+f0104162:	6a 00                	push   $0x0
+f0104164:	eb 5e                	jmp    f01041c4 <_alltraps>
 
-f01040a6 <H_T_DEBUG>:
+f0104166 <H_T_DEBUG>:
 TRAPHANDLER_NOEC(H_T_DEBUG  ,  1)		
-f01040a6:	6a 00                	push   $0x0
-f01040a8:	6a 01                	push   $0x1
-f01040aa:	eb 52                	jmp    f01040fe <_alltraps>
+f0104166:	6a 00                	push   $0x0
+f0104168:	6a 01                	push   $0x1
+f010416a:	eb 58                	jmp    f01041c4 <_alltraps>
 
-f01040ac <H_T_NMI>:
+f010416c <H_T_NMI>:
 TRAPHANDLER_NOEC(H_T_NMI    ,  2)		
-f01040ac:	6a 00                	push   $0x0
-f01040ae:	6a 02                	push   $0x2
-f01040b0:	eb 4c                	jmp    f01040fe <_alltraps>
+f010416c:	6a 00                	push   $0x0
+f010416e:	6a 02                	push   $0x2
+f0104170:	eb 52                	jmp    f01041c4 <_alltraps>
 
-f01040b2 <H_T_BRKPT>:
+f0104172 <H_T_BRKPT>:
 TRAPHANDLER_NOEC(H_T_BRKPT  ,  3)		
-f01040b2:	6a 00                	push   $0x0
-f01040b4:	6a 03                	push   $0x3
-f01040b6:	eb 46                	jmp    f01040fe <_alltraps>
+f0104172:	6a 00                	push   $0x0
+f0104174:	6a 03                	push   $0x3
+f0104176:	eb 4c                	jmp    f01041c4 <_alltraps>
 
-f01040b8 <H_T_OFLOW>:
+f0104178 <H_T_OFLOW>:
 TRAPHANDLER_NOEC(H_T_OFLOW  ,  4)		
-f01040b8:	6a 00                	push   $0x0
-f01040ba:	6a 04                	push   $0x4
-f01040bc:	eb 40                	jmp    f01040fe <_alltraps>
+f0104178:	6a 00                	push   $0x0
+f010417a:	6a 04                	push   $0x4
+f010417c:	eb 46                	jmp    f01041c4 <_alltraps>
 
-f01040be <H_T_BOUND>:
+f010417e <H_T_BOUND>:
 TRAPHANDLER_NOEC(H_T_BOUND  ,  5)		
-f01040be:	6a 00                	push   $0x0
-f01040c0:	6a 05                	push   $0x5
-f01040c2:	eb 3a                	jmp    f01040fe <_alltraps>
+f010417e:	6a 00                	push   $0x0
+f0104180:	6a 05                	push   $0x5
+f0104182:	eb 40                	jmp    f01041c4 <_alltraps>
 
-f01040c4 <H_T_ILLOP>:
+f0104184 <H_T_ILLOP>:
 TRAPHANDLER_NOEC(H_T_ILLOP  ,  6)		
-f01040c4:	6a 00                	push   $0x0
-f01040c6:	6a 06                	push   $0x6
-f01040c8:	eb 34                	jmp    f01040fe <_alltraps>
+f0104184:	6a 00                	push   $0x0
+f0104186:	6a 06                	push   $0x6
+f0104188:	eb 3a                	jmp    f01041c4 <_alltraps>
 
-f01040ca <H_T_DEVICE>:
+f010418a <H_T_DEVICE>:
 TRAPHANDLER_NOEC(H_T_DEVICE ,  7)		
-f01040ca:	6a 00                	push   $0x0
-f01040cc:	6a 07                	push   $0x7
-f01040ce:	eb 2e                	jmp    f01040fe <_alltraps>
+f010418a:	6a 00                	push   $0x0
+f010418c:	6a 07                	push   $0x7
+f010418e:	eb 34                	jmp    f01041c4 <_alltraps>
 
-f01040d0 <H_T_DBLFLT>:
+f0104190 <H_T_DBLFLT>:
 TRAPHANDLER(H_T_DBLFLT ,  8)		
-f01040d0:	6a 08                	push   $0x8
-f01040d2:	eb 2a                	jmp    f01040fe <_alltraps>
+f0104190:	6a 08                	push   $0x8
+f0104192:	eb 30                	jmp    f01041c4 <_alltraps>
 
-f01040d4 <H_T_TSS>:
+f0104194 <H_T_TSS>:
 TRAPHANDLER(H_T_TSS    , 10)		
-f01040d4:	6a 0a                	push   $0xa
-f01040d6:	eb 26                	jmp    f01040fe <_alltraps>
+f0104194:	6a 0a                	push   $0xa
+f0104196:	eb 2c                	jmp    f01041c4 <_alltraps>
 
-f01040d8 <H_T_SEGNP>:
+f0104198 <H_T_SEGNP>:
 TRAPHANDLER(H_T_SEGNP  , 11)		
-f01040d8:	6a 0b                	push   $0xb
-f01040da:	eb 22                	jmp    f01040fe <_alltraps>
+f0104198:	6a 0b                	push   $0xb
+f010419a:	eb 28                	jmp    f01041c4 <_alltraps>
 
-f01040dc <H_T_STACK>:
+f010419c <H_T_STACK>:
 TRAPHANDLER(H_T_STACK  , 12)		
-f01040dc:	6a 0c                	push   $0xc
-f01040de:	eb 1e                	jmp    f01040fe <_alltraps>
+f010419c:	6a 0c                	push   $0xc
+f010419e:	eb 24                	jmp    f01041c4 <_alltraps>
 
-f01040e0 <H_T_GPFLT>:
+f01041a0 <H_T_GPFLT>:
 TRAPHANDLER(H_T_GPFLT  , 13)		
-f01040e0:	6a 0d                	push   $0xd
-f01040e2:	eb 1a                	jmp    f01040fe <_alltraps>
+f01041a0:	6a 0d                	push   $0xd
+f01041a2:	eb 20                	jmp    f01041c4 <_alltraps>
 
-f01040e4 <H_T_PGFLT>:
+f01041a4 <H_T_PGFLT>:
 TRAPHANDLER(H_T_PGFLT  , 14)		
-f01040e4:	6a 0e                	push   $0xe
-f01040e6:	eb 16                	jmp    f01040fe <_alltraps>
+f01041a4:	6a 0e                	push   $0xe
+f01041a6:	eb 1c                	jmp    f01041c4 <_alltraps>
 
-f01040e8 <H_T_FPERR>:
+f01041a8 <H_T_FPERR>:
 TRAPHANDLER_NOEC(H_T_FPERR  , 16)		
-f01040e8:	6a 00                	push   $0x0
-f01040ea:	6a 10                	push   $0x10
-f01040ec:	eb 10                	jmp    f01040fe <_alltraps>
+f01041a8:	6a 00                	push   $0x0
+f01041aa:	6a 10                	push   $0x10
+f01041ac:	eb 16                	jmp    f01041c4 <_alltraps>
 
-f01040ee <H_T_ALIGN>:
+f01041ae <H_T_ALIGN>:
 TRAPHANDLER(H_T_ALIGN  , 17)		
-f01040ee:	6a 11                	push   $0x11
-f01040f0:	eb 0c                	jmp    f01040fe <_alltraps>
+f01041ae:	6a 11                	push   $0x11
+f01041b0:	eb 12                	jmp    f01041c4 <_alltraps>
 
-f01040f2 <H_T_MCHK>:
+f01041b2 <H_T_MCHK>:
 TRAPHANDLER_NOEC(H_T_MCHK   , 18)		
-f01040f2:	6a 00                	push   $0x0
-f01040f4:	6a 12                	push   $0x12
-f01040f6:	eb 06                	jmp    f01040fe <_alltraps>
+f01041b2:	6a 00                	push   $0x0
+f01041b4:	6a 12                	push   $0x12
+f01041b6:	eb 0c                	jmp    f01041c4 <_alltraps>
 
-f01040f8 <H_T_SIMDERR>:
+f01041b8 <H_T_SIMDERR>:
 TRAPHANDLER_NOEC(H_T_SIMDERR, 19)		
-f01040f8:	6a 00                	push   $0x0
-f01040fa:	6a 13                	push   $0x13
-f01040fc:	eb 00                	jmp    f01040fe <_alltraps>
+f01041b8:	6a 00                	push   $0x0
+f01041ba:	6a 13                	push   $0x13
+f01041bc:	eb 06                	jmp    f01041c4 <_alltraps>
 
-f01040fe <_alltraps>:
+f01041be <H_T_SYSCALL>:
+TRAPHANDLER_NOEC(H_T_SYSCALL, 48)
+f01041be:	6a 00                	push   $0x0
+f01041c0:	6a 30                	push   $0x30
+f01041c2:	eb 00                	jmp    f01041c4 <_alltraps>
+
+f01041c4 <_alltraps>:
 /*
  * Lab 3: Your code here for _alltraps
  */
 
  _alltraps:
  	pushl %ds
-f01040fe:	1e                   	push   %ds
+f01041c4:	1e                   	push   %ds
  	pushl %es
-f01040ff:	06                   	push   %es
+f01041c5:	06                   	push   %es
  	pushal
-f0104100:	60                   	pusha  
+f01041c6:	60                   	pusha  
  	
- 	movl $GD_KD, %ax
-f0104101:	b8 10 00 00 00       	mov    $0x10,%eax
- 	movl %ax, %ds
-f0104106:	8e d8                	mov    %eax,%ds
- 	movl %ax, %es
-f0104108:	8e c0                	mov    %eax,%es
+ 	movl $GD_KD, %eax
+f01041c7:	b8 10 00 00 00       	mov    $0x10,%eax
+ 	movl %eax, %ds
+f01041cc:	8e d8                	mov    %eax,%ds
+ 	movl %eax, %es
+f01041ce:	8e c0                	mov    %eax,%es
 
  	pushl %esp 
-f010410a:	54                   	push   %esp
+f01041d0:	54                   	push   %esp
   call trap
-f010410b:	e8 2a fe ff ff       	call   f0103f3a <trap>
+f01041d1:	e8 ec fd ff ff       	call   f0103fc2 <trap>
+f01041d6:	66 90                	xchg   %ax,%ax
+
+f01041d8 <sys_env_destroy>:
+// Returns 0 on success, < 0 on error.  Errors are:
+//	-E_BAD_ENV if environment envid doesn't currently exist,
+//		or the caller doesn't have permission to change envid.
+static int
+sys_env_destroy(envid_t envid)
+{
+f01041d8:	55                   	push   %ebp
+f01041d9:	89 e5                	mov    %esp,%ebp
+f01041db:	83 ec 28             	sub    $0x28,%esp
+	int r;
+	struct Env *e;
+
+	if ((r = envid2env(envid, &e, 1)) < 0)
+f01041de:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+f01041e5:	00 
+f01041e6:	8d 55 f4             	lea    -0xc(%ebp),%edx
+f01041e9:	89 54 24 04          	mov    %edx,0x4(%esp)
+f01041ed:	89 04 24             	mov    %eax,(%esp)
+f01041f0:	e8 2a f0 ff ff       	call   f010321f <envid2env>
+f01041f5:	85 c0                	test   %eax,%eax
+f01041f7:	78 4c                	js     f0104245 <sys_env_destroy+0x6d>
+		return r;
+	if (e == curenv)
+f01041f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+f01041fc:	8b 15 a4 3c 19 f0    	mov    0xf0193ca4,%edx
+f0104202:	39 d0                	cmp    %edx,%eax
+f0104204:	75 15                	jne    f010421b <sys_env_destroy+0x43>
+		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
+f0104206:	8b 40 48             	mov    0x48(%eax),%eax
+f0104209:	89 44 24 04          	mov    %eax,0x4(%esp)
+f010420d:	c7 04 24 30 6d 10 f0 	movl   $0xf0106d30,(%esp)
+f0104214:	e8 3d f7 ff ff       	call   f0103956 <cprintf>
+f0104219:	eb 1a                	jmp    f0104235 <sys_env_destroy+0x5d>
+	else
+		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
+f010421b:	8b 40 48             	mov    0x48(%eax),%eax
+f010421e:	89 44 24 08          	mov    %eax,0x8(%esp)
+f0104222:	8b 42 48             	mov    0x48(%edx),%eax
+f0104225:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0104229:	c7 04 24 4b 6d 10 f0 	movl   $0xf0106d4b,(%esp)
+f0104230:	e8 21 f7 ff ff       	call   f0103956 <cprintf>
+	env_destroy(e);
+f0104235:	8b 45 f4             	mov    -0xc(%ebp),%eax
+f0104238:	89 04 24             	mov    %eax,(%esp)
+f010423b:	e8 d6 f5 ff ff       	call   f0103816 <env_destroy>
+	return 0;
+f0104240:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+f0104245:	c9                   	leave  
+f0104246:	c3                   	ret    
+
+f0104247 <sys_cputs>:
+// Print a string to the system console.
+// The string is exactly 'len' characters long.
+// Destroys the environment on memory errors.
+static void
+sys_cputs(const char *s, size_t len)
+{
+f0104247:	55                   	push   %ebp
+f0104248:	89 e5                	mov    %esp,%ebp
+f010424a:	57                   	push   %edi
+f010424b:	56                   	push   %esi
+f010424c:	53                   	push   %ebx
+f010424d:	83 ec 2c             	sub    $0x2c,%esp
+f0104250:	89 c7                	mov    %eax,%edi
+f0104252:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+f0104255:	89 55 e0             	mov    %edx,-0x20(%ebp)
+	// Check that the user has permission to read memory [s, s+len).
+	// Destroy the environment if not.
+
+	// LAB 3: Your code here.
+	bool readable = true;
+	void *va = (void *)s;
+f0104258:	89 c3                	mov    %eax,%ebx
+{
+	// Check that the user has permission to read memory [s, s+len).
+	// Destroy the environment if not.
+
+	// LAB 3: Your code here.
+	bool readable = true;
+f010425a:	be 01 00 00 00       	mov    $0x1,%esi
+	void *va = (void *)s;
+	for (;va < (void *)s + len; va += PGSIZE) {
+f010425f:	01 d7                	add    %edx,%edi
+f0104261:	eb 3c                	jmp    f010429f <sys_cputs+0x58>
+		pte_t * p= pgdir_walk(curenv->env_pgdir, va, 0);
+f0104263:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+f010426a:	00 
+f010426b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+f010426f:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f0104274:	8b 40 5c             	mov    0x5c(%eax),%eax
+f0104277:	89 04 24             	mov    %eax,(%esp)
+f010427a:	e8 27 d2 ff ff       	call   f01014a6 <pgdir_walk>
+		if (!p || !(*p & PTE_P) ||!(*p & PTE_U))
+f010427f:	85 c0                	test   %eax,%eax
+f0104281:	74 11                	je     f0104294 <sys_cputs+0x4d>
+f0104283:	8b 00                	mov    (%eax),%eax
+f0104285:	83 e0 05             	and    $0x5,%eax
+f0104288:	83 f8 05             	cmp    $0x5,%eax
+			readable = false;
+f010428b:	0f 94 c0             	sete   %al
+f010428e:	f7 d8                	neg    %eax
+f0104290:	21 c6                	and    %eax,%esi
+f0104292:	eb 05                	jmp    f0104299 <sys_cputs+0x52>
+f0104294:	be 00 00 00 00       	mov    $0x0,%esi
+	// Destroy the environment if not.
+
+	// LAB 3: Your code here.
+	bool readable = true;
+	void *va = (void *)s;
+	for (;va < (void *)s + len; va += PGSIZE) {
+f0104299:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+f010429f:	39 fb                	cmp    %edi,%ebx
+f01042a1:	72 c0                	jb     f0104263 <sys_cputs+0x1c>
+		pte_t * p= pgdir_walk(curenv->env_pgdir, va, 0);
+		if (!p || !(*p & PTE_P) ||!(*p & PTE_U))
+			readable = false;
+	}
+	if (!readable) {
+f01042a3:	89 f0                	mov    %esi,%eax
+f01042a5:	84 c0                	test   %al,%al
+f01042a7:	75 44                	jne    f01042ed <sys_cputs+0xa6>
+		cprintf("[%08x] user_mem_check assertion failure for va %08x\n",
+f01042a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+f01042ac:	89 44 24 08          	mov    %eax,0x8(%esp)
+f01042b0:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f01042b5:	8b 40 48             	mov    0x48(%eax),%eax
+f01042b8:	89 44 24 04          	mov    %eax,0x4(%esp)
+f01042bc:	c7 04 24 84 6d 10 f0 	movl   $0xf0106d84,(%esp)
+f01042c3:	e8 8e f6 ff ff       	call   f0103956 <cprintf>
+			curenv->env_id, s);
+		syscall(SYS_env_destroy, curenv->env_id, 0, 0, 0, 0);
+f01042c8:	a1 a4 3c 19 f0       	mov    0xf0193ca4,%eax
+f01042cd:	8b 58 48             	mov    0x48(%eax),%ebx
+	// Call the function corresponding to the 'syscallno' parameter.
+	// Return any appropriate return value.
+
+	//panic("syscall not implemented");
 
-f0104110 <syscall>:
+	cprintf("syscall! syscallno is %d\n", syscallno);
+f01042d0:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
+f01042d7:	00 
+f01042d8:	c7 04 24 63 6d 10 f0 	movl   $0xf0106d63,(%esp)
+f01042df:	e8 72 f6 ff ff       	call   f0103956 <cprintf>
+	case SYS_getenvid: {
+		sys_getenvid();
+		return 0;
+	}
+	case SYS_env_destroy: {
+		sys_env_destroy((envid_t)a1);
+f01042e4:	89 d8                	mov    %ebx,%eax
+f01042e6:	e8 ed fe ff ff       	call   f01041d8 <sys_env_destroy>
+f01042eb:	eb 1a                	jmp    f0104307 <sys_cputs+0xc0>
+	// 		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
+	// 	env_destroy(e);
+	// 	return;
+	// }
+	// Print the string supplied by the user.
+	cprintf("%.*s", len, s);
+f01042ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+f01042f0:	89 44 24 08          	mov    %eax,0x8(%esp)
+f01042f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f01042f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+f01042fb:	c7 04 24 7d 6d 10 f0 	movl   $0xf0106d7d,(%esp)
+f0104302:	e8 4f f6 ff ff       	call   f0103956 <cprintf>
+}
+f0104307:	83 c4 2c             	add    $0x2c,%esp
+f010430a:	5b                   	pop    %ebx
+f010430b:	5e                   	pop    %esi
+f010430c:	5f                   	pop    %edi
+f010430d:	5d                   	pop    %ebp
+f010430e:	c3                   	ret    
+
+f010430f <syscall>:
 }
 
 // Dispatches to the correct kernel function, passing the arguments.
 int32_t
 syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4, uint32_t a5)
 {
-f0104110:	55                   	push   %ebp
-f0104111:	89 e5                	mov    %esp,%ebp
-f0104113:	83 ec 18             	sub    $0x18,%esp
+f010430f:	55                   	push   %ebp
+f0104310:	89 e5                	mov    %esp,%ebp
+f0104312:	53                   	push   %ebx
+f0104313:	83 ec 14             	sub    $0x14,%esp
+f0104316:	8b 5d 08             	mov    0x8(%ebp),%ebx
 	// Call the function corresponding to the 'syscallno' parameter.
 	// Return any appropriate return value.
-	// LAB 3: Your code here.
 
-	panic("syscall not implemented");
-f0104116:	c7 44 24 08 d0 6a 10 	movl   $0xf0106ad0,0x8(%esp)
-f010411d:	f0 
-f010411e:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
-f0104125:	00 
-f0104126:	c7 04 24 e8 6a 10 f0 	movl   $0xf0106ae8,(%esp)
-f010412d:	e8 7f bf ff ff       	call   f01000b1 <_panic>
-f0104132:	66 90                	xchg   %ax,%ax
+	//panic("syscall not implemented");
+
+	cprintf("syscall! syscallno is %d\n", syscallno);
+f0104319:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+f010431d:	c7 04 24 63 6d 10 f0 	movl   $0xf0106d63,(%esp)
+f0104324:	e8 2d f6 ff ff       	call   f0103956 <cprintf>
+
+	switch (syscallno) {
+f0104329:	83 fb 01             	cmp    $0x1,%ebx
+f010432c:	74 28                	je     f0104356 <syscall+0x47>
+f010432e:	83 fb 01             	cmp    $0x1,%ebx
+f0104331:	72 11                	jb     f0104344 <syscall+0x35>
+f0104333:	83 fb 02             	cmp    $0x2,%ebx
+f0104336:	74 39                	je     f0104371 <syscall+0x62>
+	case SYS_env_destroy: {
+		sys_env_destroy((envid_t)a1);
+		return 0;
+	}
+	default:
+		return -E_NO_SYS;
+f0104338:	b8 f9 ff ff ff       	mov    $0xfffffff9,%eax
+
+	//panic("syscall not implemented");
+
+	cprintf("syscall! syscallno is %d\n", syscallno);
+
+	switch (syscallno) {
+f010433d:	83 fb 03             	cmp    $0x3,%ebx
+f0104340:	75 34                	jne    f0104376 <syscall+0x67>
+f0104342:	eb 1e                	jmp    f0104362 <syscall+0x53>
+	case SYS_cputs: {
+		sys_cputs((const char *)a1, a2);
+f0104344:	8b 55 10             	mov    0x10(%ebp),%edx
+f0104347:	8b 45 0c             	mov    0xc(%ebp),%eax
+f010434a:	e8 f8 fe ff ff       	call   f0104247 <sys_cputs>
+		return 0;
+f010434f:	b8 00 00 00 00       	mov    $0x0,%eax
+f0104354:	eb 20                	jmp    f0104376 <syscall+0x67>
+// Read a character from the system console without blocking.
+// Returns the character, or 0 if there is no input waiting.
+static int
+sys_cgetc(void)
+{
+	return cons_getc();
+f0104356:	e8 9a c1 ff ff       	call   f01004f5 <cons_getc>
+		sys_cputs((const char *)a1, a2);
+		return 0;
+	}
+	case SYS_cgetc: {
+		sys_cgetc();
+		return 0;
+f010435b:	b8 00 00 00 00       	mov    $0x0,%eax
+f0104360:	eb 14                	jmp    f0104376 <syscall+0x67>
+	case SYS_getenvid: {
+		sys_getenvid();
+		return 0;
+	}
+	case SYS_env_destroy: {
+		sys_env_destroy((envid_t)a1);
+f0104362:	8b 45 0c             	mov    0xc(%ebp),%eax
+f0104365:	e8 6e fe ff ff       	call   f01041d8 <sys_env_destroy>
+		return 0;
+f010436a:	b8 00 00 00 00       	mov    $0x0,%eax
+f010436f:	eb 05                	jmp    f0104376 <syscall+0x67>
+		sys_cgetc();
+		return 0;
+	}
+	case SYS_getenvid: {
+		sys_getenvid();
+		return 0;
+f0104371:	b8 00 00 00 00       	mov    $0x0,%eax
+		return 0;
+	}
+	default:
+		return -E_NO_SYS;
+	}
+}
+f0104376:	83 c4 14             	add    $0x14,%esp
+f0104379:	5b                   	pop    %ebx
+f010437a:	5d                   	pop    %ebp
+f010437b:	c3                   	ret    
 
-f0104134 <stab_binsearch>:
+f010437c <stab_binsearch>:
 //	will exit setting left = 118, right = 554.
 //
 static void
 stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
 	       int type, uintptr_t addr)
 {
-f0104134:	55                   	push   %ebp
-f0104135:	89 e5                	mov    %esp,%ebp
-f0104137:	57                   	push   %edi
-f0104138:	56                   	push   %esi
-f0104139:	53                   	push   %ebx
-f010413a:	83 ec 14             	sub    $0x14,%esp
-f010413d:	89 45 ec             	mov    %eax,-0x14(%ebp)
-f0104140:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-f0104143:	89 4d e0             	mov    %ecx,-0x20(%ebp)
-f0104146:	8b 75 08             	mov    0x8(%ebp),%esi
+f010437c:	55                   	push   %ebp
+f010437d:	89 e5                	mov    %esp,%ebp
+f010437f:	57                   	push   %edi
+f0104380:	56                   	push   %esi
+f0104381:	53                   	push   %ebx
+f0104382:	83 ec 14             	sub    $0x14,%esp
+f0104385:	89 45 ec             	mov    %eax,-0x14(%ebp)
+f0104388:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+f010438b:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+f010438e:	8b 75 08             	mov    0x8(%ebp),%esi
 	int l = *region_left, r = *region_right, any_matches = 0;
-f0104149:	8b 1a                	mov    (%edx),%ebx
-f010414b:	8b 01                	mov    (%ecx),%eax
-f010414d:	89 45 f0             	mov    %eax,-0x10(%ebp)
-f0104150:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+f0104391:	8b 1a                	mov    (%edx),%ebx
+f0104393:	8b 01                	mov    (%ecx),%eax
+f0104395:	89 45 f0             	mov    %eax,-0x10(%ebp)
+f0104398:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
 
 	while (l <= r) {
-f0104157:	e9 84 00 00 00       	jmp    f01041e0 <stab_binsearch+0xac>
+f010439f:	e9 84 00 00 00       	jmp    f0104428 <stab_binsearch+0xac>
 		int true_m = (l + r) / 2, m = true_m;
-f010415c:	8b 45 f0             	mov    -0x10(%ebp),%eax
-f010415f:	01 d8                	add    %ebx,%eax
-f0104161:	89 c7                	mov    %eax,%edi
-f0104163:	c1 ef 1f             	shr    $0x1f,%edi
-f0104166:	01 c7                	add    %eax,%edi
-f0104168:	d1 ff                	sar    %edi
-f010416a:	8d 04 7f             	lea    (%edi,%edi,2),%eax
-f010416d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
-f0104170:	8d 14 81             	lea    (%ecx,%eax,4),%edx
-f0104173:	89 f8                	mov    %edi,%eax
+f01043a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+f01043a7:	01 d8                	add    %ebx,%eax
+f01043a9:	89 c7                	mov    %eax,%edi
+f01043ab:	c1 ef 1f             	shr    $0x1f,%edi
+f01043ae:	01 c7                	add    %eax,%edi
+f01043b0:	d1 ff                	sar    %edi
+f01043b2:	8d 04 7f             	lea    (%edi,%edi,2),%eax
+f01043b5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+f01043b8:	8d 14 81             	lea    (%ecx,%eax,4),%edx
+f01043bb:	89 f8                	mov    %edi,%eax
 
 		// search for earliest stab with right type
 		while (m >= l && stabs[m].n_type != type)
-f0104175:	eb 01                	jmp    f0104178 <stab_binsearch+0x44>
+f01043bd:	eb 01                	jmp    f01043c0 <stab_binsearch+0x44>
 			m--;
-f0104177:	48                   	dec    %eax
+f01043bf:	48                   	dec    %eax
 
 	while (l <= r) {
 		int true_m = (l + r) / 2, m = true_m;
 
 		// search for earliest stab with right type
 		while (m >= l && stabs[m].n_type != type)
-f0104178:	39 c3                	cmp    %eax,%ebx
-f010417a:	7f 20                	jg     f010419c <stab_binsearch+0x68>
-f010417c:	31 c9                	xor    %ecx,%ecx
-f010417e:	8a 4a 04             	mov    0x4(%edx),%cl
-f0104181:	83 ea 0c             	sub    $0xc,%edx
-f0104184:	39 f1                	cmp    %esi,%ecx
-f0104186:	75 ef                	jne    f0104177 <stab_binsearch+0x43>
-f0104188:	89 45 e8             	mov    %eax,-0x18(%ebp)
+f01043c0:	39 c3                	cmp    %eax,%ebx
+f01043c2:	7f 20                	jg     f01043e4 <stab_binsearch+0x68>
+f01043c4:	31 c9                	xor    %ecx,%ecx
+f01043c6:	8a 4a 04             	mov    0x4(%edx),%cl
+f01043c9:	83 ea 0c             	sub    $0xc,%edx
+f01043cc:	39 f1                	cmp    %esi,%ecx
+f01043ce:	75 ef                	jne    f01043bf <stab_binsearch+0x43>
+f01043d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
 			continue;
 		}
 
 		// actual binary search
 		any_matches = 1;
 		if (stabs[m].n_value < addr) {
-f010418b:	8d 14 40             	lea    (%eax,%eax,2),%edx
-f010418e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
-f0104191:	8b 54 91 08          	mov    0x8(%ecx,%edx,4),%edx
-f0104195:	39 55 0c             	cmp    %edx,0xc(%ebp)
-f0104198:	76 18                	jbe    f01041b2 <stab_binsearch+0x7e>
-f010419a:	eb 05                	jmp    f01041a1 <stab_binsearch+0x6d>
+f01043d3:	8d 14 40             	lea    (%eax,%eax,2),%edx
+f01043d6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+f01043d9:	8b 54 91 08          	mov    0x8(%ecx,%edx,4),%edx
+f01043dd:	39 55 0c             	cmp    %edx,0xc(%ebp)
+f01043e0:	76 18                	jbe    f01043fa <stab_binsearch+0x7e>
+f01043e2:	eb 05                	jmp    f01043e9 <stab_binsearch+0x6d>
 
 		// search for earliest stab with right type
 		while (m >= l && stabs[m].n_type != type)
 			m--;
 		if (m < l) {	// no match in [l, m]
 			l = true_m + 1;
-f010419c:	8d 5f 01             	lea    0x1(%edi),%ebx
+f01043e4:	8d 5f 01             	lea    0x1(%edi),%ebx
 			continue;
-f010419f:	eb 3f                	jmp    f01041e0 <stab_binsearch+0xac>
+f01043e7:	eb 3f                	jmp    f0104428 <stab_binsearch+0xac>
 		}
 
 		// actual binary search
 		any_matches = 1;
 		if (stabs[m].n_value < addr) {
 			*region_left = m;
-f01041a1:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-f01041a4:	89 03                	mov    %eax,(%ebx)
+f01043e9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+f01043ec:	89 03                	mov    %eax,(%ebx)
 			l = true_m + 1;
-f01041a6:	8d 5f 01             	lea    0x1(%edi),%ebx
+f01043ee:	8d 5f 01             	lea    0x1(%edi),%ebx
 			l = true_m + 1;
 			continue;
 		}
 
 		// actual binary search
 		any_matches = 1;
-f01041a9:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
-f01041b0:	eb 2e                	jmp    f01041e0 <stab_binsearch+0xac>
+f01043f1:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
+f01043f8:	eb 2e                	jmp    f0104428 <stab_binsearch+0xac>
 		if (stabs[m].n_value < addr) {
 			*region_left = m;
 			l = true_m + 1;
 		} else if (stabs[m].n_value > addr) {
-f01041b2:	39 55 0c             	cmp    %edx,0xc(%ebp)
-f01041b5:	73 15                	jae    f01041cc <stab_binsearch+0x98>
+f01043fa:	39 55 0c             	cmp    %edx,0xc(%ebp)
+f01043fd:	73 15                	jae    f0104414 <stab_binsearch+0x98>
 			*region_right = m - 1;
-f01041b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
-f01041ba:	48                   	dec    %eax
-f01041bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
-f01041be:	8b 7d e0             	mov    -0x20(%ebp),%edi
-f01041c1:	89 07                	mov    %eax,(%edi)
+f01043ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
+f0104402:	48                   	dec    %eax
+f0104403:	89 45 f0             	mov    %eax,-0x10(%ebp)
+f0104406:	8b 7d e0             	mov    -0x20(%ebp),%edi
+f0104409:	89 07                	mov    %eax,(%edi)
 			l = true_m + 1;
 			continue;
 		}
 
 		// actual binary search
 		any_matches = 1;
-f01041c3:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
-f01041ca:	eb 14                	jmp    f01041e0 <stab_binsearch+0xac>
+f010440b:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
+f0104412:	eb 14                	jmp    f0104428 <stab_binsearch+0xac>
 			*region_right = m - 1;
 			r = m - 1;
 		} else {
 			// exact match for 'addr', but continue loop to find
 			// *region_right
 			*region_left = m;
-f01041cc:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-f01041cf:	8b 5d e8             	mov    -0x18(%ebp),%ebx
-f01041d2:	89 1f                	mov    %ebx,(%edi)
+f0104414:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+f0104417:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+f010441a:	89 1f                	mov    %ebx,(%edi)
 			l = m;
 			addr++;
-f01041d4:	ff 45 0c             	incl   0xc(%ebp)
-f01041d7:	89 c3                	mov    %eax,%ebx
+f010441c:	ff 45 0c             	incl   0xc(%ebp)
+f010441f:	89 c3                	mov    %eax,%ebx
 			l = true_m + 1;
 			continue;
 		}
 
 		// actual binary search
 		any_matches = 1;
-f01041d9:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
+f0104421:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
 stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
 	       int type, uintptr_t addr)
 {
 	int l = *region_left, r = *region_right, any_matches = 0;
 
 	while (l <= r) {
-f01041e0:	3b 5d f0             	cmp    -0x10(%ebp),%ebx
-f01041e3:	0f 8e 73 ff ff ff    	jle    f010415c <stab_binsearch+0x28>
+f0104428:	3b 5d f0             	cmp    -0x10(%ebp),%ebx
+f010442b:	0f 8e 73 ff ff ff    	jle    f01043a4 <stab_binsearch+0x28>
 			l = m;
 			addr++;
 		}
 	}
 
 	if (!any_matches)
-f01041e9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-f01041ed:	75 0d                	jne    f01041fc <stab_binsearch+0xc8>
+f0104431:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+f0104435:	75 0d                	jne    f0104444 <stab_binsearch+0xc8>
 		*region_right = *region_left - 1;
-f01041ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-f01041f2:	8b 00                	mov    (%eax),%eax
-f01041f4:	48                   	dec    %eax
-f01041f5:	8b 7d e0             	mov    -0x20(%ebp),%edi
-f01041f8:	89 07                	mov    %eax,(%edi)
-f01041fa:	eb 2b                	jmp    f0104227 <stab_binsearch+0xf3>
+f0104437:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+f010443a:	8b 00                	mov    (%eax),%eax
+f010443c:	48                   	dec    %eax
+f010443d:	8b 7d e0             	mov    -0x20(%ebp),%edi
+f0104440:	89 07                	mov    %eax,(%edi)
+f0104442:	eb 2b                	jmp    f010446f <stab_binsearch+0xf3>
 	else {
 		// find rightmost region containing 'addr'
 		for (l = *region_right;
-f01041fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
-f01041ff:	8b 00                	mov    (%eax),%eax
+f0104444:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f0104447:	8b 00                	mov    (%eax),%eax
 		     l > *region_left && stabs[l].n_type != type;
-f0104201:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-f0104204:	8b 0f                	mov    (%edi),%ecx
-f0104206:	8d 14 40             	lea    (%eax,%eax,2),%edx
-f0104209:	8b 7d ec             	mov    -0x14(%ebp),%edi
-f010420c:	8d 14 97             	lea    (%edi,%edx,4),%edx
+f0104449:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+f010444c:	8b 0f                	mov    (%edi),%ecx
+f010444e:	8d 14 40             	lea    (%eax,%eax,2),%edx
+f0104451:	8b 7d ec             	mov    -0x14(%ebp),%edi
+f0104454:	8d 14 97             	lea    (%edi,%edx,4),%edx
 
 	if (!any_matches)
 		*region_right = *region_left - 1;
 	else {
 		// find rightmost region containing 'addr'
 		for (l = *region_right;
-f010420f:	eb 01                	jmp    f0104212 <stab_binsearch+0xde>
+f0104457:	eb 01                	jmp    f010445a <stab_binsearch+0xde>
 		     l > *region_left && stabs[l].n_type != type;
 		     l--)
-f0104211:	48                   	dec    %eax
+f0104459:	48                   	dec    %eax
 
 	if (!any_matches)
 		*region_right = *region_left - 1;
 	else {
 		// find rightmost region containing 'addr'
 		for (l = *region_right;
-f0104212:	39 c8                	cmp    %ecx,%eax
-f0104214:	7e 0c                	jle    f0104222 <stab_binsearch+0xee>
+f010445a:	39 c8                	cmp    %ecx,%eax
+f010445c:	7e 0c                	jle    f010446a <stab_binsearch+0xee>
 		     l > *region_left && stabs[l].n_type != type;
-f0104216:	31 db                	xor    %ebx,%ebx
-f0104218:	8a 5a 04             	mov    0x4(%edx),%bl
-f010421b:	83 ea 0c             	sub    $0xc,%edx
-f010421e:	39 f3                	cmp    %esi,%ebx
-f0104220:	75 ef                	jne    f0104211 <stab_binsearch+0xdd>
+f010445e:	31 db                	xor    %ebx,%ebx
+f0104460:	8a 5a 04             	mov    0x4(%edx),%bl
+f0104463:	83 ea 0c             	sub    $0xc,%edx
+f0104466:	39 f3                	cmp    %esi,%ebx
+f0104468:	75 ef                	jne    f0104459 <stab_binsearch+0xdd>
 		     l--)
 			/* do nothing */;
 		*region_left = l;
-f0104222:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-f0104225:	89 07                	mov    %eax,(%edi)
+f010446a:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+f010446d:	89 07                	mov    %eax,(%edi)
 	}
 }
-f0104227:	83 c4 14             	add    $0x14,%esp
-f010422a:	5b                   	pop    %ebx
-f010422b:	5e                   	pop    %esi
-f010422c:	5f                   	pop    %edi
-f010422d:	5d                   	pop    %ebp
-f010422e:	c3                   	ret    
-
-f010422f <debuginfo_eip>:
+f010446f:	83 c4 14             	add    $0x14,%esp
+f0104472:	5b                   	pop    %ebx
+f0104473:	5e                   	pop    %esi
+f0104474:	5f                   	pop    %edi
+f0104475:	5d                   	pop    %ebp
+f0104476:	c3                   	ret    
+
+f0104477 <debuginfo_eip>:
 //	negative if not.  But even if it returns negative it has stored some
 //	information into '*info'.
 //
 int
 debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)
 {
-f010422f:	55                   	push   %ebp
-f0104230:	89 e5                	mov    %esp,%ebp
-f0104232:	57                   	push   %edi
-f0104233:	56                   	push   %esi
-f0104234:	53                   	push   %ebx
-f0104235:	83 ec 4c             	sub    $0x4c,%esp
-f0104238:	8b 75 08             	mov    0x8(%ebp),%esi
-f010423b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+f0104477:	55                   	push   %ebp
+f0104478:	89 e5                	mov    %esp,%ebp
+f010447a:	57                   	push   %edi
+f010447b:	56                   	push   %esi
+f010447c:	53                   	push   %ebx
+f010447d:	83 ec 4c             	sub    $0x4c,%esp
+f0104480:	8b 75 08             	mov    0x8(%ebp),%esi
+f0104483:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 	const struct Stab *stabs, *stab_end;
 	const char *stabstr, *stabstr_end;
 	int lfile, rfile, lfun, rfun, lline, rline;
 
 	// Initialize *info
 	info->eip_file = "<unknown>";
-f010423e:	c7 03 f7 6a 10 f0    	movl   $0xf0106af7,(%ebx)
+f0104486:	c7 03 bc 6d 10 f0    	movl   $0xf0106dbc,(%ebx)
 	info->eip_line = 0;
-f0104244:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
+f010448c:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
 	info->eip_fn_name = "<unknown>";
-f010424b:	c7 43 08 f7 6a 10 f0 	movl   $0xf0106af7,0x8(%ebx)
+f0104493:	c7 43 08 bc 6d 10 f0 	movl   $0xf0106dbc,0x8(%ebx)
 	info->eip_fn_namelen = 9;
-f0104252:	c7 43 0c 09 00 00 00 	movl   $0x9,0xc(%ebx)
+f010449a:	c7 43 0c 09 00 00 00 	movl   $0x9,0xc(%ebx)
 	info->eip_fn_addr = addr;
-f0104259:	89 73 10             	mov    %esi,0x10(%ebx)
+f01044a1:	89 73 10             	mov    %esi,0x10(%ebx)
 	info->eip_fn_narg = 0;
-f010425c:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+f01044a4:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
 
 	// Find the relevant set of stabs
 	if (addr >= ULIM) {
-f0104263:	81 fe ff ff 7f ef    	cmp    $0xef7fffff,%esi
-f0104269:	77 21                	ja     f010428c <debuginfo_eip+0x5d>
+f01044ab:	81 fe ff ff 7f ef    	cmp    $0xef7fffff,%esi
+f01044b1:	77 21                	ja     f01044d4 <debuginfo_eip+0x5d>
 
 		// Make sure this memory is valid.
 		// Return -1 if it is not.  Hint: Call user_mem_check.
 		// LAB 3: Your code here.
 
 		stabs = usd->stabs;
-f010426b:	a1 00 00 20 00       	mov    0x200000,%eax
-f0104270:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+f01044b3:	a1 00 00 20 00       	mov    0x200000,%eax
+f01044b8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 		stab_end = usd->stab_end;
-f0104273:	a1 04 00 20 00       	mov    0x200004,%eax
+f01044bb:	a1 04 00 20 00       	mov    0x200004,%eax
 		stabstr = usd->stabstr;
-f0104278:	8b 3d 08 00 20 00    	mov    0x200008,%edi
-f010427e:	89 7d c0             	mov    %edi,-0x40(%ebp)
+f01044c0:	8b 3d 08 00 20 00    	mov    0x200008,%edi
+f01044c6:	89 7d c0             	mov    %edi,-0x40(%ebp)
 		stabstr_end = usd->stabstr_end;
-f0104281:	8b 3d 0c 00 20 00    	mov    0x20000c,%edi
-f0104287:	89 7d bc             	mov    %edi,-0x44(%ebp)
-f010428a:	eb 1a                	jmp    f01042a6 <debuginfo_eip+0x77>
+f01044c9:	8b 3d 0c 00 20 00    	mov    0x20000c,%edi
+f01044cf:	89 7d bc             	mov    %edi,-0x44(%ebp)
+f01044d2:	eb 1a                	jmp    f01044ee <debuginfo_eip+0x77>
 	// Find the relevant set of stabs
 	if (addr >= ULIM) {
 		stabs = __STAB_BEGIN__;
 		stab_end = __STAB_END__;
 		stabstr = __STABSTR_BEGIN__;
 		stabstr_end = __STABSTR_END__;
-f010428c:	c7 45 bc 29 19 11 f0 	movl   $0xf0111929,-0x44(%ebp)
+f01044d4:	c7 45 bc cb 1f 11 f0 	movl   $0xf0111fcb,-0x44(%ebp)
 
 	// Find the relevant set of stabs
 	if (addr >= ULIM) {
 		stabs = __STAB_BEGIN__;
 		stab_end = __STAB_END__;
 		stabstr = __STABSTR_BEGIN__;
-f0104293:	c7 45 c0 85 ee 10 f0 	movl   $0xf010ee85,-0x40(%ebp)
+f01044db:	c7 45 c0 a5 f4 10 f0 	movl   $0xf010f4a5,-0x40(%ebp)
 	info->eip_fn_narg = 0;
 
 	// Find the relevant set of stabs
 	if (addr >= ULIM) {
 		stabs = __STAB_BEGIN__;
 		stab_end = __STAB_END__;
-f010429a:	b8 84 ee 10 f0       	mov    $0xf010ee84,%eax
+f01044e2:	b8 a4 f4 10 f0       	mov    $0xf010f4a4,%eax
 	info->eip_fn_addr = addr;
 	info->eip_fn_narg = 0;
 
 	// Find the relevant set of stabs
 	if (addr >= ULIM) {
 		stabs = __STAB_BEGIN__;
-f010429f:	c7 45 c4 30 6d 10 f0 	movl   $0xf0106d30,-0x3c(%ebp)
+f01044e7:	c7 45 c4 f0 6f 10 f0 	movl   $0xf0106ff0,-0x3c(%ebp)
 		// Make sure the STABS and string table memory is valid.
 		// LAB 3: Your code here.
 	}
 
 	// String table validity checks
 	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
-f01042a6:	8b 7d bc             	mov    -0x44(%ebp),%edi
-f01042a9:	39 7d c0             	cmp    %edi,-0x40(%ebp)
-f01042ac:	0f 83 ad 01 00 00    	jae    f010445f <debuginfo_eip+0x230>
-f01042b2:	80 7f ff 00          	cmpb   $0x0,-0x1(%edi)
-f01042b6:	0f 85 aa 01 00 00    	jne    f0104466 <debuginfo_eip+0x237>
+f01044ee:	8b 7d bc             	mov    -0x44(%ebp),%edi
+f01044f1:	39 7d c0             	cmp    %edi,-0x40(%ebp)
+f01044f4:	0f 83 ad 01 00 00    	jae    f01046a7 <debuginfo_eip+0x230>
+f01044fa:	80 7f ff 00          	cmpb   $0x0,-0x1(%edi)
+f01044fe:	0f 85 aa 01 00 00    	jne    f01046ae <debuginfo_eip+0x237>
 	// 'eip'.  First, we find the basic source file containing 'eip'.
 	// Then, we look in that source file for the function.  Then we look
 	// for the line number.
 
 	// Search the entire set of stabs for the source file (type N_SO).
 	lfile = 0;
-f01042bc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+f0104504:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 	rfile = (stab_end - stabs) - 1;
-f01042c3:	8b 7d c4             	mov    -0x3c(%ebp),%edi
-f01042c6:	29 f8                	sub    %edi,%eax
-f01042c8:	c1 f8 02             	sar    $0x2,%eax
-f01042cb:	8d 14 80             	lea    (%eax,%eax,4),%edx
-f01042ce:	89 d1                	mov    %edx,%ecx
-f01042d0:	c1 e1 04             	shl    $0x4,%ecx
-f01042d3:	01 ca                	add    %ecx,%edx
-f01042d5:	89 d1                	mov    %edx,%ecx
-f01042d7:	c1 e1 08             	shl    $0x8,%ecx
-f01042da:	01 ca                	add    %ecx,%edx
-f01042dc:	89 d1                	mov    %edx,%ecx
-f01042de:	c1 e1 10             	shl    $0x10,%ecx
-f01042e1:	01 ca                	add    %ecx,%edx
-f01042e3:	8d 44 50 ff          	lea    -0x1(%eax,%edx,2),%eax
-f01042e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
+f010450b:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+f010450e:	29 f8                	sub    %edi,%eax
+f0104510:	c1 f8 02             	sar    $0x2,%eax
+f0104513:	8d 14 80             	lea    (%eax,%eax,4),%edx
+f0104516:	89 d1                	mov    %edx,%ecx
+f0104518:	c1 e1 04             	shl    $0x4,%ecx
+f010451b:	01 ca                	add    %ecx,%edx
+f010451d:	89 d1                	mov    %edx,%ecx
+f010451f:	c1 e1 08             	shl    $0x8,%ecx
+f0104522:	01 ca                	add    %ecx,%edx
+f0104524:	89 d1                	mov    %edx,%ecx
+f0104526:	c1 e1 10             	shl    $0x10,%ecx
+f0104529:	01 ca                	add    %ecx,%edx
+f010452b:	8d 44 50 ff          	lea    -0x1(%eax,%edx,2),%eax
+f010452f:	89 45 e0             	mov    %eax,-0x20(%ebp)
 	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
-f01042ea:	89 74 24 04          	mov    %esi,0x4(%esp)
-f01042ee:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
-f01042f5:	8d 4d e0             	lea    -0x20(%ebp),%ecx
-f01042f8:	8d 55 e4             	lea    -0x1c(%ebp),%edx
-f01042fb:	89 f8                	mov    %edi,%eax
-f01042fd:	e8 32 fe ff ff       	call   f0104134 <stab_binsearch>
+f0104532:	89 74 24 04          	mov    %esi,0x4(%esp)
+f0104536:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
+f010453d:	8d 4d e0             	lea    -0x20(%ebp),%ecx
+f0104540:	8d 55 e4             	lea    -0x1c(%ebp),%edx
+f0104543:	89 f8                	mov    %edi,%eax
+f0104545:	e8 32 fe ff ff       	call   f010437c <stab_binsearch>
 	if (lfile == 0)
-f0104302:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-f0104305:	85 c0                	test   %eax,%eax
-f0104307:	0f 84 60 01 00 00    	je     f010446d <debuginfo_eip+0x23e>
+f010454a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+f010454d:	85 c0                	test   %eax,%eax
+f010454f:	0f 84 60 01 00 00    	je     f01046b5 <debuginfo_eip+0x23e>
 		return -1;
 
 	// Search within that file's stabs for the function definition
 	// (N_FUN).
 	lfun = lfile;
-f010430d:	89 45 dc             	mov    %eax,-0x24(%ebp)
+f0104555:	89 45 dc             	mov    %eax,-0x24(%ebp)
 	rfun = rfile;
-f0104310:	8b 45 e0             	mov    -0x20(%ebp),%eax
-f0104313:	89 45 d8             	mov    %eax,-0x28(%ebp)
+f0104558:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f010455b:	89 45 d8             	mov    %eax,-0x28(%ebp)
 	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
-f0104316:	89 74 24 04          	mov    %esi,0x4(%esp)
-f010431a:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
-f0104321:	8d 4d d8             	lea    -0x28(%ebp),%ecx
-f0104324:	8d 55 dc             	lea    -0x24(%ebp),%edx
-f0104327:	89 f8                	mov    %edi,%eax
-f0104329:	e8 06 fe ff ff       	call   f0104134 <stab_binsearch>
+f010455e:	89 74 24 04          	mov    %esi,0x4(%esp)
+f0104562:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
+f0104569:	8d 4d d8             	lea    -0x28(%ebp),%ecx
+f010456c:	8d 55 dc             	lea    -0x24(%ebp),%edx
+f010456f:	89 f8                	mov    %edi,%eax
+f0104571:	e8 06 fe ff ff       	call   f010437c <stab_binsearch>
 
 	if (lfun <= rfun) {
-f010432e:	8b 45 dc             	mov    -0x24(%ebp),%eax
-f0104331:	8b 7d d8             	mov    -0x28(%ebp),%edi
-f0104334:	39 f8                	cmp    %edi,%eax
-f0104336:	7f 32                	jg     f010436a <debuginfo_eip+0x13b>
+f0104576:	8b 45 dc             	mov    -0x24(%ebp),%eax
+f0104579:	8b 7d d8             	mov    -0x28(%ebp),%edi
+f010457c:	39 f8                	cmp    %edi,%eax
+f010457e:	7f 32                	jg     f01045b2 <debuginfo_eip+0x13b>
 		// stabs[lfun] points to the function name
 		// in the string table, but check bounds just in case.
 		if (stabs[lfun].n_strx < stabstr_end - stabstr)
-f0104338:	8d 14 40             	lea    (%eax,%eax,2),%edx
-f010433b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
-f010433e:	8d 14 91             	lea    (%ecx,%edx,4),%edx
-f0104341:	8b 0a                	mov    (%edx),%ecx
-f0104343:	89 4d b8             	mov    %ecx,-0x48(%ebp)
-f0104346:	8b 4d bc             	mov    -0x44(%ebp),%ecx
-f0104349:	2b 4d c0             	sub    -0x40(%ebp),%ecx
-f010434c:	39 4d b8             	cmp    %ecx,-0x48(%ebp)
-f010434f:	73 09                	jae    f010435a <debuginfo_eip+0x12b>
+f0104580:	8d 14 40             	lea    (%eax,%eax,2),%edx
+f0104583:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+f0104586:	8d 14 91             	lea    (%ecx,%edx,4),%edx
+f0104589:	8b 0a                	mov    (%edx),%ecx
+f010458b:	89 4d b8             	mov    %ecx,-0x48(%ebp)
+f010458e:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+f0104591:	2b 4d c0             	sub    -0x40(%ebp),%ecx
+f0104594:	39 4d b8             	cmp    %ecx,-0x48(%ebp)
+f0104597:	73 09                	jae    f01045a2 <debuginfo_eip+0x12b>
 			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
-f0104351:	8b 4d b8             	mov    -0x48(%ebp),%ecx
-f0104354:	03 4d c0             	add    -0x40(%ebp),%ecx
-f0104357:	89 4b 08             	mov    %ecx,0x8(%ebx)
+f0104599:	8b 4d b8             	mov    -0x48(%ebp),%ecx
+f010459c:	03 4d c0             	add    -0x40(%ebp),%ecx
+f010459f:	89 4b 08             	mov    %ecx,0x8(%ebx)
 		info->eip_fn_addr = stabs[lfun].n_value;
-f010435a:	8b 52 08             	mov    0x8(%edx),%edx
-f010435d:	89 53 10             	mov    %edx,0x10(%ebx)
+f01045a2:	8b 52 08             	mov    0x8(%edx),%edx
+f01045a5:	89 53 10             	mov    %edx,0x10(%ebx)
 		addr -= info->eip_fn_addr;
-f0104360:	29 d6                	sub    %edx,%esi
+f01045a8:	29 d6                	sub    %edx,%esi
 		// Search within the function definition for the line number.
 		lline = lfun;
-f0104362:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+f01045aa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 		rline = rfun;
-f0104365:	89 7d d0             	mov    %edi,-0x30(%ebp)
-f0104368:	eb 0f                	jmp    f0104379 <debuginfo_eip+0x14a>
+f01045ad:	89 7d d0             	mov    %edi,-0x30(%ebp)
+f01045b0:	eb 0f                	jmp    f01045c1 <debuginfo_eip+0x14a>
 	} else {
 		// Couldn't find function stab!  Maybe we're in an assembly
 		// file.  Search the whole file for the line number.
 		info->eip_fn_addr = addr;
-f010436a:	89 73 10             	mov    %esi,0x10(%ebx)
+f01045b2:	89 73 10             	mov    %esi,0x10(%ebx)
 		lline = lfile;
-f010436d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-f0104370:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+f01045b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+f01045b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 		rline = rfile;
-f0104373:	8b 45 e0             	mov    -0x20(%ebp),%eax
-f0104376:	89 45 d0             	mov    %eax,-0x30(%ebp)
+f01045bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f01045be:	89 45 d0             	mov    %eax,-0x30(%ebp)
 	}
 	// Ignore stuff after the colon.
 	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
-f0104379:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
-f0104380:	00 
-f0104381:	8b 43 08             	mov    0x8(%ebx),%eax
-f0104384:	89 04 24             	mov    %eax,(%esp)
-f0104387:	e8 bf 08 00 00       	call   f0104c4b <strfind>
-f010438c:	2b 43 08             	sub    0x8(%ebx),%eax
-f010438f:	89 43 0c             	mov    %eax,0xc(%ebx)
+f01045c1:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
+f01045c8:	00 
+f01045c9:	8b 43 08             	mov    0x8(%ebx),%eax
+f01045cc:	89 04 24             	mov    %eax,(%esp)
+f01045cf:	e8 bf 08 00 00       	call   f0104e93 <strfind>
+f01045d4:	2b 43 08             	sub    0x8(%ebx),%eax
+f01045d7:	89 43 0c             	mov    %eax,0xc(%ebx)
 	// Hint:
 	//	There's a particular stabs type used for line numbers.
 	//	Look at the STABS documentation and <inc/stab.h> to find
 	//	which one.
 	// Your code here.
 	stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
-f0104392:	89 74 24 04          	mov    %esi,0x4(%esp)
-f0104396:	c7 04 24 44 00 00 00 	movl   $0x44,(%esp)
-f010439d:	8d 4d d0             	lea    -0x30(%ebp),%ecx
-f01043a0:	8d 55 d4             	lea    -0x2c(%ebp),%edx
-f01043a3:	8b 7d c4             	mov    -0x3c(%ebp),%edi
-f01043a6:	89 f8                	mov    %edi,%eax
-f01043a8:	e8 87 fd ff ff       	call   f0104134 <stab_binsearch>
+f01045da:	89 74 24 04          	mov    %esi,0x4(%esp)
+f01045de:	c7 04 24 44 00 00 00 	movl   $0x44,(%esp)
+f01045e5:	8d 4d d0             	lea    -0x30(%ebp),%ecx
+f01045e8:	8d 55 d4             	lea    -0x2c(%ebp),%edx
+f01045eb:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+f01045ee:	89 f8                	mov    %edi,%eax
+f01045f0:	e8 87 fd ff ff       	call   f010437c <stab_binsearch>
 	if (lline <= rline)
-f01043ad:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-f01043b0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
-f01043b3:	0f 8f bb 00 00 00    	jg     f0104474 <debuginfo_eip+0x245>
+f01045f5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+f01045f8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+f01045fb:	0f 8f bb 00 00 00    	jg     f01046bc <debuginfo_eip+0x245>
 		info->eip_line = stabs[lline].n_desc;
-f01043b9:	8d 04 40             	lea    (%eax,%eax,2),%eax
-f01043bc:	66 8b 74 87 06       	mov    0x6(%edi,%eax,4),%si
-f01043c1:	81 e6 ff ff 00 00    	and    $0xffff,%esi
-f01043c7:	89 73 04             	mov    %esi,0x4(%ebx)
+f0104601:	8d 04 40             	lea    (%eax,%eax,2),%eax
+f0104604:	66 8b 74 87 06       	mov    0x6(%edi,%eax,4),%si
+f0104609:	81 e6 ff ff 00 00    	and    $0xffff,%esi
+f010460f:	89 73 04             	mov    %esi,0x4(%ebx)
 	// Search backwards from the line number for the relevant filename
 	// stab.
 	// We can't just use the "lfile" stab because inlined functions
 	// can interpolate code from a different file!
 	// Such included source files use the N_SOL stab type.
 	while (lline >= lfile
-f01043ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-f01043cd:	89 c6                	mov    %eax,%esi
-f01043cf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-f01043d2:	8d 14 40             	lea    (%eax,%eax,2),%edx
-f01043d5:	8d 14 97             	lea    (%edi,%edx,4),%edx
-f01043d8:	89 5d 0c             	mov    %ebx,0xc(%ebp)
-f01043db:	eb 04                	jmp    f01043e1 <debuginfo_eip+0x1b2>
-f01043dd:	48                   	dec    %eax
-f01043de:	83 ea 0c             	sub    $0xc,%edx
-f01043e1:	89 c7                	mov    %eax,%edi
-f01043e3:	39 c6                	cmp    %eax,%esi
-f01043e5:	7f 3b                	jg     f0104422 <debuginfo_eip+0x1f3>
+f0104612:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+f0104615:	89 c6                	mov    %eax,%esi
+f0104617:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+f010461a:	8d 14 40             	lea    (%eax,%eax,2),%edx
+f010461d:	8d 14 97             	lea    (%edi,%edx,4),%edx
+f0104620:	89 5d 0c             	mov    %ebx,0xc(%ebp)
+f0104623:	eb 04                	jmp    f0104629 <debuginfo_eip+0x1b2>
+f0104625:	48                   	dec    %eax
+f0104626:	83 ea 0c             	sub    $0xc,%edx
+f0104629:	89 c7                	mov    %eax,%edi
+f010462b:	39 c6                	cmp    %eax,%esi
+f010462d:	7f 3b                	jg     f010466a <debuginfo_eip+0x1f3>
 	       && stabs[lline].n_type != N_SOL
-f01043e7:	8a 4a 04             	mov    0x4(%edx),%cl
-f01043ea:	80 f9 84             	cmp    $0x84,%cl
-f01043ed:	75 08                	jne    f01043f7 <debuginfo_eip+0x1c8>
-f01043ef:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-f01043f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-f01043f5:	eb 11                	jmp    f0104408 <debuginfo_eip+0x1d9>
+f010462f:	8a 4a 04             	mov    0x4(%edx),%cl
+f0104632:	80 f9 84             	cmp    $0x84,%cl
+f0104635:	75 08                	jne    f010463f <debuginfo_eip+0x1c8>
+f0104637:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+f010463a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+f010463d:	eb 11                	jmp    f0104650 <debuginfo_eip+0x1d9>
 	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
-f01043f7:	80 f9 64             	cmp    $0x64,%cl
-f01043fa:	75 e1                	jne    f01043dd <debuginfo_eip+0x1ae>
-f01043fc:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
-f0104400:	74 db                	je     f01043dd <debuginfo_eip+0x1ae>
-f0104402:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-f0104405:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+f010463f:	80 f9 64             	cmp    $0x64,%cl
+f0104642:	75 e1                	jne    f0104625 <debuginfo_eip+0x1ae>
+f0104644:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
+f0104648:	74 db                	je     f0104625 <debuginfo_eip+0x1ae>
+f010464a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+f010464d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 		lline--;
 	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
-f0104408:	8d 04 7f             	lea    (%edi,%edi,2),%eax
-f010440b:	8b 75 c4             	mov    -0x3c(%ebp),%esi
-f010440e:	8b 04 86             	mov    (%esi,%eax,4),%eax
-f0104411:	8b 55 bc             	mov    -0x44(%ebp),%edx
-f0104414:	2b 55 c0             	sub    -0x40(%ebp),%edx
-f0104417:	39 d0                	cmp    %edx,%eax
-f0104419:	73 0a                	jae    f0104425 <debuginfo_eip+0x1f6>
+f0104650:	8d 04 7f             	lea    (%edi,%edi,2),%eax
+f0104653:	8b 75 c4             	mov    -0x3c(%ebp),%esi
+f0104656:	8b 04 86             	mov    (%esi,%eax,4),%eax
+f0104659:	8b 55 bc             	mov    -0x44(%ebp),%edx
+f010465c:	2b 55 c0             	sub    -0x40(%ebp),%edx
+f010465f:	39 d0                	cmp    %edx,%eax
+f0104661:	73 0a                	jae    f010466d <debuginfo_eip+0x1f6>
 		info->eip_file = stabstr + stabs[lline].n_strx;
-f010441b:	03 45 c0             	add    -0x40(%ebp),%eax
-f010441e:	89 03                	mov    %eax,(%ebx)
-f0104420:	eb 03                	jmp    f0104425 <debuginfo_eip+0x1f6>
-f0104422:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+f0104663:	03 45 c0             	add    -0x40(%ebp),%eax
+f0104666:	89 03                	mov    %eax,(%ebx)
+f0104668:	eb 03                	jmp    f010466d <debuginfo_eip+0x1f6>
+f010466a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 
 
 	// Set eip_fn_narg to the number of arguments taken by the function,
 	// or 0 if there was no containing function.
 	if (lfun < rfun)
-f0104425:	8b 55 dc             	mov    -0x24(%ebp),%edx
-f0104428:	8b 75 d8             	mov    -0x28(%ebp),%esi
+f010466d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+f0104670:	8b 75 d8             	mov    -0x28(%ebp),%esi
 		for (lline = lfun + 1;
 		     lline < rfun && stabs[lline].n_type == N_PSYM;
 		     lline++)
 			info->eip_fn_narg++;
 
 	return 0;
-f010442b:	b8 00 00 00 00       	mov    $0x0,%eax
+f0104673:	b8 00 00 00 00       	mov    $0x0,%eax
 		info->eip_file = stabstr + stabs[lline].n_strx;
 
 
 	// Set eip_fn_narg to the number of arguments taken by the function,
 	// or 0 if there was no containing function.
 	if (lfun < rfun)
-f0104430:	39 f2                	cmp    %esi,%edx
-f0104432:	7d 4c                	jge    f0104480 <debuginfo_eip+0x251>
+f0104678:	39 f2                	cmp    %esi,%edx
+f010467a:	7d 4c                	jge    f01046c8 <debuginfo_eip+0x251>
 		for (lline = lfun + 1;
-f0104434:	42                   	inc    %edx
-f0104435:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-f0104438:	89 d0                	mov    %edx,%eax
-f010443a:	8d 14 52             	lea    (%edx,%edx,2),%edx
-f010443d:	8b 7d c4             	mov    -0x3c(%ebp),%edi
-f0104440:	8d 14 97             	lea    (%edi,%edx,4),%edx
-f0104443:	eb 03                	jmp    f0104448 <debuginfo_eip+0x219>
+f010467c:	42                   	inc    %edx
+f010467d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+f0104680:	89 d0                	mov    %edx,%eax
+f0104682:	8d 14 52             	lea    (%edx,%edx,2),%edx
+f0104685:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+f0104688:	8d 14 97             	lea    (%edi,%edx,4),%edx
+f010468b:	eb 03                	jmp    f0104690 <debuginfo_eip+0x219>
 		     lline < rfun && stabs[lline].n_type == N_PSYM;
 		     lline++)
 			info->eip_fn_narg++;
-f0104445:	ff 43 14             	incl   0x14(%ebx)
+f010468d:	ff 43 14             	incl   0x14(%ebx)
 
 
 	// Set eip_fn_narg to the number of arguments taken by the function,
 	// or 0 if there was no containing function.
 	if (lfun < rfun)
 		for (lline = lfun + 1;
-f0104448:	39 c6                	cmp    %eax,%esi
-f010444a:	7e 2f                	jle    f010447b <debuginfo_eip+0x24c>
+f0104690:	39 c6                	cmp    %eax,%esi
+f0104692:	7e 2f                	jle    f01046c3 <debuginfo_eip+0x24c>
 		     lline < rfun && stabs[lline].n_type == N_PSYM;
-f010444c:	8a 4a 04             	mov    0x4(%edx),%cl
-f010444f:	40                   	inc    %eax
-f0104450:	83 c2 0c             	add    $0xc,%edx
-f0104453:	80 f9 a0             	cmp    $0xa0,%cl
-f0104456:	74 ed                	je     f0104445 <debuginfo_eip+0x216>
+f0104694:	8a 4a 04             	mov    0x4(%edx),%cl
+f0104697:	40                   	inc    %eax
+f0104698:	83 c2 0c             	add    $0xc,%edx
+f010469b:	80 f9 a0             	cmp    $0xa0,%cl
+f010469e:	74 ed                	je     f010468d <debuginfo_eip+0x216>
 		     lline++)
 			info->eip_fn_narg++;
 
 	return 0;
-f0104458:	b8 00 00 00 00       	mov    $0x0,%eax
-f010445d:	eb 21                	jmp    f0104480 <debuginfo_eip+0x251>
+f01046a0:	b8 00 00 00 00       	mov    $0x0,%eax
+f01046a5:	eb 21                	jmp    f01046c8 <debuginfo_eip+0x251>
 		// LAB 3: Your code here.
 	}
 
 	// String table validity checks
 	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
 		return -1;
-f010445f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-f0104464:	eb 1a                	jmp    f0104480 <debuginfo_eip+0x251>
-f0104466:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-f010446b:	eb 13                	jmp    f0104480 <debuginfo_eip+0x251>
+f01046a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+f01046ac:	eb 1a                	jmp    f01046c8 <debuginfo_eip+0x251>
+f01046ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+f01046b3:	eb 13                	jmp    f01046c8 <debuginfo_eip+0x251>
 	// Search the entire set of stabs for the source file (type N_SO).
 	lfile = 0;
 	rfile = (stab_end - stabs) - 1;
 	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
 	if (lfile == 0)
 		return -1;
-f010446d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-f0104472:	eb 0c                	jmp    f0104480 <debuginfo_eip+0x251>
+f01046b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+f01046ba:	eb 0c                	jmp    f01046c8 <debuginfo_eip+0x251>
 	// Your code here.
 	stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
 	if (lline <= rline)
 		info->eip_line = stabs[lline].n_desc;
 	else
 		return -1;
-f0104474:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-f0104479:	eb 05                	jmp    f0104480 <debuginfo_eip+0x251>
+f01046bc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+f01046c1:	eb 05                	jmp    f01046c8 <debuginfo_eip+0x251>
 		for (lline = lfun + 1;
 		     lline < rfun && stabs[lline].n_type == N_PSYM;
 		     lline++)
 			info->eip_fn_narg++;
 
 	return 0;
-f010447b:	b8 00 00 00 00       	mov    $0x0,%eax
+f01046c3:	b8 00 00 00 00       	mov    $0x0,%eax
 }
-f0104480:	83 c4 4c             	add    $0x4c,%esp
-f0104483:	5b                   	pop    %ebx
-f0104484:	5e                   	pop    %esi
-f0104485:	5f                   	pop    %edi
-f0104486:	5d                   	pop    %ebp
-f0104487:	c3                   	ret    
-
-f0104488 <printnum>:
+f01046c8:	83 c4 4c             	add    $0x4c,%esp
+f01046cb:	5b                   	pop    %ebx
+f01046cc:	5e                   	pop    %esi
+f01046cd:	5f                   	pop    %edi
+f01046ce:	5d                   	pop    %ebp
+f01046cf:	c3                   	ret    
+
+f01046d0 <printnum>:
  * using specified putch function and associated pointer putdat.
  */
 static void
 printnum(void (*putch)(int, void*), void *putdat,
 	 unsigned long long num, unsigned base, int width, int padc)
 {
-f0104488:	55                   	push   %ebp
-f0104489:	89 e5                	mov    %esp,%ebp
-f010448b:	57                   	push   %edi
-f010448c:	56                   	push   %esi
-f010448d:	53                   	push   %ebx
-f010448e:	83 ec 3c             	sub    $0x3c,%esp
-f0104491:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-f0104494:	89 d7                	mov    %edx,%edi
-f0104496:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104499:	89 45 e0             	mov    %eax,-0x20(%ebp)
-f010449c:	8b 45 0c             	mov    0xc(%ebp),%eax
-f010449f:	89 c1                	mov    %eax,%ecx
-f01044a1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-f01044a4:	8b 75 14             	mov    0x14(%ebp),%esi
+f01046d0:	55                   	push   %ebp
+f01046d1:	89 e5                	mov    %esp,%ebp
+f01046d3:	57                   	push   %edi
+f01046d4:	56                   	push   %esi
+f01046d5:	53                   	push   %ebx
+f01046d6:	83 ec 3c             	sub    $0x3c,%esp
+f01046d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+f01046dc:	89 d7                	mov    %edx,%edi
+f01046de:	8b 45 08             	mov    0x8(%ebp),%eax
+f01046e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+f01046e4:	8b 45 0c             	mov    0xc(%ebp),%eax
+f01046e7:	89 c1                	mov    %eax,%ecx
+f01046e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+f01046ec:	8b 75 14             	mov    0x14(%ebp),%esi
 	// first recursively print all preceding (more significant) digits
 	if (num >= base) {
-f01044a7:	8b 45 10             	mov    0x10(%ebp),%eax
-f01044aa:	ba 00 00 00 00       	mov    $0x0,%edx
-f01044af:	89 45 d8             	mov    %eax,-0x28(%ebp)
-f01044b2:	89 55 dc             	mov    %edx,-0x24(%ebp)
-f01044b5:	39 ca                	cmp    %ecx,%edx
-f01044b7:	72 08                	jb     f01044c1 <printnum+0x39>
-f01044b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
-f01044bc:	39 45 10             	cmp    %eax,0x10(%ebp)
-f01044bf:	77 6a                	ja     f010452b <printnum+0xa3>
+f01046ef:	8b 45 10             	mov    0x10(%ebp),%eax
+f01046f2:	ba 00 00 00 00       	mov    $0x0,%edx
+f01046f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
+f01046fa:	89 55 dc             	mov    %edx,-0x24(%ebp)
+f01046fd:	39 ca                	cmp    %ecx,%edx
+f01046ff:	72 08                	jb     f0104709 <printnum+0x39>
+f0104701:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f0104704:	39 45 10             	cmp    %eax,0x10(%ebp)
+f0104707:	77 6a                	ja     f0104773 <printnum+0xa3>
 		printnum(putch, putdat, num / base, base, width - 1, padc);
-f01044c1:	8b 45 18             	mov    0x18(%ebp),%eax
-f01044c4:	89 44 24 10          	mov    %eax,0x10(%esp)
-f01044c8:	4e                   	dec    %esi
-f01044c9:	89 74 24 0c          	mov    %esi,0xc(%esp)
-f01044cd:	8b 45 10             	mov    0x10(%ebp),%eax
-f01044d0:	89 44 24 08          	mov    %eax,0x8(%esp)
-f01044d4:	8b 44 24 08          	mov    0x8(%esp),%eax
-f01044d8:	8b 54 24 0c          	mov    0xc(%esp),%edx
-f01044dc:	89 c3                	mov    %eax,%ebx
-f01044de:	89 d6                	mov    %edx,%esi
-f01044e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
-f01044e3:	8b 55 dc             	mov    -0x24(%ebp),%edx
-f01044e6:	89 44 24 08          	mov    %eax,0x8(%esp)
-f01044ea:	89 54 24 0c          	mov    %edx,0xc(%esp)
-f01044ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
-f01044f1:	89 04 24             	mov    %eax,(%esp)
-f01044f4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-f01044f7:	89 44 24 04          	mov    %eax,0x4(%esp)
-f01044fb:	e8 60 09 00 00       	call   f0104e60 <__udivdi3>
-f0104500:	89 d9                	mov    %ebx,%ecx
-f0104502:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-f0104506:	89 74 24 0c          	mov    %esi,0xc(%esp)
-f010450a:	89 04 24             	mov    %eax,(%esp)
-f010450d:	89 54 24 04          	mov    %edx,0x4(%esp)
-f0104511:	89 fa                	mov    %edi,%edx
-f0104513:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-f0104516:	e8 6d ff ff ff       	call   f0104488 <printnum>
-f010451b:	eb 19                	jmp    f0104536 <printnum+0xae>
+f0104709:	8b 45 18             	mov    0x18(%ebp),%eax
+f010470c:	89 44 24 10          	mov    %eax,0x10(%esp)
+f0104710:	4e                   	dec    %esi
+f0104711:	89 74 24 0c          	mov    %esi,0xc(%esp)
+f0104715:	8b 45 10             	mov    0x10(%ebp),%eax
+f0104718:	89 44 24 08          	mov    %eax,0x8(%esp)
+f010471c:	8b 44 24 08          	mov    0x8(%esp),%eax
+f0104720:	8b 54 24 0c          	mov    0xc(%esp),%edx
+f0104724:	89 c3                	mov    %eax,%ebx
+f0104726:	89 d6                	mov    %edx,%esi
+f0104728:	8b 45 d8             	mov    -0x28(%ebp),%eax
+f010472b:	8b 55 dc             	mov    -0x24(%ebp),%edx
+f010472e:	89 44 24 08          	mov    %eax,0x8(%esp)
+f0104732:	89 54 24 0c          	mov    %edx,0xc(%esp)
+f0104736:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f0104739:	89 04 24             	mov    %eax,(%esp)
+f010473c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+f010473f:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0104743:	e8 58 09 00 00       	call   f01050a0 <__udivdi3>
+f0104748:	89 d9                	mov    %ebx,%ecx
+f010474a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+f010474e:	89 74 24 0c          	mov    %esi,0xc(%esp)
+f0104752:	89 04 24             	mov    %eax,(%esp)
+f0104755:	89 54 24 04          	mov    %edx,0x4(%esp)
+f0104759:	89 fa                	mov    %edi,%edx
+f010475b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+f010475e:	e8 6d ff ff ff       	call   f01046d0 <printnum>
+f0104763:	eb 19                	jmp    f010477e <printnum+0xae>
 	} else {
 		// print any needed pad characters before first digit
 		while (--width > 0)
 			putch(padc, putdat);
-f010451d:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f0104521:	8b 45 18             	mov    0x18(%ebp),%eax
-f0104524:	89 04 24             	mov    %eax,(%esp)
-f0104527:	ff d3                	call   *%ebx
-f0104529:	eb 03                	jmp    f010452e <printnum+0xa6>
-f010452b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+f0104765:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104769:	8b 45 18             	mov    0x18(%ebp),%eax
+f010476c:	89 04 24             	mov    %eax,(%esp)
+f010476f:	ff d3                	call   *%ebx
+f0104771:	eb 03                	jmp    f0104776 <printnum+0xa6>
+f0104773:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
 	// first recursively print all preceding (more significant) digits
 	if (num >= base) {
 		printnum(putch, putdat, num / base, base, width - 1, padc);
 	} else {
 		// print any needed pad characters before first digit
 		while (--width > 0)
-f010452e:	4e                   	dec    %esi
-f010452f:	85 f6                	test   %esi,%esi
-f0104531:	7f ea                	jg     f010451d <printnum+0x95>
-f0104533:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+f0104776:	4e                   	dec    %esi
+f0104777:	85 f6                	test   %esi,%esi
+f0104779:	7f ea                	jg     f0104765 <printnum+0x95>
+f010477b:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
 			putch(padc, putdat);
 	}
 
 	// then print this (the least significant) digit
 	putch("0123456789abcdef"[num % base], putdat);
-f0104536:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f010453a:	8b 7c 24 04          	mov    0x4(%esp),%edi
-f010453e:	8b 45 d8             	mov    -0x28(%ebp),%eax
-f0104541:	8b 55 dc             	mov    -0x24(%ebp),%edx
-f0104544:	89 44 24 08          	mov    %eax,0x8(%esp)
-f0104548:	89 54 24 0c          	mov    %edx,0xc(%esp)
-f010454c:	8b 45 e0             	mov    -0x20(%ebp),%eax
-f010454f:	89 04 24             	mov    %eax,(%esp)
-f0104552:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-f0104555:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0104559:	e8 32 0a 00 00       	call   f0104f90 <__umoddi3>
-f010455e:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f0104562:	0f be 80 01 6b 10 f0 	movsbl -0xfef94ff(%eax),%eax
-f0104569:	89 04 24             	mov    %eax,(%esp)
-f010456c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-f010456f:	ff d0                	call   *%eax
-}
-f0104571:	83 c4 3c             	add    $0x3c,%esp
-f0104574:	5b                   	pop    %ebx
-f0104575:	5e                   	pop    %esi
-f0104576:	5f                   	pop    %edi
-f0104577:	5d                   	pop    %ebp
-f0104578:	c3                   	ret    
-
-f0104579 <getuint>:
+f010477e:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104782:	8b 7c 24 04          	mov    0x4(%esp),%edi
+f0104786:	8b 45 d8             	mov    -0x28(%ebp),%eax
+f0104789:	8b 55 dc             	mov    -0x24(%ebp),%edx
+f010478c:	89 44 24 08          	mov    %eax,0x8(%esp)
+f0104790:	89 54 24 0c          	mov    %edx,0xc(%esp)
+f0104794:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f0104797:	89 04 24             	mov    %eax,(%esp)
+f010479a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+f010479d:	89 44 24 04          	mov    %eax,0x4(%esp)
+f01047a1:	e8 2a 0a 00 00       	call   f01051d0 <__umoddi3>
+f01047a6:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f01047aa:	0f be 80 c6 6d 10 f0 	movsbl -0xfef923a(%eax),%eax
+f01047b1:	89 04 24             	mov    %eax,(%esp)
+f01047b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+f01047b7:	ff d0                	call   *%eax
+}
+f01047b9:	83 c4 3c             	add    $0x3c,%esp
+f01047bc:	5b                   	pop    %ebx
+f01047bd:	5e                   	pop    %esi
+f01047be:	5f                   	pop    %edi
+f01047bf:	5d                   	pop    %ebp
+f01047c0:	c3                   	ret    
+
+f01047c1 <getuint>:
 
 // Get an unsigned int of various possible sizes from a varargs list,
 // depending on the lflag parameter.
 static unsigned long long
 getuint(va_list *ap, int lflag)
 {
-f0104579:	55                   	push   %ebp
-f010457a:	89 e5                	mov    %esp,%ebp
+f01047c1:	55                   	push   %ebp
+f01047c2:	89 e5                	mov    %esp,%ebp
 	if (lflag >= 2)
-f010457c:	83 fa 01             	cmp    $0x1,%edx
-f010457f:	7e 0e                	jle    f010458f <getuint+0x16>
+f01047c4:	83 fa 01             	cmp    $0x1,%edx
+f01047c7:	7e 0e                	jle    f01047d7 <getuint+0x16>
 		return va_arg(*ap, unsigned long long);
-f0104581:	8b 10                	mov    (%eax),%edx
-f0104583:	8d 4a 08             	lea    0x8(%edx),%ecx
-f0104586:	89 08                	mov    %ecx,(%eax)
-f0104588:	8b 02                	mov    (%edx),%eax
-f010458a:	8b 52 04             	mov    0x4(%edx),%edx
-f010458d:	eb 22                	jmp    f01045b1 <getuint+0x38>
+f01047c9:	8b 10                	mov    (%eax),%edx
+f01047cb:	8d 4a 08             	lea    0x8(%edx),%ecx
+f01047ce:	89 08                	mov    %ecx,(%eax)
+f01047d0:	8b 02                	mov    (%edx),%eax
+f01047d2:	8b 52 04             	mov    0x4(%edx),%edx
+f01047d5:	eb 22                	jmp    f01047f9 <getuint+0x38>
 	else if (lflag)
-f010458f:	85 d2                	test   %edx,%edx
-f0104591:	74 10                	je     f01045a3 <getuint+0x2a>
+f01047d7:	85 d2                	test   %edx,%edx
+f01047d9:	74 10                	je     f01047eb <getuint+0x2a>
 		return va_arg(*ap, unsigned long);
-f0104593:	8b 10                	mov    (%eax),%edx
-f0104595:	8d 4a 04             	lea    0x4(%edx),%ecx
-f0104598:	89 08                	mov    %ecx,(%eax)
-f010459a:	8b 02                	mov    (%edx),%eax
-f010459c:	ba 00 00 00 00       	mov    $0x0,%edx
-f01045a1:	eb 0e                	jmp    f01045b1 <getuint+0x38>
+f01047db:	8b 10                	mov    (%eax),%edx
+f01047dd:	8d 4a 04             	lea    0x4(%edx),%ecx
+f01047e0:	89 08                	mov    %ecx,(%eax)
+f01047e2:	8b 02                	mov    (%edx),%eax
+f01047e4:	ba 00 00 00 00       	mov    $0x0,%edx
+f01047e9:	eb 0e                	jmp    f01047f9 <getuint+0x38>
 	else
 		return va_arg(*ap, unsigned int);
-f01045a3:	8b 10                	mov    (%eax),%edx
-f01045a5:	8d 4a 04             	lea    0x4(%edx),%ecx
-f01045a8:	89 08                	mov    %ecx,(%eax)
-f01045aa:	8b 02                	mov    (%edx),%eax
-f01045ac:	ba 00 00 00 00       	mov    $0x0,%edx
+f01047eb:	8b 10                	mov    (%eax),%edx
+f01047ed:	8d 4a 04             	lea    0x4(%edx),%ecx
+f01047f0:	89 08                	mov    %ecx,(%eax)
+f01047f2:	8b 02                	mov    (%edx),%eax
+f01047f4:	ba 00 00 00 00       	mov    $0x0,%edx
 }
-f01045b1:	5d                   	pop    %ebp
-f01045b2:	c3                   	ret    
+f01047f9:	5d                   	pop    %ebp
+f01047fa:	c3                   	ret    
 
-f01045b3 <sprintputch>:
+f01047fb <sprintputch>:
 	int cnt;
 };
 
 static void
 sprintputch(int ch, struct sprintbuf *b)
 {
-f01045b3:	55                   	push   %ebp
-f01045b4:	89 e5                	mov    %esp,%ebp
-f01045b6:	8b 45 0c             	mov    0xc(%ebp),%eax
+f01047fb:	55                   	push   %ebp
+f01047fc:	89 e5                	mov    %esp,%ebp
+f01047fe:	8b 45 0c             	mov    0xc(%ebp),%eax
 	b->cnt++;
-f01045b9:	ff 40 08             	incl   0x8(%eax)
+f0104801:	ff 40 08             	incl   0x8(%eax)
 	if (b->buf < b->ebuf)
-f01045bc:	8b 10                	mov    (%eax),%edx
-f01045be:	3b 50 04             	cmp    0x4(%eax),%edx
-f01045c1:	73 0a                	jae    f01045cd <sprintputch+0x1a>
+f0104804:	8b 10                	mov    (%eax),%edx
+f0104806:	3b 50 04             	cmp    0x4(%eax),%edx
+f0104809:	73 0a                	jae    f0104815 <sprintputch+0x1a>
 		*b->buf++ = ch;
-f01045c3:	8d 4a 01             	lea    0x1(%edx),%ecx
-f01045c6:	89 08                	mov    %ecx,(%eax)
-f01045c8:	8b 45 08             	mov    0x8(%ebp),%eax
-f01045cb:	88 02                	mov    %al,(%edx)
+f010480b:	8d 4a 01             	lea    0x1(%edx),%ecx
+f010480e:	89 08                	mov    %ecx,(%eax)
+f0104810:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104813:	88 02                	mov    %al,(%edx)
 }
-f01045cd:	5d                   	pop    %ebp
-f01045ce:	c3                   	ret    
+f0104815:	5d                   	pop    %ebp
+f0104816:	c3                   	ret    
 
-f01045cf <printfmt>:
+f0104817 <printfmt>:
 	}
 }
 
 void
 printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
 {
-f01045cf:	55                   	push   %ebp
-f01045d0:	89 e5                	mov    %esp,%ebp
-f01045d2:	83 ec 18             	sub    $0x18,%esp
+f0104817:	55                   	push   %ebp
+f0104818:	89 e5                	mov    %esp,%ebp
+f010481a:	83 ec 18             	sub    $0x18,%esp
 	va_list ap;
 
 	va_start(ap, fmt);
-f01045d5:	8d 45 14             	lea    0x14(%ebp),%eax
+f010481d:	8d 45 14             	lea    0x14(%ebp),%eax
 	vprintfmt(putch, putdat, fmt, ap);
-f01045d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f01045dc:	8b 45 10             	mov    0x10(%ebp),%eax
-f01045df:	89 44 24 08          	mov    %eax,0x8(%esp)
-f01045e3:	8b 45 0c             	mov    0xc(%ebp),%eax
-f01045e6:	89 44 24 04          	mov    %eax,0x4(%esp)
-f01045ea:	8b 45 08             	mov    0x8(%ebp),%eax
-f01045ed:	89 04 24             	mov    %eax,(%esp)
-f01045f0:	e8 02 00 00 00       	call   f01045f7 <vprintfmt>
+f0104820:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f0104824:	8b 45 10             	mov    0x10(%ebp),%eax
+f0104827:	89 44 24 08          	mov    %eax,0x8(%esp)
+f010482b:	8b 45 0c             	mov    0xc(%ebp),%eax
+f010482e:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0104832:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104835:	89 04 24             	mov    %eax,(%esp)
+f0104838:	e8 02 00 00 00       	call   f010483f <vprintfmt>
 	va_end(ap);
 }
-f01045f5:	c9                   	leave  
-f01045f6:	c3                   	ret    
+f010483d:	c9                   	leave  
+f010483e:	c3                   	ret    
 
-f01045f7 <vprintfmt>:
+f010483f <vprintfmt>:
 // Main function to format and print a string.
 void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);
 
 void
 vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
 {
-f01045f7:	55                   	push   %ebp
-f01045f8:	89 e5                	mov    %esp,%ebp
-f01045fa:	57                   	push   %edi
-f01045fb:	56                   	push   %esi
-f01045fc:	53                   	push   %ebx
-f01045fd:	83 ec 3c             	sub    $0x3c,%esp
-f0104600:	8b 7d 0c             	mov    0xc(%ebp),%edi
-f0104603:	8b 5d 10             	mov    0x10(%ebp),%ebx
-f0104606:	eb 14                	jmp    f010461c <vprintfmt+0x25>
+f010483f:	55                   	push   %ebp
+f0104840:	89 e5                	mov    %esp,%ebp
+f0104842:	57                   	push   %edi
+f0104843:	56                   	push   %esi
+f0104844:	53                   	push   %ebx
+f0104845:	83 ec 3c             	sub    $0x3c,%esp
+f0104848:	8b 7d 0c             	mov    0xc(%ebp),%edi
+f010484b:	8b 5d 10             	mov    0x10(%ebp),%ebx
+f010484e:	eb 14                	jmp    f0104864 <vprintfmt+0x25>
 	int base, lflag, width, precision, altflag;
 	char padc;
 
 	while (1) {
 		while ((ch = *(unsigned char *) fmt++) != '%') {
 			if (ch == '\0')
-f0104608:	85 c0                	test   %eax,%eax
-f010460a:	0f 84 8a 03 00 00    	je     f010499a <vprintfmt+0x3a3>
+f0104850:	85 c0                	test   %eax,%eax
+f0104852:	0f 84 8a 03 00 00    	je     f0104be2 <vprintfmt+0x3a3>
 				return;
 			putch(ch, putdat);
-f0104610:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f0104614:	89 04 24             	mov    %eax,(%esp)
-f0104617:	ff 55 08             	call   *0x8(%ebp)
+f0104858:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f010485c:	89 04 24             	mov    %eax,(%esp)
+f010485f:	ff 55 08             	call   *0x8(%ebp)
 	unsigned long long num;
 	int base, lflag, width, precision, altflag;
 	char padc;
 
 	while (1) {
 		while ((ch = *(unsigned char *) fmt++) != '%') {
-f010461a:	89 f3                	mov    %esi,%ebx
-f010461c:	8d 73 01             	lea    0x1(%ebx),%esi
-f010461f:	31 c0                	xor    %eax,%eax
-f0104621:	8a 03                	mov    (%ebx),%al
-f0104623:	83 f8 25             	cmp    $0x25,%eax
-f0104626:	75 e0                	jne    f0104608 <vprintfmt+0x11>
-f0104628:	c6 45 d4 20          	movb   $0x20,-0x2c(%ebp)
-f010462c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
-f0104633:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)
-f010463a:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
-f0104641:	ba 00 00 00 00       	mov    $0x0,%edx
-f0104646:	eb 1d                	jmp    f0104665 <vprintfmt+0x6e>
+f0104862:	89 f3                	mov    %esi,%ebx
+f0104864:	8d 73 01             	lea    0x1(%ebx),%esi
+f0104867:	31 c0                	xor    %eax,%eax
+f0104869:	8a 03                	mov    (%ebx),%al
+f010486b:	83 f8 25             	cmp    $0x25,%eax
+f010486e:	75 e0                	jne    f0104850 <vprintfmt+0x11>
+f0104870:	c6 45 d4 20          	movb   $0x20,-0x2c(%ebp)
+f0104874:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
+f010487b:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)
+f0104882:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
+f0104889:	ba 00 00 00 00       	mov    $0x0,%edx
+f010488e:	eb 1d                	jmp    f01048ad <vprintfmt+0x6e>
 		width = -1;
 		precision = -1;
 		lflag = 0;
 		altflag = 0;
 	reswitch:
 		switch (ch = *(unsigned char *) fmt++) {
-f0104648:	89 de                	mov    %ebx,%esi
+f0104890:	89 de                	mov    %ebx,%esi
 
 		// flag to pad on the right
 		case '-':
 			padc = '-';
-f010464a:	c6 45 d4 2d          	movb   $0x2d,-0x2c(%ebp)
-f010464e:	eb 15                	jmp    f0104665 <vprintfmt+0x6e>
+f0104892:	c6 45 d4 2d          	movb   $0x2d,-0x2c(%ebp)
+f0104896:	eb 15                	jmp    f01048ad <vprintfmt+0x6e>
 		width = -1;
 		precision = -1;
 		lflag = 0;
 		altflag = 0;
 	reswitch:
 		switch (ch = *(unsigned char *) fmt++) {
-f0104650:	89 de                	mov    %ebx,%esi
+f0104898:	89 de                	mov    %ebx,%esi
 			padc = '-';
 			goto reswitch;
 
 		// flag to pad with 0's instead of spaces
 		case '0':
 			padc = '0';
-f0104652:	c6 45 d4 30          	movb   $0x30,-0x2c(%ebp)
-f0104656:	eb 0d                	jmp    f0104665 <vprintfmt+0x6e>
+f010489a:	c6 45 d4 30          	movb   $0x30,-0x2c(%ebp)
+f010489e:	eb 0d                	jmp    f01048ad <vprintfmt+0x6e>
 			altflag = 1;
 			goto reswitch;
 
 		process_precision:
 			if (width < 0)
 				width = precision, precision = -1;
-f0104658:	8b 45 d0             	mov    -0x30(%ebp),%eax
-f010465b:	89 45 dc             	mov    %eax,-0x24(%ebp)
-f010465e:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)
+f01048a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+f01048a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
+f01048a6:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)
 		width = -1;
 		precision = -1;
 		lflag = 0;
 		altflag = 0;
 	reswitch:
 		switch (ch = *(unsigned char *) fmt++) {
-f0104665:	8d 5e 01             	lea    0x1(%esi),%ebx
-f0104668:	31 c0                	xor    %eax,%eax
-f010466a:	8a 06                	mov    (%esi),%al
-f010466c:	8a 0e                	mov    (%esi),%cl
-f010466e:	83 e9 23             	sub    $0x23,%ecx
-f0104671:	88 4d e0             	mov    %cl,-0x20(%ebp)
-f0104674:	80 f9 55             	cmp    $0x55,%cl
-f0104677:	0f 87 ff 02 00 00    	ja     f010497c <vprintfmt+0x385>
-f010467d:	31 c9                	xor    %ecx,%ecx
-f010467f:	8a 4d e0             	mov    -0x20(%ebp),%cl
-f0104682:	ff 24 8d a0 6b 10 f0 	jmp    *-0xfef9460(,%ecx,4)
-f0104689:	89 de                	mov    %ebx,%esi
-f010468b:	b9 00 00 00 00       	mov    $0x0,%ecx
+f01048ad:	8d 5e 01             	lea    0x1(%esi),%ebx
+f01048b0:	31 c0                	xor    %eax,%eax
+f01048b2:	8a 06                	mov    (%esi),%al
+f01048b4:	8a 0e                	mov    (%esi),%cl
+f01048b6:	83 e9 23             	sub    $0x23,%ecx
+f01048b9:	88 4d e0             	mov    %cl,-0x20(%ebp)
+f01048bc:	80 f9 55             	cmp    $0x55,%cl
+f01048bf:	0f 87 ff 02 00 00    	ja     f0104bc4 <vprintfmt+0x385>
+f01048c5:	31 c9                	xor    %ecx,%ecx
+f01048c7:	8a 4d e0             	mov    -0x20(%ebp),%cl
+f01048ca:	ff 24 8d 60 6e 10 f0 	jmp    *-0xfef91a0(,%ecx,4)
+f01048d1:	89 de                	mov    %ebx,%esi
+f01048d3:	b9 00 00 00 00       	mov    $0x0,%ecx
 		case '6':
 		case '7':
 		case '8':
 		case '9':
 			for (precision = 0; ; ++fmt) {
 				precision = precision * 10 + ch - '0';
-f0104690:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
-f0104693:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+f01048d8:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+f01048db:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
 				ch = *fmt;
-f0104697:	0f be 06             	movsbl (%esi),%eax
+f01048df:	0f be 06             	movsbl (%esi),%eax
 				if (ch < '0' || ch > '9')
-f010469a:	8d 58 d0             	lea    -0x30(%eax),%ebx
-f010469d:	83 fb 09             	cmp    $0x9,%ebx
-f01046a0:	77 2f                	ja     f01046d1 <vprintfmt+0xda>
+f01048e2:	8d 58 d0             	lea    -0x30(%eax),%ebx
+f01048e5:	83 fb 09             	cmp    $0x9,%ebx
+f01048e8:	77 2f                	ja     f0104919 <vprintfmt+0xda>
 		case '5':
 		case '6':
 		case '7':
 		case '8':
 		case '9':
 			for (precision = 0; ; ++fmt) {
-f01046a2:	46                   	inc    %esi
+f01048ea:	46                   	inc    %esi
 				precision = precision * 10 + ch - '0';
 				ch = *fmt;
 				if (ch < '0' || ch > '9')
 					break;
 			}
-f01046a3:	eb eb                	jmp    f0104690 <vprintfmt+0x99>
+f01048eb:	eb eb                	jmp    f01048d8 <vprintfmt+0x99>
 			goto process_precision;
 
 		case '*':
 			precision = va_arg(ap, int);
-f01046a5:	8b 45 14             	mov    0x14(%ebp),%eax
-f01046a8:	8d 48 04             	lea    0x4(%eax),%ecx
-f01046ab:	89 4d 14             	mov    %ecx,0x14(%ebp)
-f01046ae:	8b 00                	mov    (%eax),%eax
-f01046b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+f01048ed:	8b 45 14             	mov    0x14(%ebp),%eax
+f01048f0:	8d 48 04             	lea    0x4(%eax),%ecx
+f01048f3:	89 4d 14             	mov    %ecx,0x14(%ebp)
+f01048f6:	8b 00                	mov    (%eax),%eax
+f01048f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
 		width = -1;
 		precision = -1;
 		lflag = 0;
 		altflag = 0;
 	reswitch:
 		switch (ch = *(unsigned char *) fmt++) {
-f01046b3:	89 de                	mov    %ebx,%esi
+f01048fb:	89 de                	mov    %ebx,%esi
 			}
 			goto process_precision;
 
 		case '*':
 			precision = va_arg(ap, int);
 			goto process_precision;
-f01046b5:	eb 1d                	jmp    f01046d4 <vprintfmt+0xdd>
-f01046b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
-f01046ba:	f7 d0                	not    %eax
-f01046bc:	c1 f8 1f             	sar    $0x1f,%eax
-f01046bf:	21 45 dc             	and    %eax,-0x24(%ebp)
+f01048fd:	eb 1d                	jmp    f010491c <vprintfmt+0xdd>
+f01048ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
+f0104902:	f7 d0                	not    %eax
+f0104904:	c1 f8 1f             	sar    $0x1f,%eax
+f0104907:	21 45 dc             	and    %eax,-0x24(%ebp)
 		width = -1;
 		precision = -1;
 		lflag = 0;
 		altflag = 0;
 	reswitch:
 		switch (ch = *(unsigned char *) fmt++) {
-f01046c2:	89 de                	mov    %ebx,%esi
-f01046c4:	eb 9f                	jmp    f0104665 <vprintfmt+0x6e>
-f01046c6:	89 de                	mov    %ebx,%esi
+f010490a:	89 de                	mov    %ebx,%esi
+f010490c:	eb 9f                	jmp    f01048ad <vprintfmt+0x6e>
+f010490e:	89 de                	mov    %ebx,%esi
 			if (width < 0)
 				width = 0;
 			goto reswitch;
 
 		case '#':
 			altflag = 1;
-f01046c8:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
+f0104910:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
 			goto reswitch;
-f01046cf:	eb 94                	jmp    f0104665 <vprintfmt+0x6e>
-f01046d1:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+f0104917:	eb 94                	jmp    f01048ad <vprintfmt+0x6e>
+f0104919:	89 4d d0             	mov    %ecx,-0x30(%ebp)
 
 		process_precision:
 			if (width < 0)
-f01046d4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
-f01046d8:	79 8b                	jns    f0104665 <vprintfmt+0x6e>
-f01046da:	e9 79 ff ff ff       	jmp    f0104658 <vprintfmt+0x61>
+f010491c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+f0104920:	79 8b                	jns    f01048ad <vprintfmt+0x6e>
+f0104922:	e9 79 ff ff ff       	jmp    f01048a0 <vprintfmt+0x61>
 				width = precision, precision = -1;
 			goto reswitch;
 
 		// long flag (doubled for long long)
 		case 'l':
 			lflag++;
-f01046df:	42                   	inc    %edx
+f0104927:	42                   	inc    %edx
 		width = -1;
 		precision = -1;
 		lflag = 0;
 		altflag = 0;
 	reswitch:
 		switch (ch = *(unsigned char *) fmt++) {
-f01046e0:	89 de                	mov    %ebx,%esi
+f0104928:	89 de                	mov    %ebx,%esi
 			goto reswitch;
 
 		// long flag (doubled for long long)
 		case 'l':
 			lflag++;
 			goto reswitch;
-f01046e2:	eb 81                	jmp    f0104665 <vprintfmt+0x6e>
+f010492a:	eb 81                	jmp    f01048ad <vprintfmt+0x6e>
 
 		// character
 		case 'c':
 			putch(va_arg(ap, int), putdat);
-f01046e4:	8b 45 14             	mov    0x14(%ebp),%eax
-f01046e7:	8d 50 04             	lea    0x4(%eax),%edx
-f01046ea:	89 55 14             	mov    %edx,0x14(%ebp)
-f01046ed:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f01046f1:	8b 00                	mov    (%eax),%eax
-f01046f3:	89 04 24             	mov    %eax,(%esp)
-f01046f6:	ff 55 08             	call   *0x8(%ebp)
+f010492c:	8b 45 14             	mov    0x14(%ebp),%eax
+f010492f:	8d 50 04             	lea    0x4(%eax),%edx
+f0104932:	89 55 14             	mov    %edx,0x14(%ebp)
+f0104935:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104939:	8b 00                	mov    (%eax),%eax
+f010493b:	89 04 24             	mov    %eax,(%esp)
+f010493e:	ff 55 08             	call   *0x8(%ebp)
 			break;
-f01046f9:	e9 1e ff ff ff       	jmp    f010461c <vprintfmt+0x25>
+f0104941:	e9 1e ff ff ff       	jmp    f0104864 <vprintfmt+0x25>
 
 		// error message
 		case 'e':
 			err = va_arg(ap, int);
-f01046fe:	8b 45 14             	mov    0x14(%ebp),%eax
-f0104701:	8d 50 04             	lea    0x4(%eax),%edx
-f0104704:	89 55 14             	mov    %edx,0x14(%ebp)
-f0104707:	8b 00                	mov    (%eax),%eax
-f0104709:	89 c2                	mov    %eax,%edx
-f010470b:	c1 fa 1f             	sar    $0x1f,%edx
-f010470e:	31 d0                	xor    %edx,%eax
-f0104710:	29 d0                	sub    %edx,%eax
+f0104946:	8b 45 14             	mov    0x14(%ebp),%eax
+f0104949:	8d 50 04             	lea    0x4(%eax),%edx
+f010494c:	89 55 14             	mov    %edx,0x14(%ebp)
+f010494f:	8b 00                	mov    (%eax),%eax
+f0104951:	89 c2                	mov    %eax,%edx
+f0104953:	c1 fa 1f             	sar    $0x1f,%edx
+f0104956:	31 d0                	xor    %edx,%eax
+f0104958:	29 d0                	sub    %edx,%eax
 			if (err < 0)
 				err = -err;
 			if (err >= MAXERROR || (p = error_string[err]) == NULL)
-f0104712:	83 f8 07             	cmp    $0x7,%eax
-f0104715:	7f 0b                	jg     f0104722 <vprintfmt+0x12b>
-f0104717:	8b 14 85 00 6d 10 f0 	mov    -0xfef9300(,%eax,4),%edx
-f010471e:	85 d2                	test   %edx,%edx
-f0104720:	75 20                	jne    f0104742 <vprintfmt+0x14b>
+f010495a:	83 f8 07             	cmp    $0x7,%eax
+f010495d:	7f 0b                	jg     f010496a <vprintfmt+0x12b>
+f010495f:	8b 14 85 c0 6f 10 f0 	mov    -0xfef9040(,%eax,4),%edx
+f0104966:	85 d2                	test   %edx,%edx
+f0104968:	75 20                	jne    f010498a <vprintfmt+0x14b>
 				printfmt(putch, putdat, "error %d", err);
-f0104722:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0104726:	c7 44 24 08 19 6b 10 	movl   $0xf0106b19,0x8(%esp)
-f010472d:	f0 
-f010472e:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f0104732:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104735:	89 04 24             	mov    %eax,(%esp)
-f0104738:	e8 92 fe ff ff       	call   f01045cf <printfmt>
-f010473d:	e9 da fe ff ff       	jmp    f010461c <vprintfmt+0x25>
+f010496a:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f010496e:	c7 44 24 08 de 6d 10 	movl   $0xf0106dde,0x8(%esp)
+f0104975:	f0 
+f0104976:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f010497a:	8b 45 08             	mov    0x8(%ebp),%eax
+f010497d:	89 04 24             	mov    %eax,(%esp)
+f0104980:	e8 92 fe ff ff       	call   f0104817 <printfmt>
+f0104985:	e9 da fe ff ff       	jmp    f0104864 <vprintfmt+0x25>
 			else
 				printfmt(putch, putdat, "%s", p);
-f0104742:	89 54 24 0c          	mov    %edx,0xc(%esp)
-f0104746:	c7 44 24 08 42 5a 10 	movl   $0xf0105a42,0x8(%esp)
-f010474d:	f0 
-f010474e:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f0104752:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104755:	89 04 24             	mov    %eax,(%esp)
-f0104758:	e8 72 fe ff ff       	call   f01045cf <printfmt>
-f010475d:	e9 ba fe ff ff       	jmp    f010461c <vprintfmt+0x25>
+f010498a:	89 54 24 0c          	mov    %edx,0xc(%esp)
+f010498e:	c7 44 24 08 82 5c 10 	movl   $0xf0105c82,0x8(%esp)
+f0104995:	f0 
+f0104996:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f010499a:	8b 45 08             	mov    0x8(%ebp),%eax
+f010499d:	89 04 24             	mov    %eax,(%esp)
+f01049a0:	e8 72 fe ff ff       	call   f0104817 <printfmt>
+f01049a5:	e9 ba fe ff ff       	jmp    f0104864 <vprintfmt+0x25>
 		width = -1;
 		precision = -1;
 		lflag = 0;
 		altflag = 0;
 	reswitch:
 		switch (ch = *(unsigned char *) fmt++) {
-f0104762:	8b 4d d0             	mov    -0x30(%ebp),%ecx
-f0104765:	8b 45 dc             	mov    -0x24(%ebp),%eax
-f0104768:	89 45 e0             	mov    %eax,-0x20(%ebp)
+f01049aa:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+f01049ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
+f01049b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 				printfmt(putch, putdat, "%s", p);
 			break;
 
 		// string
 		case 's':
 			if ((p = va_arg(ap, char *)) == NULL)
-f010476b:	8b 45 14             	mov    0x14(%ebp),%eax
-f010476e:	8d 50 04             	lea    0x4(%eax),%edx
-f0104771:	89 55 14             	mov    %edx,0x14(%ebp)
-f0104774:	8b 30                	mov    (%eax),%esi
-f0104776:	85 f6                	test   %esi,%esi
-f0104778:	75 05                	jne    f010477f <vprintfmt+0x188>
+f01049b3:	8b 45 14             	mov    0x14(%ebp),%eax
+f01049b6:	8d 50 04             	lea    0x4(%eax),%edx
+f01049b9:	89 55 14             	mov    %edx,0x14(%ebp)
+f01049bc:	8b 30                	mov    (%eax),%esi
+f01049be:	85 f6                	test   %esi,%esi
+f01049c0:	75 05                	jne    f01049c7 <vprintfmt+0x188>
 				p = "(null)";
-f010477a:	be 12 6b 10 f0       	mov    $0xf0106b12,%esi
+f01049c2:	be d7 6d 10 f0       	mov    $0xf0106dd7,%esi
 			if (width > 0 && padc != '-')
-f010477f:	80 7d d4 2d          	cmpb   $0x2d,-0x2c(%ebp)
-f0104783:	0f 84 8c 00 00 00    	je     f0104815 <vprintfmt+0x21e>
-f0104789:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-f010478d:	0f 8e 8a 00 00 00    	jle    f010481d <vprintfmt+0x226>
+f01049c7:	80 7d d4 2d          	cmpb   $0x2d,-0x2c(%ebp)
+f01049cb:	0f 84 8c 00 00 00    	je     f0104a5d <vprintfmt+0x21e>
+f01049d1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+f01049d5:	0f 8e 8a 00 00 00    	jle    f0104a65 <vprintfmt+0x226>
 				for (width -= strnlen(p, precision); width > 0; width--)
-f0104793:	89 4c 24 04          	mov    %ecx,0x4(%esp)
-f0104797:	89 34 24             	mov    %esi,(%esp)
-f010479a:	e8 63 03 00 00       	call   f0104b02 <strnlen>
-f010479f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-f01047a2:	29 c1                	sub    %eax,%ecx
-f01047a4:	89 4d dc             	mov    %ecx,-0x24(%ebp)
+f01049db:	89 4c 24 04          	mov    %ecx,0x4(%esp)
+f01049df:	89 34 24             	mov    %esi,(%esp)
+f01049e2:	e8 63 03 00 00       	call   f0104d4a <strnlen>
+f01049e7:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+f01049ea:	29 c1                	sub    %eax,%ecx
+f01049ec:	89 4d dc             	mov    %ecx,-0x24(%ebp)
 					putch(padc, putdat);
-f01047a7:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
-f01047ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
-f01047ae:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-f01047b1:	8b 75 08             	mov    0x8(%ebp),%esi
-f01047b4:	89 5d 10             	mov    %ebx,0x10(%ebp)
-f01047b7:	89 cb                	mov    %ecx,%ebx
+f01049ef:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
+f01049f3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+f01049f6:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+f01049f9:	8b 75 08             	mov    0x8(%ebp),%esi
+f01049fc:	89 5d 10             	mov    %ebx,0x10(%ebp)
+f01049ff:	89 cb                	mov    %ecx,%ebx
 		// string
 		case 's':
 			if ((p = va_arg(ap, char *)) == NULL)
 				p = "(null)";
 			if (width > 0 && padc != '-')
 				for (width -= strnlen(p, precision); width > 0; width--)
-f01047b9:	eb 0d                	jmp    f01047c8 <vprintfmt+0x1d1>
+f0104a01:	eb 0d                	jmp    f0104a10 <vprintfmt+0x1d1>
 					putch(padc, putdat);
-f01047bb:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f01047bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
-f01047c2:	89 04 24             	mov    %eax,(%esp)
-f01047c5:	ff d6                	call   *%esi
+f0104a03:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104a07:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f0104a0a:	89 04 24             	mov    %eax,(%esp)
+f0104a0d:	ff d6                	call   *%esi
 		// string
 		case 's':
 			if ((p = va_arg(ap, char *)) == NULL)
 				p = "(null)";
 			if (width > 0 && padc != '-')
 				for (width -= strnlen(p, precision); width > 0; width--)
-f01047c7:	4b                   	dec    %ebx
-f01047c8:	85 db                	test   %ebx,%ebx
-f01047ca:	7f ef                	jg     f01047bb <vprintfmt+0x1c4>
-f01047cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-f01047cf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
-f01047d2:	89 c8                	mov    %ecx,%eax
-f01047d4:	f7 d0                	not    %eax
-f01047d6:	c1 f8 1f             	sar    $0x1f,%eax
-f01047d9:	21 c8                	and    %ecx,%eax
-f01047db:	29 c1                	sub    %eax,%ecx
-f01047dd:	89 4d dc             	mov    %ecx,-0x24(%ebp)
-f01047e0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-f01047e3:	eb 3e                	jmp    f0104823 <vprintfmt+0x22c>
+f0104a0f:	4b                   	dec    %ebx
+f0104a10:	85 db                	test   %ebx,%ebx
+f0104a12:	7f ef                	jg     f0104a03 <vprintfmt+0x1c4>
+f0104a14:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+f0104a17:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+f0104a1a:	89 c8                	mov    %ecx,%eax
+f0104a1c:	f7 d0                	not    %eax
+f0104a1e:	c1 f8 1f             	sar    $0x1f,%eax
+f0104a21:	21 c8                	and    %ecx,%eax
+f0104a23:	29 c1                	sub    %eax,%ecx
+f0104a25:	89 4d dc             	mov    %ecx,-0x24(%ebp)
+f0104a28:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+f0104a2b:	eb 3e                	jmp    f0104a6b <vprintfmt+0x22c>
 					putch(padc, putdat);
 			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
 				if (altflag && (ch < ' ' || ch > '~'))
-f01047e5:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
-f01047e9:	74 1b                	je     f0104806 <vprintfmt+0x20f>
-f01047eb:	0f be d2             	movsbl %dl,%edx
-f01047ee:	83 ea 20             	sub    $0x20,%edx
-f01047f1:	83 fa 5e             	cmp    $0x5e,%edx
-f01047f4:	76 10                	jbe    f0104806 <vprintfmt+0x20f>
+f0104a2d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+f0104a31:	74 1b                	je     f0104a4e <vprintfmt+0x20f>
+f0104a33:	0f be d2             	movsbl %dl,%edx
+f0104a36:	83 ea 20             	sub    $0x20,%edx
+f0104a39:	83 fa 5e             	cmp    $0x5e,%edx
+f0104a3c:	76 10                	jbe    f0104a4e <vprintfmt+0x20f>
 					putch('?', putdat);
-f01047f6:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f01047fa:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
-f0104801:	ff 55 08             	call   *0x8(%ebp)
-f0104804:	eb 0a                	jmp    f0104810 <vprintfmt+0x219>
+f0104a3e:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104a42:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
+f0104a49:	ff 55 08             	call   *0x8(%ebp)
+f0104a4c:	eb 0a                	jmp    f0104a58 <vprintfmt+0x219>
 				else
 					putch(ch, putdat);
-f0104806:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f010480a:	89 04 24             	mov    %eax,(%esp)
-f010480d:	ff 55 08             	call   *0x8(%ebp)
+f0104a4e:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104a52:	89 04 24             	mov    %eax,(%esp)
+f0104a55:	ff 55 08             	call   *0x8(%ebp)
 			if ((p = va_arg(ap, char *)) == NULL)
 				p = "(null)";
 			if (width > 0 && padc != '-')
 				for (width -= strnlen(p, precision); width > 0; width--)
 					putch(padc, putdat);
 			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
-f0104810:	ff 4d dc             	decl   -0x24(%ebp)
-f0104813:	eb 0e                	jmp    f0104823 <vprintfmt+0x22c>
-f0104815:	89 5d 10             	mov    %ebx,0x10(%ebp)
-f0104818:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-f010481b:	eb 06                	jmp    f0104823 <vprintfmt+0x22c>
-f010481d:	89 5d 10             	mov    %ebx,0x10(%ebp)
-f0104820:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-f0104823:	46                   	inc    %esi
-f0104824:	8a 56 ff             	mov    -0x1(%esi),%dl
-f0104827:	0f be c2             	movsbl %dl,%eax
-f010482a:	85 c0                	test   %eax,%eax
-f010482c:	74 1f                	je     f010484d <vprintfmt+0x256>
-f010482e:	85 db                	test   %ebx,%ebx
-f0104830:	78 b3                	js     f01047e5 <vprintfmt+0x1ee>
-f0104832:	4b                   	dec    %ebx
-f0104833:	79 b0                	jns    f01047e5 <vprintfmt+0x1ee>
-f0104835:	8b 75 08             	mov    0x8(%ebp),%esi
-f0104838:	8b 5d dc             	mov    -0x24(%ebp),%ebx
-f010483b:	eb 16                	jmp    f0104853 <vprintfmt+0x25c>
+f0104a58:	ff 4d dc             	decl   -0x24(%ebp)
+f0104a5b:	eb 0e                	jmp    f0104a6b <vprintfmt+0x22c>
+f0104a5d:	89 5d 10             	mov    %ebx,0x10(%ebp)
+f0104a60:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+f0104a63:	eb 06                	jmp    f0104a6b <vprintfmt+0x22c>
+f0104a65:	89 5d 10             	mov    %ebx,0x10(%ebp)
+f0104a68:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+f0104a6b:	46                   	inc    %esi
+f0104a6c:	8a 56 ff             	mov    -0x1(%esi),%dl
+f0104a6f:	0f be c2             	movsbl %dl,%eax
+f0104a72:	85 c0                	test   %eax,%eax
+f0104a74:	74 1f                	je     f0104a95 <vprintfmt+0x256>
+f0104a76:	85 db                	test   %ebx,%ebx
+f0104a78:	78 b3                	js     f0104a2d <vprintfmt+0x1ee>
+f0104a7a:	4b                   	dec    %ebx
+f0104a7b:	79 b0                	jns    f0104a2d <vprintfmt+0x1ee>
+f0104a7d:	8b 75 08             	mov    0x8(%ebp),%esi
+f0104a80:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+f0104a83:	eb 16                	jmp    f0104a9b <vprintfmt+0x25c>
 				if (altflag && (ch < ' ' || ch > '~'))
 					putch('?', putdat);
 				else
 					putch(ch, putdat);
 			for (; width > 0; width--)
 				putch(' ', putdat);
-f010483d:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f0104841:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-f0104848:	ff d6                	call   *%esi
+f0104a85:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104a89:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+f0104a90:	ff d6                	call   *%esi
 			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
 				if (altflag && (ch < ' ' || ch > '~'))
 					putch('?', putdat);
 				else
 					putch(ch, putdat);
 			for (; width > 0; width--)
-f010484a:	4b                   	dec    %ebx
-f010484b:	eb 06                	jmp    f0104853 <vprintfmt+0x25c>
-f010484d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
-f0104850:	8b 75 08             	mov    0x8(%ebp),%esi
-f0104853:	85 db                	test   %ebx,%ebx
-f0104855:	7f e6                	jg     f010483d <vprintfmt+0x246>
-f0104857:	89 75 08             	mov    %esi,0x8(%ebp)
-f010485a:	8b 5d 10             	mov    0x10(%ebp),%ebx
-f010485d:	e9 ba fd ff ff       	jmp    f010461c <vprintfmt+0x25>
+f0104a92:	4b                   	dec    %ebx
+f0104a93:	eb 06                	jmp    f0104a9b <vprintfmt+0x25c>
+f0104a95:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+f0104a98:	8b 75 08             	mov    0x8(%ebp),%esi
+f0104a9b:	85 db                	test   %ebx,%ebx
+f0104a9d:	7f e6                	jg     f0104a85 <vprintfmt+0x246>
+f0104a9f:	89 75 08             	mov    %esi,0x8(%ebp)
+f0104aa2:	8b 5d 10             	mov    0x10(%ebp),%ebx
+f0104aa5:	e9 ba fd ff ff       	jmp    f0104864 <vprintfmt+0x25>
 // Same as getuint but signed - can't use getuint
 // because of sign extension
 static long long
 getint(va_list *ap, int lflag)
 {
 	if (lflag >= 2)
-f0104862:	83 fa 01             	cmp    $0x1,%edx
-f0104865:	7e 16                	jle    f010487d <vprintfmt+0x286>
+f0104aaa:	83 fa 01             	cmp    $0x1,%edx
+f0104aad:	7e 16                	jle    f0104ac5 <vprintfmt+0x286>
 		return va_arg(*ap, long long);
-f0104867:	8b 45 14             	mov    0x14(%ebp),%eax
-f010486a:	8d 50 08             	lea    0x8(%eax),%edx
-f010486d:	89 55 14             	mov    %edx,0x14(%ebp)
-f0104870:	8b 50 04             	mov    0x4(%eax),%edx
-f0104873:	8b 00                	mov    (%eax),%eax
-f0104875:	89 45 e0             	mov    %eax,-0x20(%ebp)
-f0104878:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-f010487b:	eb 32                	jmp    f01048af <vprintfmt+0x2b8>
+f0104aaf:	8b 45 14             	mov    0x14(%ebp),%eax
+f0104ab2:	8d 50 08             	lea    0x8(%eax),%edx
+f0104ab5:	89 55 14             	mov    %edx,0x14(%ebp)
+f0104ab8:	8b 50 04             	mov    0x4(%eax),%edx
+f0104abb:	8b 00                	mov    (%eax),%eax
+f0104abd:	89 45 e0             	mov    %eax,-0x20(%ebp)
+f0104ac0:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+f0104ac3:	eb 32                	jmp    f0104af7 <vprintfmt+0x2b8>
 	else if (lflag)
-f010487d:	85 d2                	test   %edx,%edx
-f010487f:	74 18                	je     f0104899 <vprintfmt+0x2a2>
+f0104ac5:	85 d2                	test   %edx,%edx
+f0104ac7:	74 18                	je     f0104ae1 <vprintfmt+0x2a2>
 		return va_arg(*ap, long);
-f0104881:	8b 45 14             	mov    0x14(%ebp),%eax
-f0104884:	8d 50 04             	lea    0x4(%eax),%edx
-f0104887:	89 55 14             	mov    %edx,0x14(%ebp)
-f010488a:	8b 30                	mov    (%eax),%esi
-f010488c:	89 75 e0             	mov    %esi,-0x20(%ebp)
-f010488f:	89 f0                	mov    %esi,%eax
-f0104891:	c1 f8 1f             	sar    $0x1f,%eax
-f0104894:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-f0104897:	eb 16                	jmp    f01048af <vprintfmt+0x2b8>
+f0104ac9:	8b 45 14             	mov    0x14(%ebp),%eax
+f0104acc:	8d 50 04             	lea    0x4(%eax),%edx
+f0104acf:	89 55 14             	mov    %edx,0x14(%ebp)
+f0104ad2:	8b 30                	mov    (%eax),%esi
+f0104ad4:	89 75 e0             	mov    %esi,-0x20(%ebp)
+f0104ad7:	89 f0                	mov    %esi,%eax
+f0104ad9:	c1 f8 1f             	sar    $0x1f,%eax
+f0104adc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+f0104adf:	eb 16                	jmp    f0104af7 <vprintfmt+0x2b8>
 	else
 		return va_arg(*ap, int);
-f0104899:	8b 45 14             	mov    0x14(%ebp),%eax
-f010489c:	8d 50 04             	lea    0x4(%eax),%edx
-f010489f:	89 55 14             	mov    %edx,0x14(%ebp)
-f01048a2:	8b 30                	mov    (%eax),%esi
-f01048a4:	89 75 e0             	mov    %esi,-0x20(%ebp)
-f01048a7:	89 f0                	mov    %esi,%eax
-f01048a9:	c1 f8 1f             	sar    $0x1f,%eax
-f01048ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+f0104ae1:	8b 45 14             	mov    0x14(%ebp),%eax
+f0104ae4:	8d 50 04             	lea    0x4(%eax),%edx
+f0104ae7:	89 55 14             	mov    %edx,0x14(%ebp)
+f0104aea:	8b 30                	mov    (%eax),%esi
+f0104aec:	89 75 e0             	mov    %esi,-0x20(%ebp)
+f0104aef:	89 f0                	mov    %esi,%eax
+f0104af1:	c1 f8 1f             	sar    $0x1f,%eax
+f0104af4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 				putch(' ', putdat);
 			break;
 
 		// (signed) decimal
 		case 'd':
 			num = getint(&ap, lflag);
-f01048af:	8b 45 e0             	mov    -0x20(%ebp),%eax
-f01048b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+f0104af7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f0104afa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 			if ((long long) num < 0) {
 				putch('-', putdat);
 				num = -(long long) num;
 			}
 			base = 10;
-f01048b5:	b9 0a 00 00 00       	mov    $0xa,%ecx
+f0104afd:	b9 0a 00 00 00       	mov    $0xa,%ecx
 			break;
 
 		// (signed) decimal
 		case 'd':
 			num = getint(&ap, lflag);
 			if ((long long) num < 0) {
-f01048ba:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-f01048be:	0f 89 80 00 00 00    	jns    f0104944 <vprintfmt+0x34d>
+f0104b02:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+f0104b06:	0f 89 80 00 00 00    	jns    f0104b8c <vprintfmt+0x34d>
 				putch('-', putdat);
-f01048c4:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f01048c8:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
-f01048cf:	ff 55 08             	call   *0x8(%ebp)
+f0104b0c:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104b10:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
+f0104b17:	ff 55 08             	call   *0x8(%ebp)
 				num = -(long long) num;
-f01048d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
-f01048d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-f01048d8:	f7 d8                	neg    %eax
-f01048da:	83 d2 00             	adc    $0x0,%edx
-f01048dd:	f7 da                	neg    %edx
+f0104b1a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+f0104b1d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+f0104b20:	f7 d8                	neg    %eax
+f0104b22:	83 d2 00             	adc    $0x0,%edx
+f0104b25:	f7 da                	neg    %edx
 			}
 			base = 10;
-f01048df:	b9 0a 00 00 00       	mov    $0xa,%ecx
-f01048e4:	eb 5e                	jmp    f0104944 <vprintfmt+0x34d>
+f0104b27:	b9 0a 00 00 00       	mov    $0xa,%ecx
+f0104b2c:	eb 5e                	jmp    f0104b8c <vprintfmt+0x34d>
 			goto number;
 
 		// unsigned decimal
 		case 'u':
 			num = getuint(&ap, lflag);
-f01048e6:	8d 45 14             	lea    0x14(%ebp),%eax
-f01048e9:	e8 8b fc ff ff       	call   f0104579 <getuint>
+f0104b2e:	8d 45 14             	lea    0x14(%ebp),%eax
+f0104b31:	e8 8b fc ff ff       	call   f01047c1 <getuint>
 			base = 10;
-f01048ee:	b9 0a 00 00 00       	mov    $0xa,%ecx
+f0104b36:	b9 0a 00 00 00       	mov    $0xa,%ecx
 			goto number;
-f01048f3:	eb 4f                	jmp    f0104944 <vprintfmt+0x34d>
+f0104b3b:	eb 4f                	jmp    f0104b8c <vprintfmt+0x34d>
 
 		// (unsigned) octal
 		case 'o':
 			// Replace this with your code.
 		  // exer 8.
 		  num = getuint(&ap, lflag);
-f01048f5:	8d 45 14             	lea    0x14(%ebp),%eax
-f01048f8:	e8 7c fc ff ff       	call   f0104579 <getuint>
+f0104b3d:	8d 45 14             	lea    0x14(%ebp),%eax
+f0104b40:	e8 7c fc ff ff       	call   f01047c1 <getuint>
 			base = 8;
-f01048fd:	b9 08 00 00 00       	mov    $0x8,%ecx
+f0104b45:	b9 08 00 00 00       	mov    $0x8,%ecx
 			goto number;
-f0104902:	eb 40                	jmp    f0104944 <vprintfmt+0x34d>
+f0104b4a:	eb 40                	jmp    f0104b8c <vprintfmt+0x34d>
 
 		// pointer
 		case 'p':
 			putch('0', putdat);
-f0104904:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f0104908:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
-f010490f:	ff 55 08             	call   *0x8(%ebp)
+f0104b4c:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104b50:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
+f0104b57:	ff 55 08             	call   *0x8(%ebp)
 			putch('x', putdat);
-f0104912:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f0104916:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
-f010491d:	ff 55 08             	call   *0x8(%ebp)
+f0104b5a:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104b5e:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
+f0104b65:	ff 55 08             	call   *0x8(%ebp)
 			num = (unsigned long long)
 				(uintptr_t) va_arg(ap, void *);
-f0104920:	8b 45 14             	mov    0x14(%ebp),%eax
-f0104923:	8d 50 04             	lea    0x4(%eax),%edx
-f0104926:	89 55 14             	mov    %edx,0x14(%ebp)
+f0104b68:	8b 45 14             	mov    0x14(%ebp),%eax
+f0104b6b:	8d 50 04             	lea    0x4(%eax),%edx
+f0104b6e:	89 55 14             	mov    %edx,0x14(%ebp)
 
 		// pointer
 		case 'p':
 			putch('0', putdat);
 			putch('x', putdat);
 			num = (unsigned long long)
-f0104929:	8b 00                	mov    (%eax),%eax
-f010492b:	ba 00 00 00 00       	mov    $0x0,%edx
+f0104b71:	8b 00                	mov    (%eax),%eax
+f0104b73:	ba 00 00 00 00       	mov    $0x0,%edx
 				(uintptr_t) va_arg(ap, void *);
 			base = 16;
-f0104930:	b9 10 00 00 00       	mov    $0x10,%ecx
+f0104b78:	b9 10 00 00 00       	mov    $0x10,%ecx
 			goto number;
-f0104935:	eb 0d                	jmp    f0104944 <vprintfmt+0x34d>
+f0104b7d:	eb 0d                	jmp    f0104b8c <vprintfmt+0x34d>
 
 		// (unsigned) hexadecimal
 		case 'x':
 			num = getuint(&ap, lflag);
-f0104937:	8d 45 14             	lea    0x14(%ebp),%eax
-f010493a:	e8 3a fc ff ff       	call   f0104579 <getuint>
+f0104b7f:	8d 45 14             	lea    0x14(%ebp),%eax
+f0104b82:	e8 3a fc ff ff       	call   f01047c1 <getuint>
 			base = 16;
-f010493f:	b9 10 00 00 00       	mov    $0x10,%ecx
+f0104b87:	b9 10 00 00 00       	mov    $0x10,%ecx
 		number:
 			printnum(putch, putdat, num, base, width, padc);
-f0104944:	0f be 75 d4          	movsbl -0x2c(%ebp),%esi
-f0104948:	89 74 24 10          	mov    %esi,0x10(%esp)
-f010494c:	8b 75 dc             	mov    -0x24(%ebp),%esi
-f010494f:	89 74 24 0c          	mov    %esi,0xc(%esp)
-f0104953:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-f0104957:	89 04 24             	mov    %eax,(%esp)
-f010495a:	89 54 24 04          	mov    %edx,0x4(%esp)
-f010495e:	89 fa                	mov    %edi,%edx
-f0104960:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104963:	e8 20 fb ff ff       	call   f0104488 <printnum>
+f0104b8c:	0f be 75 d4          	movsbl -0x2c(%ebp),%esi
+f0104b90:	89 74 24 10          	mov    %esi,0x10(%esp)
+f0104b94:	8b 75 dc             	mov    -0x24(%ebp),%esi
+f0104b97:	89 74 24 0c          	mov    %esi,0xc(%esp)
+f0104b9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+f0104b9f:	89 04 24             	mov    %eax,(%esp)
+f0104ba2:	89 54 24 04          	mov    %edx,0x4(%esp)
+f0104ba6:	89 fa                	mov    %edi,%edx
+f0104ba8:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104bab:	e8 20 fb ff ff       	call   f01046d0 <printnum>
 			break;
-f0104968:	e9 af fc ff ff       	jmp    f010461c <vprintfmt+0x25>
+f0104bb0:	e9 af fc ff ff       	jmp    f0104864 <vprintfmt+0x25>
 
 		// escaped '%' character
 		case '%':
 			putch(ch, putdat);
-f010496d:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f0104971:	89 04 24             	mov    %eax,(%esp)
-f0104974:	ff 55 08             	call   *0x8(%ebp)
+f0104bb5:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104bb9:	89 04 24             	mov    %eax,(%esp)
+f0104bbc:	ff 55 08             	call   *0x8(%ebp)
 			break;
-f0104977:	e9 a0 fc ff ff       	jmp    f010461c <vprintfmt+0x25>
+f0104bbf:	e9 a0 fc ff ff       	jmp    f0104864 <vprintfmt+0x25>
 
 		// unrecognized escape sequence - just print it literally
 		default:
 			putch('%', putdat);
-f010497c:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f0104980:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
-f0104987:	ff 55 08             	call   *0x8(%ebp)
+f0104bc4:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f0104bc8:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
+f0104bcf:	ff 55 08             	call   *0x8(%ebp)
 			for (fmt--; fmt[-1] != '%'; fmt--)
-f010498a:	89 f3                	mov    %esi,%ebx
-f010498c:	eb 01                	jmp    f010498f <vprintfmt+0x398>
-f010498e:	4b                   	dec    %ebx
-f010498f:	80 7b ff 25          	cmpb   $0x25,-0x1(%ebx)
-f0104993:	75 f9                	jne    f010498e <vprintfmt+0x397>
-f0104995:	e9 82 fc ff ff       	jmp    f010461c <vprintfmt+0x25>
+f0104bd2:	89 f3                	mov    %esi,%ebx
+f0104bd4:	eb 01                	jmp    f0104bd7 <vprintfmt+0x398>
+f0104bd6:	4b                   	dec    %ebx
+f0104bd7:	80 7b ff 25          	cmpb   $0x25,-0x1(%ebx)
+f0104bdb:	75 f9                	jne    f0104bd6 <vprintfmt+0x397>
+f0104bdd:	e9 82 fc ff ff       	jmp    f0104864 <vprintfmt+0x25>
 				/* do nothing */;
 			break;
 		}
 	}
 }
-f010499a:	83 c4 3c             	add    $0x3c,%esp
-f010499d:	5b                   	pop    %ebx
-f010499e:	5e                   	pop    %esi
-f010499f:	5f                   	pop    %edi
-f01049a0:	5d                   	pop    %ebp
-f01049a1:	c3                   	ret    
-
-f01049a2 <vsnprintf>:
+f0104be2:	83 c4 3c             	add    $0x3c,%esp
+f0104be5:	5b                   	pop    %ebx
+f0104be6:	5e                   	pop    %esi
+f0104be7:	5f                   	pop    %edi
+f0104be8:	5d                   	pop    %ebp
+f0104be9:	c3                   	ret    
+
+f0104bea <vsnprintf>:
 		*b->buf++ = ch;
 }
 
 int
 vsnprintf(char *buf, int n, const char *fmt, va_list ap)
 {
-f01049a2:	55                   	push   %ebp
-f01049a3:	89 e5                	mov    %esp,%ebp
-f01049a5:	83 ec 28             	sub    $0x28,%esp
-f01049a8:	8b 45 08             	mov    0x8(%ebp),%eax
-f01049ab:	8b 55 0c             	mov    0xc(%ebp),%edx
+f0104bea:	55                   	push   %ebp
+f0104beb:	89 e5                	mov    %esp,%ebp
+f0104bed:	83 ec 28             	sub    $0x28,%esp
+f0104bf0:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104bf3:	8b 55 0c             	mov    0xc(%ebp),%edx
 	struct sprintbuf b = {buf, buf+n-1, 0};
-f01049ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
-f01049b1:	8d 4c 10 ff          	lea    -0x1(%eax,%edx,1),%ecx
-f01049b5:	89 4d f0             	mov    %ecx,-0x10(%ebp)
-f01049b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+f0104bf6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+f0104bf9:	8d 4c 10 ff          	lea    -0x1(%eax,%edx,1),%ecx
+f0104bfd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
+f0104c00:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 
 	if (buf == NULL || n < 1)
-f01049bf:	85 c0                	test   %eax,%eax
-f01049c1:	74 30                	je     f01049f3 <vsnprintf+0x51>
-f01049c3:	85 d2                	test   %edx,%edx
-f01049c5:	7e 2c                	jle    f01049f3 <vsnprintf+0x51>
+f0104c07:	85 c0                	test   %eax,%eax
+f0104c09:	74 30                	je     f0104c3b <vsnprintf+0x51>
+f0104c0b:	85 d2                	test   %edx,%edx
+f0104c0d:	7e 2c                	jle    f0104c3b <vsnprintf+0x51>
 		return -E_INVAL;
 
 	// print the string to the buffer
 	vprintfmt((void*)sprintputch, &b, fmt, ap);
-f01049c7:	8b 45 14             	mov    0x14(%ebp),%eax
-f01049ca:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f01049ce:	8b 45 10             	mov    0x10(%ebp),%eax
-f01049d1:	89 44 24 08          	mov    %eax,0x8(%esp)
-f01049d5:	8d 45 ec             	lea    -0x14(%ebp),%eax
-f01049d8:	89 44 24 04          	mov    %eax,0x4(%esp)
-f01049dc:	c7 04 24 b3 45 10 f0 	movl   $0xf01045b3,(%esp)
-f01049e3:	e8 0f fc ff ff       	call   f01045f7 <vprintfmt>
+f0104c0f:	8b 45 14             	mov    0x14(%ebp),%eax
+f0104c12:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f0104c16:	8b 45 10             	mov    0x10(%ebp),%eax
+f0104c19:	89 44 24 08          	mov    %eax,0x8(%esp)
+f0104c1d:	8d 45 ec             	lea    -0x14(%ebp),%eax
+f0104c20:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0104c24:	c7 04 24 fb 47 10 f0 	movl   $0xf01047fb,(%esp)
+f0104c2b:	e8 0f fc ff ff       	call   f010483f <vprintfmt>
 
 	// null terminate the buffer
 	*b.buf = '\0';
-f01049e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
-f01049eb:	c6 00 00             	movb   $0x0,(%eax)
+f0104c30:	8b 45 ec             	mov    -0x14(%ebp),%eax
+f0104c33:	c6 00 00             	movb   $0x0,(%eax)
 
 	return b.cnt;
-f01049ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
-f01049f1:	eb 05                	jmp    f01049f8 <vsnprintf+0x56>
+f0104c36:	8b 45 f4             	mov    -0xc(%ebp),%eax
+f0104c39:	eb 05                	jmp    f0104c40 <vsnprintf+0x56>
 vsnprintf(char *buf, int n, const char *fmt, va_list ap)
 {
 	struct sprintbuf b = {buf, buf+n-1, 0};
 
 	if (buf == NULL || n < 1)
 		return -E_INVAL;
-f01049f3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+f0104c3b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
 
 	// null terminate the buffer
 	*b.buf = '\0';
 
 	return b.cnt;
 }
-f01049f8:	c9                   	leave  
-f01049f9:	c3                   	ret    
+f0104c40:	c9                   	leave  
+f0104c41:	c3                   	ret    
 
-f01049fa <snprintf>:
+f0104c42 <snprintf>:
 
 int
 snprintf(char *buf, int n, const char *fmt, ...)
 {
-f01049fa:	55                   	push   %ebp
-f01049fb:	89 e5                	mov    %esp,%ebp
-f01049fd:	83 ec 18             	sub    $0x18,%esp
+f0104c42:	55                   	push   %ebp
+f0104c43:	89 e5                	mov    %esp,%ebp
+f0104c45:	83 ec 18             	sub    $0x18,%esp
 	va_list ap;
 	int rc;
 
 	va_start(ap, fmt);
-f0104a00:	8d 45 14             	lea    0x14(%ebp),%eax
+f0104c48:	8d 45 14             	lea    0x14(%ebp),%eax
 	rc = vsnprintf(buf, n, fmt, ap);
-f0104a03:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f0104a07:	8b 45 10             	mov    0x10(%ebp),%eax
-f0104a0a:	89 44 24 08          	mov    %eax,0x8(%esp)
-f0104a0e:	8b 45 0c             	mov    0xc(%ebp),%eax
-f0104a11:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0104a15:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104a18:	89 04 24             	mov    %eax,(%esp)
-f0104a1b:	e8 82 ff ff ff       	call   f01049a2 <vsnprintf>
+f0104c4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f0104c4f:	8b 45 10             	mov    0x10(%ebp),%eax
+f0104c52:	89 44 24 08          	mov    %eax,0x8(%esp)
+f0104c56:	8b 45 0c             	mov    0xc(%ebp),%eax
+f0104c59:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0104c5d:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104c60:	89 04 24             	mov    %eax,(%esp)
+f0104c63:	e8 82 ff ff ff       	call   f0104bea <vsnprintf>
 	va_end(ap);
 
 	return rc;
 }
-f0104a20:	c9                   	leave  
-f0104a21:	c3                   	ret    
-f0104a22:	66 90                	xchg   %ax,%ax
+f0104c68:	c9                   	leave  
+f0104c69:	c3                   	ret    
+f0104c6a:	66 90                	xchg   %ax,%ax
 
-f0104a24 <readline>:
+f0104c6c <readline>:
 #define BUFLEN 1024
 static char buf[BUFLEN];
 
 char *
 readline(const char *prompt)
 {
-f0104a24:	55                   	push   %ebp
-f0104a25:	89 e5                	mov    %esp,%ebp
-f0104a27:	57                   	push   %edi
-f0104a28:	56                   	push   %esi
-f0104a29:	53                   	push   %ebx
-f0104a2a:	83 ec 1c             	sub    $0x1c,%esp
-f0104a2d:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104c6c:	55                   	push   %ebp
+f0104c6d:	89 e5                	mov    %esp,%ebp
+f0104c6f:	57                   	push   %edi
+f0104c70:	56                   	push   %esi
+f0104c71:	53                   	push   %ebx
+f0104c72:	83 ec 1c             	sub    $0x1c,%esp
+f0104c75:	8b 45 08             	mov    0x8(%ebp),%eax
 	int i, c, echoing;
 
 	if (prompt != NULL)
-f0104a30:	85 c0                	test   %eax,%eax
-f0104a32:	74 10                	je     f0104a44 <readline+0x20>
+f0104c78:	85 c0                	test   %eax,%eax
+f0104c7a:	74 10                	je     f0104c8c <readline+0x20>
 		cprintf("%s", prompt);
-f0104a34:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0104a38:	c7 04 24 42 5a 10 f0 	movl   $0xf0105a42,(%esp)
-f0104a3f:	e8 46 ef ff ff       	call   f010398a <cprintf>
+f0104c7c:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0104c80:	c7 04 24 82 5c 10 f0 	movl   $0xf0105c82,(%esp)
+f0104c87:	e8 ca ec ff ff       	call   f0103956 <cprintf>
 
 	i = 0;
 	echoing = iscons(0);
-f0104a44:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-f0104a4b:	e8 e6 bb ff ff       	call   f0100636 <iscons>
-f0104a50:	89 c7                	mov    %eax,%edi
+f0104c8c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+f0104c93:	e8 9e b9 ff ff       	call   f0100636 <iscons>
+f0104c98:	89 c7                	mov    %eax,%edi
 	int i, c, echoing;
 
 	if (prompt != NULL)
 		cprintf("%s", prompt);
 
 	i = 0;
-f0104a52:	be 00 00 00 00       	mov    $0x0,%esi
+f0104c9a:	be 00 00 00 00       	mov    $0x0,%esi
 	echoing = iscons(0);
 	while (1) {
 		c = getchar();
-f0104a57:	e8 c9 bb ff ff       	call   f0100625 <getchar>
-f0104a5c:	89 c3                	mov    %eax,%ebx
+f0104c9f:	e8 81 b9 ff ff       	call   f0100625 <getchar>
+f0104ca4:	89 c3                	mov    %eax,%ebx
 		if (c < 0) {
-f0104a5e:	85 c0                	test   %eax,%eax
-f0104a60:	79 17                	jns    f0104a79 <readline+0x55>
+f0104ca6:	85 c0                	test   %eax,%eax
+f0104ca8:	79 17                	jns    f0104cc1 <readline+0x55>
 			cprintf("read error: %e\n", c);
-f0104a62:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0104a66:	c7 04 24 20 6d 10 f0 	movl   $0xf0106d20,(%esp)
-f0104a6d:	e8 18 ef ff ff       	call   f010398a <cprintf>
+f0104caa:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0104cae:	c7 04 24 e0 6f 10 f0 	movl   $0xf0106fe0,(%esp)
+f0104cb5:	e8 9c ec ff ff       	call   f0103956 <cprintf>
 			return NULL;
-f0104a72:	b8 00 00 00 00       	mov    $0x0,%eax
-f0104a77:	eb 6b                	jmp    f0104ae4 <readline+0xc0>
+f0104cba:	b8 00 00 00 00       	mov    $0x0,%eax
+f0104cbf:	eb 6b                	jmp    f0104d2c <readline+0xc0>
 		} else if ((c == '\b' || c == '\x7f') && i > 0) {
-f0104a79:	83 f8 7f             	cmp    $0x7f,%eax
-f0104a7c:	74 05                	je     f0104a83 <readline+0x5f>
-f0104a7e:	83 f8 08             	cmp    $0x8,%eax
-f0104a81:	75 17                	jne    f0104a9a <readline+0x76>
-f0104a83:	85 f6                	test   %esi,%esi
-f0104a85:	7e 13                	jle    f0104a9a <readline+0x76>
+f0104cc1:	83 f8 7f             	cmp    $0x7f,%eax
+f0104cc4:	74 05                	je     f0104ccb <readline+0x5f>
+f0104cc6:	83 f8 08             	cmp    $0x8,%eax
+f0104cc9:	75 17                	jne    f0104ce2 <readline+0x76>
+f0104ccb:	85 f6                	test   %esi,%esi
+f0104ccd:	7e 13                	jle    f0104ce2 <readline+0x76>
 			if (echoing)
-f0104a87:	85 ff                	test   %edi,%edi
-f0104a89:	74 0c                	je     f0104a97 <readline+0x73>
+f0104ccf:	85 ff                	test   %edi,%edi
+f0104cd1:	74 0c                	je     f0104cdf <readline+0x73>
 				cputchar('\b');
-f0104a8b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-f0104a92:	e8 7e bb ff ff       	call   f0100615 <cputchar>
+f0104cd3:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+f0104cda:	e8 36 b9 ff ff       	call   f0100615 <cputchar>
 			i--;
-f0104a97:	4e                   	dec    %esi
-f0104a98:	eb bd                	jmp    f0104a57 <readline+0x33>
+f0104cdf:	4e                   	dec    %esi
+f0104ce0:	eb bd                	jmp    f0104c9f <readline+0x33>
 		} else if (c >= ' ' && i < BUFLEN-1) {
-f0104a9a:	81 fe fe 03 00 00    	cmp    $0x3fe,%esi
-f0104aa0:	7f 1c                	jg     f0104abe <readline+0x9a>
-f0104aa2:	83 fb 1f             	cmp    $0x1f,%ebx
-f0104aa5:	7e 17                	jle    f0104abe <readline+0x9a>
+f0104ce2:	81 fe fe 03 00 00    	cmp    $0x3fe,%esi
+f0104ce8:	7f 1c                	jg     f0104d06 <readline+0x9a>
+f0104cea:	83 fb 1f             	cmp    $0x1f,%ebx
+f0104ced:	7e 17                	jle    f0104d06 <readline+0x9a>
 			if (echoing)
-f0104aa7:	85 ff                	test   %edi,%edi
-f0104aa9:	74 08                	je     f0104ab3 <readline+0x8f>
+f0104cef:	85 ff                	test   %edi,%edi
+f0104cf1:	74 08                	je     f0104cfb <readline+0x8f>
 				cputchar(c);
-f0104aab:	89 1c 24             	mov    %ebx,(%esp)
-f0104aae:	e8 62 bb ff ff       	call   f0100615 <cputchar>
+f0104cf3:	89 1c 24             	mov    %ebx,(%esp)
+f0104cf6:	e8 1a b9 ff ff       	call   f0100615 <cputchar>
 			buf[i++] = c;
-f0104ab3:	88 9e 60 45 19 f0    	mov    %bl,-0xfe6baa0(%esi)
-f0104ab9:	8d 76 01             	lea    0x1(%esi),%esi
-f0104abc:	eb 99                	jmp    f0104a57 <readline+0x33>
+f0104cfb:	88 9e 60 45 19 f0    	mov    %bl,-0xfe6baa0(%esi)
+f0104d01:	8d 76 01             	lea    0x1(%esi),%esi
+f0104d04:	eb 99                	jmp    f0104c9f <readline+0x33>
 		} else if (c == '\n' || c == '\r') {
-f0104abe:	83 fb 0d             	cmp    $0xd,%ebx
-f0104ac1:	74 05                	je     f0104ac8 <readline+0xa4>
-f0104ac3:	83 fb 0a             	cmp    $0xa,%ebx
-f0104ac6:	75 8f                	jne    f0104a57 <readline+0x33>
+f0104d06:	83 fb 0d             	cmp    $0xd,%ebx
+f0104d09:	74 05                	je     f0104d10 <readline+0xa4>
+f0104d0b:	83 fb 0a             	cmp    $0xa,%ebx
+f0104d0e:	75 8f                	jne    f0104c9f <readline+0x33>
 			if (echoing)
-f0104ac8:	85 ff                	test   %edi,%edi
-f0104aca:	74 0c                	je     f0104ad8 <readline+0xb4>
+f0104d10:	85 ff                	test   %edi,%edi
+f0104d12:	74 0c                	je     f0104d20 <readline+0xb4>
 				cputchar('\n');
-f0104acc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
-f0104ad3:	e8 3d bb ff ff       	call   f0100615 <cputchar>
+f0104d14:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+f0104d1b:	e8 f5 b8 ff ff       	call   f0100615 <cputchar>
 			buf[i] = 0;
-f0104ad8:	c6 86 60 45 19 f0 00 	movb   $0x0,-0xfe6baa0(%esi)
+f0104d20:	c6 86 60 45 19 f0 00 	movb   $0x0,-0xfe6baa0(%esi)
 			return buf;
-f0104adf:	b8 60 45 19 f0       	mov    $0xf0194560,%eax
+f0104d27:	b8 60 45 19 f0       	mov    $0xf0194560,%eax
 		}
 	}
 }
-f0104ae4:	83 c4 1c             	add    $0x1c,%esp
-f0104ae7:	5b                   	pop    %ebx
-f0104ae8:	5e                   	pop    %esi
-f0104ae9:	5f                   	pop    %edi
-f0104aea:	5d                   	pop    %ebp
-f0104aeb:	c3                   	ret    
-
-f0104aec <strlen>:
+f0104d2c:	83 c4 1c             	add    $0x1c,%esp
+f0104d2f:	5b                   	pop    %ebx
+f0104d30:	5e                   	pop    %esi
+f0104d31:	5f                   	pop    %edi
+f0104d32:	5d                   	pop    %ebp
+f0104d33:	c3                   	ret    
+
+f0104d34 <strlen>:
 // Primespipe runs 3x faster this way.
 #define ASM 1
 
 int
 strlen(const char *s)
 {
-f0104aec:	55                   	push   %ebp
-f0104aed:	89 e5                	mov    %esp,%ebp
-f0104aef:	8b 55 08             	mov    0x8(%ebp),%edx
+f0104d34:	55                   	push   %ebp
+f0104d35:	89 e5                	mov    %esp,%ebp
+f0104d37:	8b 55 08             	mov    0x8(%ebp),%edx
 	int n;
 
 	for (n = 0; *s != '\0'; s++)
-f0104af2:	b8 00 00 00 00       	mov    $0x0,%eax
-f0104af7:	eb 01                	jmp    f0104afa <strlen+0xe>
+f0104d3a:	b8 00 00 00 00       	mov    $0x0,%eax
+f0104d3f:	eb 01                	jmp    f0104d42 <strlen+0xe>
 		n++;
-f0104af9:	40                   	inc    %eax
+f0104d41:	40                   	inc    %eax
 int
 strlen(const char *s)
 {
 	int n;
 
 	for (n = 0; *s != '\0'; s++)
-f0104afa:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-f0104afe:	75 f9                	jne    f0104af9 <strlen+0xd>
+f0104d42:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+f0104d46:	75 f9                	jne    f0104d41 <strlen+0xd>
 		n++;
 	return n;
 }
-f0104b00:	5d                   	pop    %ebp
-f0104b01:	c3                   	ret    
+f0104d48:	5d                   	pop    %ebp
+f0104d49:	c3                   	ret    
 
-f0104b02 <strnlen>:
+f0104d4a <strnlen>:
 
 int
 strnlen(const char *s, size_t size)
 {
-f0104b02:	55                   	push   %ebp
-f0104b03:	89 e5                	mov    %esp,%ebp
-f0104b05:	8b 4d 08             	mov    0x8(%ebp),%ecx
-f0104b08:	8b 55 0c             	mov    0xc(%ebp),%edx
+f0104d4a:	55                   	push   %ebp
+f0104d4b:	89 e5                	mov    %esp,%ebp
+f0104d4d:	8b 4d 08             	mov    0x8(%ebp),%ecx
+f0104d50:	8b 55 0c             	mov    0xc(%ebp),%edx
 	int n;
 
 	for (n = 0; size > 0 && *s != '\0'; s++, size--)
-f0104b0b:	b8 00 00 00 00       	mov    $0x0,%eax
-f0104b10:	eb 01                	jmp    f0104b13 <strnlen+0x11>
+f0104d53:	b8 00 00 00 00       	mov    $0x0,%eax
+f0104d58:	eb 01                	jmp    f0104d5b <strnlen+0x11>
 		n++;
-f0104b12:	40                   	inc    %eax
+f0104d5a:	40                   	inc    %eax
 int
 strnlen(const char *s, size_t size)
 {
 	int n;
 
 	for (n = 0; size > 0 && *s != '\0'; s++, size--)
-f0104b13:	39 d0                	cmp    %edx,%eax
-f0104b15:	74 06                	je     f0104b1d <strnlen+0x1b>
-f0104b17:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
-f0104b1b:	75 f5                	jne    f0104b12 <strnlen+0x10>
+f0104d5b:	39 d0                	cmp    %edx,%eax
+f0104d5d:	74 06                	je     f0104d65 <strnlen+0x1b>
+f0104d5f:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
+f0104d63:	75 f5                	jne    f0104d5a <strnlen+0x10>
 		n++;
 	return n;
 }
-f0104b1d:	5d                   	pop    %ebp
-f0104b1e:	c3                   	ret    
+f0104d65:	5d                   	pop    %ebp
+f0104d66:	c3                   	ret    
 
-f0104b1f <strcpy>:
+f0104d67 <strcpy>:
 
 char *
 strcpy(char *dst, const char *src)
 {
-f0104b1f:	55                   	push   %ebp
-f0104b20:	89 e5                	mov    %esp,%ebp
-f0104b22:	53                   	push   %ebx
-f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104b26:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+f0104d67:	55                   	push   %ebp
+f0104d68:	89 e5                	mov    %esp,%ebp
+f0104d6a:	53                   	push   %ebx
+f0104d6b:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104d6e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 	char *ret;
 
 	ret = dst;
 	while ((*dst++ = *src++) != '\0')
-f0104b29:	89 c2                	mov    %eax,%edx
-f0104b2b:	42                   	inc    %edx
-f0104b2c:	41                   	inc    %ecx
-f0104b2d:	8a 59 ff             	mov    -0x1(%ecx),%bl
-f0104b30:	88 5a ff             	mov    %bl,-0x1(%edx)
-f0104b33:	84 db                	test   %bl,%bl
-f0104b35:	75 f4                	jne    f0104b2b <strcpy+0xc>
+f0104d71:	89 c2                	mov    %eax,%edx
+f0104d73:	42                   	inc    %edx
+f0104d74:	41                   	inc    %ecx
+f0104d75:	8a 59 ff             	mov    -0x1(%ecx),%bl
+f0104d78:	88 5a ff             	mov    %bl,-0x1(%edx)
+f0104d7b:	84 db                	test   %bl,%bl
+f0104d7d:	75 f4                	jne    f0104d73 <strcpy+0xc>
 		/* do nothing */;
 	return ret;
 }
-f0104b37:	5b                   	pop    %ebx
-f0104b38:	5d                   	pop    %ebp
-f0104b39:	c3                   	ret    
+f0104d7f:	5b                   	pop    %ebx
+f0104d80:	5d                   	pop    %ebp
+f0104d81:	c3                   	ret    
 
-f0104b3a <strcat>:
+f0104d82 <strcat>:
 
 char *
 strcat(char *dst, const char *src)
 {
-f0104b3a:	55                   	push   %ebp
-f0104b3b:	89 e5                	mov    %esp,%ebp
-f0104b3d:	53                   	push   %ebx
-f0104b3e:	83 ec 08             	sub    $0x8,%esp
-f0104b41:	8b 5d 08             	mov    0x8(%ebp),%ebx
+f0104d82:	55                   	push   %ebp
+f0104d83:	89 e5                	mov    %esp,%ebp
+f0104d85:	53                   	push   %ebx
+f0104d86:	83 ec 08             	sub    $0x8,%esp
+f0104d89:	8b 5d 08             	mov    0x8(%ebp),%ebx
 	int len = strlen(dst);
-f0104b44:	89 1c 24             	mov    %ebx,(%esp)
-f0104b47:	e8 a0 ff ff ff       	call   f0104aec <strlen>
+f0104d8c:	89 1c 24             	mov    %ebx,(%esp)
+f0104d8f:	e8 a0 ff ff ff       	call   f0104d34 <strlen>
 	strcpy(dst + len, src);
-f0104b4c:	8b 55 0c             	mov    0xc(%ebp),%edx
-f0104b4f:	89 54 24 04          	mov    %edx,0x4(%esp)
-f0104b53:	01 d8                	add    %ebx,%eax
-f0104b55:	89 04 24             	mov    %eax,(%esp)
-f0104b58:	e8 c2 ff ff ff       	call   f0104b1f <strcpy>
+f0104d94:	8b 55 0c             	mov    0xc(%ebp),%edx
+f0104d97:	89 54 24 04          	mov    %edx,0x4(%esp)
+f0104d9b:	01 d8                	add    %ebx,%eax
+f0104d9d:	89 04 24             	mov    %eax,(%esp)
+f0104da0:	e8 c2 ff ff ff       	call   f0104d67 <strcpy>
 	return dst;
 }
-f0104b5d:	89 d8                	mov    %ebx,%eax
-f0104b5f:	83 c4 08             	add    $0x8,%esp
-f0104b62:	5b                   	pop    %ebx
-f0104b63:	5d                   	pop    %ebp
-f0104b64:	c3                   	ret    
+f0104da5:	89 d8                	mov    %ebx,%eax
+f0104da7:	83 c4 08             	add    $0x8,%esp
+f0104daa:	5b                   	pop    %ebx
+f0104dab:	5d                   	pop    %ebp
+f0104dac:	c3                   	ret    
 
-f0104b65 <strncpy>:
+f0104dad <strncpy>:
 
 char *
 strncpy(char *dst, const char *src, size_t size) {
-f0104b65:	55                   	push   %ebp
-f0104b66:	89 e5                	mov    %esp,%ebp
-f0104b68:	56                   	push   %esi
-f0104b69:	53                   	push   %ebx
-f0104b6a:	8b 75 08             	mov    0x8(%ebp),%esi
-f0104b6d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-f0104b70:	89 f3                	mov    %esi,%ebx
-f0104b72:	03 5d 10             	add    0x10(%ebp),%ebx
+f0104dad:	55                   	push   %ebp
+f0104dae:	89 e5                	mov    %esp,%ebp
+f0104db0:	56                   	push   %esi
+f0104db1:	53                   	push   %ebx
+f0104db2:	8b 75 08             	mov    0x8(%ebp),%esi
+f0104db5:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+f0104db8:	89 f3                	mov    %esi,%ebx
+f0104dba:	03 5d 10             	add    0x10(%ebp),%ebx
 	size_t i;
 	char *ret;
 
 	ret = dst;
 	for (i = 0; i < size; i++) {
-f0104b75:	89 f2                	mov    %esi,%edx
-f0104b77:	eb 0c                	jmp    f0104b85 <strncpy+0x20>
+f0104dbd:	89 f2                	mov    %esi,%edx
+f0104dbf:	eb 0c                	jmp    f0104dcd <strncpy+0x20>
 		*dst++ = *src;
-f0104b79:	42                   	inc    %edx
-f0104b7a:	8a 01                	mov    (%ecx),%al
-f0104b7c:	88 42 ff             	mov    %al,-0x1(%edx)
+f0104dc1:	42                   	inc    %edx
+f0104dc2:	8a 01                	mov    (%ecx),%al
+f0104dc4:	88 42 ff             	mov    %al,-0x1(%edx)
 		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
 		if (*src != '\0')
 			src++;
-f0104b7f:	80 39 01             	cmpb   $0x1,(%ecx)
-f0104b82:	83 d9 ff             	sbb    $0xffffffff,%ecx
+f0104dc7:	80 39 01             	cmpb   $0x1,(%ecx)
+f0104dca:	83 d9 ff             	sbb    $0xffffffff,%ecx
 strncpy(char *dst, const char *src, size_t size) {
 	size_t i;
 	char *ret;
 
 	ret = dst;
 	for (i = 0; i < size; i++) {
-f0104b85:	39 da                	cmp    %ebx,%edx
-f0104b87:	75 f0                	jne    f0104b79 <strncpy+0x14>
+f0104dcd:	39 da                	cmp    %ebx,%edx
+f0104dcf:	75 f0                	jne    f0104dc1 <strncpy+0x14>
 		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
 		if (*src != '\0')
 			src++;
 	}
 	return ret;
 }
-f0104b89:	89 f0                	mov    %esi,%eax
-f0104b8b:	5b                   	pop    %ebx
-f0104b8c:	5e                   	pop    %esi
-f0104b8d:	5d                   	pop    %ebp
-f0104b8e:	c3                   	ret    
+f0104dd1:	89 f0                	mov    %esi,%eax
+f0104dd3:	5b                   	pop    %ebx
+f0104dd4:	5e                   	pop    %esi
+f0104dd5:	5d                   	pop    %ebp
+f0104dd6:	c3                   	ret    
 
-f0104b8f <strlcpy>:
+f0104dd7 <strlcpy>:
 
 size_t
 strlcpy(char *dst, const char *src, size_t size)
 {
-f0104b8f:	55                   	push   %ebp
-f0104b90:	89 e5                	mov    %esp,%ebp
-f0104b92:	56                   	push   %esi
-f0104b93:	53                   	push   %ebx
-f0104b94:	8b 75 08             	mov    0x8(%ebp),%esi
-f0104b97:	8b 55 0c             	mov    0xc(%ebp),%edx
-f0104b9a:	8b 4d 10             	mov    0x10(%ebp),%ecx
-f0104b9d:	89 f0                	mov    %esi,%eax
-f0104b9f:	8d 5c 0e ff          	lea    -0x1(%esi,%ecx,1),%ebx
+f0104dd7:	55                   	push   %ebp
+f0104dd8:	89 e5                	mov    %esp,%ebp
+f0104dda:	56                   	push   %esi
+f0104ddb:	53                   	push   %ebx
+f0104ddc:	8b 75 08             	mov    0x8(%ebp),%esi
+f0104ddf:	8b 55 0c             	mov    0xc(%ebp),%edx
+f0104de2:	8b 4d 10             	mov    0x10(%ebp),%ecx
+f0104de5:	89 f0                	mov    %esi,%eax
+f0104de7:	8d 5c 0e ff          	lea    -0x1(%esi,%ecx,1),%ebx
 	char *dst_in;
 
 	dst_in = dst;
 	if (size > 0) {
-f0104ba3:	85 c9                	test   %ecx,%ecx
-f0104ba5:	75 07                	jne    f0104bae <strlcpy+0x1f>
-f0104ba7:	eb 18                	jmp    f0104bc1 <strlcpy+0x32>
+f0104deb:	85 c9                	test   %ecx,%ecx
+f0104ded:	75 07                	jne    f0104df6 <strlcpy+0x1f>
+f0104def:	eb 18                	jmp    f0104e09 <strlcpy+0x32>
 		while (--size > 0 && *src != '\0')
 			*dst++ = *src++;
-f0104ba9:	40                   	inc    %eax
-f0104baa:	42                   	inc    %edx
-f0104bab:	88 48 ff             	mov    %cl,-0x1(%eax)
+f0104df1:	40                   	inc    %eax
+f0104df2:	42                   	inc    %edx
+f0104df3:	88 48 ff             	mov    %cl,-0x1(%eax)
 {
 	char *dst_in;
 
 	dst_in = dst;
 	if (size > 0) {
 		while (--size > 0 && *src != '\0')
-f0104bae:	39 d8                	cmp    %ebx,%eax
-f0104bb0:	74 0a                	je     f0104bbc <strlcpy+0x2d>
-f0104bb2:	8a 0a                	mov    (%edx),%cl
-f0104bb4:	84 c9                	test   %cl,%cl
-f0104bb6:	75 f1                	jne    f0104ba9 <strlcpy+0x1a>
-f0104bb8:	89 c2                	mov    %eax,%edx
-f0104bba:	eb 02                	jmp    f0104bbe <strlcpy+0x2f>
-f0104bbc:	89 c2                	mov    %eax,%edx
+f0104df6:	39 d8                	cmp    %ebx,%eax
+f0104df8:	74 0a                	je     f0104e04 <strlcpy+0x2d>
+f0104dfa:	8a 0a                	mov    (%edx),%cl
+f0104dfc:	84 c9                	test   %cl,%cl
+f0104dfe:	75 f1                	jne    f0104df1 <strlcpy+0x1a>
+f0104e00:	89 c2                	mov    %eax,%edx
+f0104e02:	eb 02                	jmp    f0104e06 <strlcpy+0x2f>
+f0104e04:	89 c2                	mov    %eax,%edx
 			*dst++ = *src++;
 		*dst = '\0';
-f0104bbe:	c6 02 00             	movb   $0x0,(%edx)
+f0104e06:	c6 02 00             	movb   $0x0,(%edx)
 	}
 	return dst - dst_in;
-f0104bc1:	29 f0                	sub    %esi,%eax
+f0104e09:	29 f0                	sub    %esi,%eax
 }
-f0104bc3:	5b                   	pop    %ebx
-f0104bc4:	5e                   	pop    %esi
-f0104bc5:	5d                   	pop    %ebp
-f0104bc6:	c3                   	ret    
+f0104e0b:	5b                   	pop    %ebx
+f0104e0c:	5e                   	pop    %esi
+f0104e0d:	5d                   	pop    %ebp
+f0104e0e:	c3                   	ret    
 
-f0104bc7 <strcmp>:
+f0104e0f <strcmp>:
 
 int
 strcmp(const char *p, const char *q)
 {
-f0104bc7:	55                   	push   %ebp
-f0104bc8:	89 e5                	mov    %esp,%ebp
-f0104bca:	8b 4d 08             	mov    0x8(%ebp),%ecx
-f0104bcd:	8b 55 0c             	mov    0xc(%ebp),%edx
+f0104e0f:	55                   	push   %ebp
+f0104e10:	89 e5                	mov    %esp,%ebp
+f0104e12:	8b 4d 08             	mov    0x8(%ebp),%ecx
+f0104e15:	8b 55 0c             	mov    0xc(%ebp),%edx
 	while (*p && *p == *q)
-f0104bd0:	eb 02                	jmp    f0104bd4 <strcmp+0xd>
+f0104e18:	eb 02                	jmp    f0104e1c <strcmp+0xd>
 		p++, q++;
-f0104bd2:	41                   	inc    %ecx
-f0104bd3:	42                   	inc    %edx
+f0104e1a:	41                   	inc    %ecx
+f0104e1b:	42                   	inc    %edx
 }
 
 int
 strcmp(const char *p, const char *q)
 {
 	while (*p && *p == *q)
-f0104bd4:	8a 01                	mov    (%ecx),%al
-f0104bd6:	84 c0                	test   %al,%al
-f0104bd8:	74 04                	je     f0104bde <strcmp+0x17>
-f0104bda:	3a 02                	cmp    (%edx),%al
-f0104bdc:	74 f4                	je     f0104bd2 <strcmp+0xb>
+f0104e1c:	8a 01                	mov    (%ecx),%al
+f0104e1e:	84 c0                	test   %al,%al
+f0104e20:	74 04                	je     f0104e26 <strcmp+0x17>
+f0104e22:	3a 02                	cmp    (%edx),%al
+f0104e24:	74 f4                	je     f0104e1a <strcmp+0xb>
 		p++, q++;
 	return (int) ((unsigned char) *p - (unsigned char) *q);
-f0104bde:	25 ff 00 00 00       	and    $0xff,%eax
-f0104be3:	8a 0a                	mov    (%edx),%cl
-f0104be5:	81 e1 ff 00 00 00    	and    $0xff,%ecx
-f0104beb:	29 c8                	sub    %ecx,%eax
+f0104e26:	25 ff 00 00 00       	and    $0xff,%eax
+f0104e2b:	8a 0a                	mov    (%edx),%cl
+f0104e2d:	81 e1 ff 00 00 00    	and    $0xff,%ecx
+f0104e33:	29 c8                	sub    %ecx,%eax
 }
-f0104bed:	5d                   	pop    %ebp
-f0104bee:	c3                   	ret    
+f0104e35:	5d                   	pop    %ebp
+f0104e36:	c3                   	ret    
 
-f0104bef <strncmp>:
+f0104e37 <strncmp>:
 
 int
 strncmp(const char *p, const char *q, size_t n)
 {
-f0104bef:	55                   	push   %ebp
-f0104bf0:	89 e5                	mov    %esp,%ebp
-f0104bf2:	53                   	push   %ebx
-f0104bf3:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104bf6:	8b 55 0c             	mov    0xc(%ebp),%edx
-f0104bf9:	89 c3                	mov    %eax,%ebx
-f0104bfb:	03 5d 10             	add    0x10(%ebp),%ebx
+f0104e37:	55                   	push   %ebp
+f0104e38:	89 e5                	mov    %esp,%ebp
+f0104e3a:	53                   	push   %ebx
+f0104e3b:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104e3e:	8b 55 0c             	mov    0xc(%ebp),%edx
+f0104e41:	89 c3                	mov    %eax,%ebx
+f0104e43:	03 5d 10             	add    0x10(%ebp),%ebx
 	while (n > 0 && *p && *p == *q)
-f0104bfe:	eb 02                	jmp    f0104c02 <strncmp+0x13>
+f0104e46:	eb 02                	jmp    f0104e4a <strncmp+0x13>
 		n--, p++, q++;
-f0104c00:	40                   	inc    %eax
-f0104c01:	42                   	inc    %edx
+f0104e48:	40                   	inc    %eax
+f0104e49:	42                   	inc    %edx
 }
 
 int
 strncmp(const char *p, const char *q, size_t n)
 {
 	while (n > 0 && *p && *p == *q)
-f0104c02:	39 d8                	cmp    %ebx,%eax
-f0104c04:	74 20                	je     f0104c26 <strncmp+0x37>
-f0104c06:	8a 08                	mov    (%eax),%cl
-f0104c08:	84 c9                	test   %cl,%cl
-f0104c0a:	74 04                	je     f0104c10 <strncmp+0x21>
-f0104c0c:	3a 0a                	cmp    (%edx),%cl
-f0104c0e:	74 f0                	je     f0104c00 <strncmp+0x11>
+f0104e4a:	39 d8                	cmp    %ebx,%eax
+f0104e4c:	74 20                	je     f0104e6e <strncmp+0x37>
+f0104e4e:	8a 08                	mov    (%eax),%cl
+f0104e50:	84 c9                	test   %cl,%cl
+f0104e52:	74 04                	je     f0104e58 <strncmp+0x21>
+f0104e54:	3a 0a                	cmp    (%edx),%cl
+f0104e56:	74 f0                	je     f0104e48 <strncmp+0x11>
 		n--, p++, q++;
 	if (n == 0)
 		return 0;
 	else
 		return (int) ((unsigned char) *p - (unsigned char) *q);
-f0104c10:	8a 18                	mov    (%eax),%bl
-f0104c12:	81 e3 ff 00 00 00    	and    $0xff,%ebx
-f0104c18:	89 d8                	mov    %ebx,%eax
-f0104c1a:	8a 1a                	mov    (%edx),%bl
-f0104c1c:	81 e3 ff 00 00 00    	and    $0xff,%ebx
-f0104c22:	29 d8                	sub    %ebx,%eax
-f0104c24:	eb 05                	jmp    f0104c2b <strncmp+0x3c>
+f0104e58:	8a 18                	mov    (%eax),%bl
+f0104e5a:	81 e3 ff 00 00 00    	and    $0xff,%ebx
+f0104e60:	89 d8                	mov    %ebx,%eax
+f0104e62:	8a 1a                	mov    (%edx),%bl
+f0104e64:	81 e3 ff 00 00 00    	and    $0xff,%ebx
+f0104e6a:	29 d8                	sub    %ebx,%eax
+f0104e6c:	eb 05                	jmp    f0104e73 <strncmp+0x3c>
 strncmp(const char *p, const char *q, size_t n)
 {
 	while (n > 0 && *p && *p == *q)
 		n--, p++, q++;
 	if (n == 0)
 		return 0;
-f0104c26:	b8 00 00 00 00       	mov    $0x0,%eax
+f0104e6e:	b8 00 00 00 00       	mov    $0x0,%eax
 	else
 		return (int) ((unsigned char) *p - (unsigned char) *q);
 }
-f0104c2b:	5b                   	pop    %ebx
-f0104c2c:	5d                   	pop    %ebp
-f0104c2d:	c3                   	ret    
+f0104e73:	5b                   	pop    %ebx
+f0104e74:	5d                   	pop    %ebp
+f0104e75:	c3                   	ret    
 
-f0104c2e <strchr>:
+f0104e76 <strchr>:
 
 // Return a pointer to the first occurrence of 'c' in 's',
 // or a null pointer if the string has no 'c'.
 char *
 strchr(const char *s, char c)
 {
-f0104c2e:	55                   	push   %ebp
-f0104c2f:	89 e5                	mov    %esp,%ebp
-f0104c31:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104c34:	8a 4d 0c             	mov    0xc(%ebp),%cl
+f0104e76:	55                   	push   %ebp
+f0104e77:	89 e5                	mov    %esp,%ebp
+f0104e79:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104e7c:	8a 4d 0c             	mov    0xc(%ebp),%cl
 	for (; *s; s++)
-f0104c37:	eb 05                	jmp    f0104c3e <strchr+0x10>
+f0104e7f:	eb 05                	jmp    f0104e86 <strchr+0x10>
 		if (*s == c)
-f0104c39:	38 ca                	cmp    %cl,%dl
-f0104c3b:	74 0c                	je     f0104c49 <strchr+0x1b>
+f0104e81:	38 ca                	cmp    %cl,%dl
+f0104e83:	74 0c                	je     f0104e91 <strchr+0x1b>
 // Return a pointer to the first occurrence of 'c' in 's',
 // or a null pointer if the string has no 'c'.
 char *
 strchr(const char *s, char c)
 {
 	for (; *s; s++)
-f0104c3d:	40                   	inc    %eax
-f0104c3e:	8a 10                	mov    (%eax),%dl
-f0104c40:	84 d2                	test   %dl,%dl
-f0104c42:	75 f5                	jne    f0104c39 <strchr+0xb>
+f0104e85:	40                   	inc    %eax
+f0104e86:	8a 10                	mov    (%eax),%dl
+f0104e88:	84 d2                	test   %dl,%dl
+f0104e8a:	75 f5                	jne    f0104e81 <strchr+0xb>
 		if (*s == c)
 			return (char *) s;
 	return 0;
-f0104c44:	b8 00 00 00 00       	mov    $0x0,%eax
+f0104e8c:	b8 00 00 00 00       	mov    $0x0,%eax
 }
-f0104c49:	5d                   	pop    %ebp
-f0104c4a:	c3                   	ret    
+f0104e91:	5d                   	pop    %ebp
+f0104e92:	c3                   	ret    
 
-f0104c4b <strfind>:
+f0104e93 <strfind>:
 
 // Return a pointer to the first occurrence of 'c' in 's',
 // or a pointer to the string-ending null character if the string has no 'c'.
 char *
 strfind(const char *s, char c)
 {
-f0104c4b:	55                   	push   %ebp
-f0104c4c:	89 e5                	mov    %esp,%ebp
-f0104c4e:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104c51:	8a 4d 0c             	mov    0xc(%ebp),%cl
+f0104e93:	55                   	push   %ebp
+f0104e94:	89 e5                	mov    %esp,%ebp
+f0104e96:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104e99:	8a 4d 0c             	mov    0xc(%ebp),%cl
 	for (; *s; s++)
-f0104c54:	eb 05                	jmp    f0104c5b <strfind+0x10>
+f0104e9c:	eb 05                	jmp    f0104ea3 <strfind+0x10>
 		if (*s == c)
-f0104c56:	38 ca                	cmp    %cl,%dl
-f0104c58:	74 07                	je     f0104c61 <strfind+0x16>
+f0104e9e:	38 ca                	cmp    %cl,%dl
+f0104ea0:	74 07                	je     f0104ea9 <strfind+0x16>
 // Return a pointer to the first occurrence of 'c' in 's',
 // or a pointer to the string-ending null character if the string has no 'c'.
 char *
 strfind(const char *s, char c)
 {
 	for (; *s; s++)
-f0104c5a:	40                   	inc    %eax
-f0104c5b:	8a 10                	mov    (%eax),%dl
-f0104c5d:	84 d2                	test   %dl,%dl
-f0104c5f:	75 f5                	jne    f0104c56 <strfind+0xb>
+f0104ea2:	40                   	inc    %eax
+f0104ea3:	8a 10                	mov    (%eax),%dl
+f0104ea5:	84 d2                	test   %dl,%dl
+f0104ea7:	75 f5                	jne    f0104e9e <strfind+0xb>
 		if (*s == c)
 			break;
 	return (char *) s;
 }
-f0104c61:	5d                   	pop    %ebp
-f0104c62:	c3                   	ret    
+f0104ea9:	5d                   	pop    %ebp
+f0104eaa:	c3                   	ret    
 
-f0104c63 <memset>:
+f0104eab <memset>:
 
 #if ASM
 void *
 memset(void *v, int c, size_t n)
 {
-f0104c63:	55                   	push   %ebp
-f0104c64:	89 e5                	mov    %esp,%ebp
-f0104c66:	57                   	push   %edi
-f0104c67:	56                   	push   %esi
-f0104c68:	53                   	push   %ebx
-f0104c69:	8b 7d 08             	mov    0x8(%ebp),%edi
-f0104c6c:	8b 4d 10             	mov    0x10(%ebp),%ecx
+f0104eab:	55                   	push   %ebp
+f0104eac:	89 e5                	mov    %esp,%ebp
+f0104eae:	57                   	push   %edi
+f0104eaf:	56                   	push   %esi
+f0104eb0:	53                   	push   %ebx
+f0104eb1:	8b 7d 08             	mov    0x8(%ebp),%edi
+f0104eb4:	8b 4d 10             	mov    0x10(%ebp),%ecx
 	char *p;
 
 	if (n == 0)
-f0104c6f:	85 c9                	test   %ecx,%ecx
-f0104c71:	74 37                	je     f0104caa <memset+0x47>
+f0104eb7:	85 c9                	test   %ecx,%ecx
+f0104eb9:	74 37                	je     f0104ef2 <memset+0x47>
 		return v;
 	if ((int)v%4 == 0 && n%4 == 0) {
-f0104c73:	f7 c7 03 00 00 00    	test   $0x3,%edi
-f0104c79:	75 29                	jne    f0104ca4 <memset+0x41>
-f0104c7b:	f6 c1 03             	test   $0x3,%cl
-f0104c7e:	75 24                	jne    f0104ca4 <memset+0x41>
+f0104ebb:	f7 c7 03 00 00 00    	test   $0x3,%edi
+f0104ec1:	75 29                	jne    f0104eec <memset+0x41>
+f0104ec3:	f6 c1 03             	test   $0x3,%cl
+f0104ec6:	75 24                	jne    f0104eec <memset+0x41>
 		c &= 0xFF;
-f0104c80:	31 d2                	xor    %edx,%edx
-f0104c82:	8a 55 0c             	mov    0xc(%ebp),%dl
+f0104ec8:	31 d2                	xor    %edx,%edx
+f0104eca:	8a 55 0c             	mov    0xc(%ebp),%dl
 		c = (c<<24)|(c<<16)|(c<<8)|c;
-f0104c85:	89 d3                	mov    %edx,%ebx
-f0104c87:	c1 e3 08             	shl    $0x8,%ebx
-f0104c8a:	89 d6                	mov    %edx,%esi
-f0104c8c:	c1 e6 18             	shl    $0x18,%esi
-f0104c8f:	89 d0                	mov    %edx,%eax
-f0104c91:	c1 e0 10             	shl    $0x10,%eax
-f0104c94:	09 f0                	or     %esi,%eax
-f0104c96:	09 c2                	or     %eax,%edx
-f0104c98:	89 d0                	mov    %edx,%eax
-f0104c9a:	09 d8                	or     %ebx,%eax
+f0104ecd:	89 d3                	mov    %edx,%ebx
+f0104ecf:	c1 e3 08             	shl    $0x8,%ebx
+f0104ed2:	89 d6                	mov    %edx,%esi
+f0104ed4:	c1 e6 18             	shl    $0x18,%esi
+f0104ed7:	89 d0                	mov    %edx,%eax
+f0104ed9:	c1 e0 10             	shl    $0x10,%eax
+f0104edc:	09 f0                	or     %esi,%eax
+f0104ede:	09 c2                	or     %eax,%edx
+f0104ee0:	89 d0                	mov    %edx,%eax
+f0104ee2:	09 d8                	or     %ebx,%eax
 		asm volatile("cld; rep stosl\n"
 			:: "D" (v), "a" (c), "c" (n/4)
-f0104c9c:	c1 e9 02             	shr    $0x2,%ecx
+f0104ee4:	c1 e9 02             	shr    $0x2,%ecx
 	if (n == 0)
 		return v;
 	if ((int)v%4 == 0 && n%4 == 0) {
 		c &= 0xFF;
 		c = (c<<24)|(c<<16)|(c<<8)|c;
 		asm volatile("cld; rep stosl\n"
-f0104c9f:	fc                   	cld    
-f0104ca0:	f3 ab                	rep stos %eax,%es:(%edi)
-f0104ca2:	eb 06                	jmp    f0104caa <memset+0x47>
+f0104ee7:	fc                   	cld    
+f0104ee8:	f3 ab                	rep stos %eax,%es:(%edi)
+f0104eea:	eb 06                	jmp    f0104ef2 <memset+0x47>
 			:: "D" (v), "a" (c), "c" (n/4)
 			: "cc", "memory");
 	} else
 		asm volatile("cld; rep stosb\n"
-f0104ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
-f0104ca7:	fc                   	cld    
-f0104ca8:	f3 aa                	rep stos %al,%es:(%edi)
+f0104eec:	8b 45 0c             	mov    0xc(%ebp),%eax
+f0104eef:	fc                   	cld    
+f0104ef0:	f3 aa                	rep stos %al,%es:(%edi)
 			:: "D" (v), "a" (c), "c" (n)
 			: "cc", "memory");
 	return v;
 }
-f0104caa:	89 f8                	mov    %edi,%eax
-f0104cac:	5b                   	pop    %ebx
-f0104cad:	5e                   	pop    %esi
-f0104cae:	5f                   	pop    %edi
-f0104caf:	5d                   	pop    %ebp
-f0104cb0:	c3                   	ret    
+f0104ef2:	89 f8                	mov    %edi,%eax
+f0104ef4:	5b                   	pop    %ebx
+f0104ef5:	5e                   	pop    %esi
+f0104ef6:	5f                   	pop    %edi
+f0104ef7:	5d                   	pop    %ebp
+f0104ef8:	c3                   	ret    
 
-f0104cb1 <memmove>:
+f0104ef9 <memmove>:
 
 void *
 memmove(void *dst, const void *src, size_t n)
 {
-f0104cb1:	55                   	push   %ebp
-f0104cb2:	89 e5                	mov    %esp,%ebp
-f0104cb4:	57                   	push   %edi
-f0104cb5:	56                   	push   %esi
-f0104cb6:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104cb9:	8b 75 0c             	mov    0xc(%ebp),%esi
-f0104cbc:	8b 4d 10             	mov    0x10(%ebp),%ecx
+f0104ef9:	55                   	push   %ebp
+f0104efa:	89 e5                	mov    %esp,%ebp
+f0104efc:	57                   	push   %edi
+f0104efd:	56                   	push   %esi
+f0104efe:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104f01:	8b 75 0c             	mov    0xc(%ebp),%esi
+f0104f04:	8b 4d 10             	mov    0x10(%ebp),%ecx
 	const char *s;
 	char *d;
 
 	s = src;
 	d = dst;
 	if (s < d && s + n > d) {
-f0104cbf:	39 c6                	cmp    %eax,%esi
-f0104cc1:	73 33                	jae    f0104cf6 <memmove+0x45>
-f0104cc3:	8d 14 0e             	lea    (%esi,%ecx,1),%edx
-f0104cc6:	39 d0                	cmp    %edx,%eax
-f0104cc8:	73 2c                	jae    f0104cf6 <memmove+0x45>
+f0104f07:	39 c6                	cmp    %eax,%esi
+f0104f09:	73 33                	jae    f0104f3e <memmove+0x45>
+f0104f0b:	8d 14 0e             	lea    (%esi,%ecx,1),%edx
+f0104f0e:	39 d0                	cmp    %edx,%eax
+f0104f10:	73 2c                	jae    f0104f3e <memmove+0x45>
 		s += n;
 		d += n;
-f0104cca:	8d 3c 08             	lea    (%eax,%ecx,1),%edi
-f0104ccd:	89 d6                	mov    %edx,%esi
-f0104ccf:	09 fe                	or     %edi,%esi
+f0104f12:	8d 3c 08             	lea    (%eax,%ecx,1),%edi
+f0104f15:	89 d6                	mov    %edx,%esi
+f0104f17:	09 fe                	or     %edi,%esi
 		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
-f0104cd1:	f7 c6 03 00 00 00    	test   $0x3,%esi
-f0104cd7:	75 13                	jne    f0104cec <memmove+0x3b>
-f0104cd9:	f6 c1 03             	test   $0x3,%cl
-f0104cdc:	75 0e                	jne    f0104cec <memmove+0x3b>
+f0104f19:	f7 c6 03 00 00 00    	test   $0x3,%esi
+f0104f1f:	75 13                	jne    f0104f34 <memmove+0x3b>
+f0104f21:	f6 c1 03             	test   $0x3,%cl
+f0104f24:	75 0e                	jne    f0104f34 <memmove+0x3b>
 			asm volatile("std; rep movsl\n"
 				:: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
-f0104cde:	83 ef 04             	sub    $0x4,%edi
-f0104ce1:	8d 72 fc             	lea    -0x4(%edx),%esi
-f0104ce4:	c1 e9 02             	shr    $0x2,%ecx
+f0104f26:	83 ef 04             	sub    $0x4,%edi
+f0104f29:	8d 72 fc             	lea    -0x4(%edx),%esi
+f0104f2c:	c1 e9 02             	shr    $0x2,%ecx
 	d = dst;
 	if (s < d && s + n > d) {
 		s += n;
 		d += n;
 		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
 			asm volatile("std; rep movsl\n"
-f0104ce7:	fd                   	std    
-f0104ce8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
-f0104cea:	eb 07                	jmp    f0104cf3 <memmove+0x42>
+f0104f2f:	fd                   	std    
+f0104f30:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+f0104f32:	eb 07                	jmp    f0104f3b <memmove+0x42>
 				:: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
 		else
 			asm volatile("std; rep movsb\n"
 				:: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
-f0104cec:	4f                   	dec    %edi
-f0104ced:	8d 72 ff             	lea    -0x1(%edx),%esi
+f0104f34:	4f                   	dec    %edi
+f0104f35:	8d 72 ff             	lea    -0x1(%edx),%esi
 		d += n;
 		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
 			asm volatile("std; rep movsl\n"
 				:: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
 		else
 			asm volatile("std; rep movsb\n"
-f0104cf0:	fd                   	std    
-f0104cf1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+f0104f38:	fd                   	std    
+f0104f39:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
 				:: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
 		// Some versions of GCC rely on DF being clear
 		asm volatile("cld" ::: "cc");
-f0104cf3:	fc                   	cld    
-f0104cf4:	eb 1d                	jmp    f0104d13 <memmove+0x62>
-f0104cf6:	89 f2                	mov    %esi,%edx
-f0104cf8:	09 c2                	or     %eax,%edx
+f0104f3b:	fc                   	cld    
+f0104f3c:	eb 1d                	jmp    f0104f5b <memmove+0x62>
+f0104f3e:	89 f2                	mov    %esi,%edx
+f0104f40:	09 c2                	or     %eax,%edx
 	} else {
 		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
-f0104cfa:	f6 c2 03             	test   $0x3,%dl
-f0104cfd:	75 0f                	jne    f0104d0e <memmove+0x5d>
-f0104cff:	f6 c1 03             	test   $0x3,%cl
-f0104d02:	75 0a                	jne    f0104d0e <memmove+0x5d>
+f0104f42:	f6 c2 03             	test   $0x3,%dl
+f0104f45:	75 0f                	jne    f0104f56 <memmove+0x5d>
+f0104f47:	f6 c1 03             	test   $0x3,%cl
+f0104f4a:	75 0a                	jne    f0104f56 <memmove+0x5d>
 			asm volatile("cld; rep movsl\n"
 				:: "D" (d), "S" (s), "c" (n/4) : "cc", "memory");
-f0104d04:	c1 e9 02             	shr    $0x2,%ecx
+f0104f4c:	c1 e9 02             	shr    $0x2,%ecx
 				:: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
 		// Some versions of GCC rely on DF being clear
 		asm volatile("cld" ::: "cc");
 	} else {
 		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
 			asm volatile("cld; rep movsl\n"
-f0104d07:	89 c7                	mov    %eax,%edi
-f0104d09:	fc                   	cld    
-f0104d0a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
-f0104d0c:	eb 05                	jmp    f0104d13 <memmove+0x62>
+f0104f4f:	89 c7                	mov    %eax,%edi
+f0104f51:	fc                   	cld    
+f0104f52:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+f0104f54:	eb 05                	jmp    f0104f5b <memmove+0x62>
 				:: "D" (d), "S" (s), "c" (n/4) : "cc", "memory");
 		else
 			asm volatile("cld; rep movsb\n"
-f0104d0e:	89 c7                	mov    %eax,%edi
-f0104d10:	fc                   	cld    
-f0104d11:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+f0104f56:	89 c7                	mov    %eax,%edi
+f0104f58:	fc                   	cld    
+f0104f59:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
 				:: "D" (d), "S" (s), "c" (n) : "cc", "memory");
 	}
 	return dst;
 }
-f0104d13:	5e                   	pop    %esi
-f0104d14:	5f                   	pop    %edi
-f0104d15:	5d                   	pop    %ebp
-f0104d16:	c3                   	ret    
+f0104f5b:	5e                   	pop    %esi
+f0104f5c:	5f                   	pop    %edi
+f0104f5d:	5d                   	pop    %ebp
+f0104f5e:	c3                   	ret    
 
-f0104d17 <memcpy>:
+f0104f5f <memcpy>:
 }
 #endif
 
 void *
 memcpy(void *dst, const void *src, size_t n)
 {
-f0104d17:	55                   	push   %ebp
-f0104d18:	89 e5                	mov    %esp,%ebp
-f0104d1a:	83 ec 0c             	sub    $0xc,%esp
+f0104f5f:	55                   	push   %ebp
+f0104f60:	89 e5                	mov    %esp,%ebp
+f0104f62:	83 ec 0c             	sub    $0xc,%esp
 	return memmove(dst, src, n);
-f0104d1d:	8b 45 10             	mov    0x10(%ebp),%eax
-f0104d20:	89 44 24 08          	mov    %eax,0x8(%esp)
-f0104d24:	8b 45 0c             	mov    0xc(%ebp),%eax
-f0104d27:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0104d2b:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104d2e:	89 04 24             	mov    %eax,(%esp)
-f0104d31:	e8 7b ff ff ff       	call   f0104cb1 <memmove>
+f0104f65:	8b 45 10             	mov    0x10(%ebp),%eax
+f0104f68:	89 44 24 08          	mov    %eax,0x8(%esp)
+f0104f6c:	8b 45 0c             	mov    0xc(%ebp),%eax
+f0104f6f:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0104f73:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104f76:	89 04 24             	mov    %eax,(%esp)
+f0104f79:	e8 7b ff ff ff       	call   f0104ef9 <memmove>
 }
-f0104d36:	c9                   	leave  
-f0104d37:	c3                   	ret    
+f0104f7e:	c9                   	leave  
+f0104f7f:	c3                   	ret    
 
-f0104d38 <memcmp>:
+f0104f80 <memcmp>:
 
 int
 memcmp(const void *v1, const void *v2, size_t n)
 {
-f0104d38:	55                   	push   %ebp
-f0104d39:	89 e5                	mov    %esp,%ebp
-f0104d3b:	56                   	push   %esi
-f0104d3c:	53                   	push   %ebx
-f0104d3d:	8b 55 08             	mov    0x8(%ebp),%edx
-f0104d40:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-f0104d43:	89 d6                	mov    %edx,%esi
-f0104d45:	03 75 10             	add    0x10(%ebp),%esi
+f0104f80:	55                   	push   %ebp
+f0104f81:	89 e5                	mov    %esp,%ebp
+f0104f83:	56                   	push   %esi
+f0104f84:	53                   	push   %ebx
+f0104f85:	8b 55 08             	mov    0x8(%ebp),%edx
+f0104f88:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+f0104f8b:	89 d6                	mov    %edx,%esi
+f0104f8d:	03 75 10             	add    0x10(%ebp),%esi
 	const uint8_t *s1 = (const uint8_t *) v1;
 	const uint8_t *s2 = (const uint8_t *) v2;
 
 	while (n-- > 0) {
-f0104d48:	eb 19                	jmp    f0104d63 <memcmp+0x2b>
+f0104f90:	eb 19                	jmp    f0104fab <memcmp+0x2b>
 		if (*s1 != *s2)
-f0104d4a:	8a 02                	mov    (%edx),%al
-f0104d4c:	8a 19                	mov    (%ecx),%bl
-f0104d4e:	38 d8                	cmp    %bl,%al
-f0104d50:	74 0f                	je     f0104d61 <memcmp+0x29>
+f0104f92:	8a 02                	mov    (%edx),%al
+f0104f94:	8a 19                	mov    (%ecx),%bl
+f0104f96:	38 d8                	cmp    %bl,%al
+f0104f98:	74 0f                	je     f0104fa9 <memcmp+0x29>
 			return (int) *s1 - (int) *s2;
-f0104d52:	25 ff 00 00 00       	and    $0xff,%eax
-f0104d57:	81 e3 ff 00 00 00    	and    $0xff,%ebx
-f0104d5d:	29 d8                	sub    %ebx,%eax
-f0104d5f:	eb 0b                	jmp    f0104d6c <memcmp+0x34>
+f0104f9a:	25 ff 00 00 00       	and    $0xff,%eax
+f0104f9f:	81 e3 ff 00 00 00    	and    $0xff,%ebx
+f0104fa5:	29 d8                	sub    %ebx,%eax
+f0104fa7:	eb 0b                	jmp    f0104fb4 <memcmp+0x34>
 		s1++, s2++;
-f0104d61:	42                   	inc    %edx
-f0104d62:	41                   	inc    %ecx
+f0104fa9:	42                   	inc    %edx
+f0104faa:	41                   	inc    %ecx
 memcmp(const void *v1, const void *v2, size_t n)
 {
 	const uint8_t *s1 = (const uint8_t *) v1;
 	const uint8_t *s2 = (const uint8_t *) v2;
 
 	while (n-- > 0) {
-f0104d63:	39 f2                	cmp    %esi,%edx
-f0104d65:	75 e3                	jne    f0104d4a <memcmp+0x12>
+f0104fab:	39 f2                	cmp    %esi,%edx
+f0104fad:	75 e3                	jne    f0104f92 <memcmp+0x12>
 		if (*s1 != *s2)
 			return (int) *s1 - (int) *s2;
 		s1++, s2++;
 	}
 
 	return 0;
-f0104d67:	b8 00 00 00 00       	mov    $0x0,%eax
+f0104faf:	b8 00 00 00 00       	mov    $0x0,%eax
 }
-f0104d6c:	5b                   	pop    %ebx
-f0104d6d:	5e                   	pop    %esi
-f0104d6e:	5d                   	pop    %ebp
-f0104d6f:	c3                   	ret    
+f0104fb4:	5b                   	pop    %ebx
+f0104fb5:	5e                   	pop    %esi
+f0104fb6:	5d                   	pop    %ebp
+f0104fb7:	c3                   	ret    
 
-f0104d70 <memfind>:
+f0104fb8 <memfind>:
 
 void *
 memfind(const void *s, int c, size_t n)
 {
-f0104d70:	55                   	push   %ebp
-f0104d71:	89 e5                	mov    %esp,%ebp
-f0104d73:	8b 45 08             	mov    0x8(%ebp),%eax
-f0104d76:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+f0104fb8:	55                   	push   %ebp
+f0104fb9:	89 e5                	mov    %esp,%ebp
+f0104fbb:	8b 45 08             	mov    0x8(%ebp),%eax
+f0104fbe:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 	const void *ends = (const char *) s + n;
-f0104d79:	89 c2                	mov    %eax,%edx
-f0104d7b:	03 55 10             	add    0x10(%ebp),%edx
+f0104fc1:	89 c2                	mov    %eax,%edx
+f0104fc3:	03 55 10             	add    0x10(%ebp),%edx
 	for (; s < ends; s++)
-f0104d7e:	eb 05                	jmp    f0104d85 <memfind+0x15>
+f0104fc6:	eb 05                	jmp    f0104fcd <memfind+0x15>
 		if (*(const unsigned char *) s == (unsigned char) c)
-f0104d80:	38 08                	cmp    %cl,(%eax)
-f0104d82:	74 05                	je     f0104d89 <memfind+0x19>
+f0104fc8:	38 08                	cmp    %cl,(%eax)
+f0104fca:	74 05                	je     f0104fd1 <memfind+0x19>
 
 void *
 memfind(const void *s, int c, size_t n)
 {
 	const void *ends = (const char *) s + n;
 	for (; s < ends; s++)
-f0104d84:	40                   	inc    %eax
-f0104d85:	39 d0                	cmp    %edx,%eax
-f0104d87:	72 f7                	jb     f0104d80 <memfind+0x10>
+f0104fcc:	40                   	inc    %eax
+f0104fcd:	39 d0                	cmp    %edx,%eax
+f0104fcf:	72 f7                	jb     f0104fc8 <memfind+0x10>
 		if (*(const unsigned char *) s == (unsigned char) c)
 			break;
 	return (void *) s;
 }
-f0104d89:	5d                   	pop    %ebp
-f0104d8a:	c3                   	ret    
+f0104fd1:	5d                   	pop    %ebp
+f0104fd2:	c3                   	ret    
 
-f0104d8b <strtol>:
+f0104fd3 <strtol>:
 
 long
 strtol(const char *s, char **endptr, int base)
 {
-f0104d8b:	55                   	push   %ebp
-f0104d8c:	89 e5                	mov    %esp,%ebp
-f0104d8e:	57                   	push   %edi
-f0104d8f:	56                   	push   %esi
-f0104d90:	53                   	push   %ebx
-f0104d91:	8b 55 08             	mov    0x8(%ebp),%edx
-f0104d94:	8b 5d 10             	mov    0x10(%ebp),%ebx
+f0104fd3:	55                   	push   %ebp
+f0104fd4:	89 e5                	mov    %esp,%ebp
+f0104fd6:	57                   	push   %edi
+f0104fd7:	56                   	push   %esi
+f0104fd8:	53                   	push   %ebx
+f0104fd9:	8b 55 08             	mov    0x8(%ebp),%edx
+f0104fdc:	8b 5d 10             	mov    0x10(%ebp),%ebx
 	int neg = 0;
 	long val = 0;
 
 	// gobble initial whitespace
 	while (*s == ' ' || *s == '\t')
-f0104d97:	eb 01                	jmp    f0104d9a <strtol+0xf>
+f0104fdf:	eb 01                	jmp    f0104fe2 <strtol+0xf>
 		s++;
-f0104d99:	42                   	inc    %edx
+f0104fe1:	42                   	inc    %edx
 {
 	int neg = 0;
 	long val = 0;
 
 	// gobble initial whitespace
 	while (*s == ' ' || *s == '\t')
-f0104d9a:	8a 02                	mov    (%edx),%al
-f0104d9c:	3c 09                	cmp    $0x9,%al
-f0104d9e:	74 f9                	je     f0104d99 <strtol+0xe>
-f0104da0:	3c 20                	cmp    $0x20,%al
-f0104da2:	74 f5                	je     f0104d99 <strtol+0xe>
+f0104fe2:	8a 02                	mov    (%edx),%al
+f0104fe4:	3c 09                	cmp    $0x9,%al
+f0104fe6:	74 f9                	je     f0104fe1 <strtol+0xe>
+f0104fe8:	3c 20                	cmp    $0x20,%al
+f0104fea:	74 f5                	je     f0104fe1 <strtol+0xe>
 		s++;
 
 	// plus/minus sign
 	if (*s == '+')
-f0104da4:	3c 2b                	cmp    $0x2b,%al
-f0104da6:	75 08                	jne    f0104db0 <strtol+0x25>
+f0104fec:	3c 2b                	cmp    $0x2b,%al
+f0104fee:	75 08                	jne    f0104ff8 <strtol+0x25>
 		s++;
-f0104da8:	42                   	inc    %edx
+f0104ff0:	42                   	inc    %edx
 }
 
 long
 strtol(const char *s, char **endptr, int base)
 {
 	int neg = 0;
-f0104da9:	bf 00 00 00 00       	mov    $0x0,%edi
-f0104dae:	eb 10                	jmp    f0104dc0 <strtol+0x35>
-f0104db0:	bf 00 00 00 00       	mov    $0x0,%edi
+f0104ff1:	bf 00 00 00 00       	mov    $0x0,%edi
+f0104ff6:	eb 10                	jmp    f0105008 <strtol+0x35>
+f0104ff8:	bf 00 00 00 00       	mov    $0x0,%edi
 		s++;
 
 	// plus/minus sign
 	if (*s == '+')
 		s++;
 	else if (*s == '-')
-f0104db5:	3c 2d                	cmp    $0x2d,%al
-f0104db7:	75 07                	jne    f0104dc0 <strtol+0x35>
+f0104ffd:	3c 2d                	cmp    $0x2d,%al
+f0104fff:	75 07                	jne    f0105008 <strtol+0x35>
 		s++, neg = 1;
-f0104db9:	8d 52 01             	lea    0x1(%edx),%edx
-f0104dbc:	66 bf 01 00          	mov    $0x1,%di
+f0105001:	8d 52 01             	lea    0x1(%edx),%edx
+f0105004:	66 bf 01 00          	mov    $0x1,%di
 
 	// hex or octal base prefix
 	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
-f0104dc0:	f7 c3 ef ff ff ff    	test   $0xffffffef,%ebx
-f0104dc6:	75 15                	jne    f0104ddd <strtol+0x52>
-f0104dc8:	80 3a 30             	cmpb   $0x30,(%edx)
-f0104dcb:	75 10                	jne    f0104ddd <strtol+0x52>
-f0104dcd:	80 7a 01 78          	cmpb   $0x78,0x1(%edx)
-f0104dd1:	75 0a                	jne    f0104ddd <strtol+0x52>
+f0105008:	f7 c3 ef ff ff ff    	test   $0xffffffef,%ebx
+f010500e:	75 15                	jne    f0105025 <strtol+0x52>
+f0105010:	80 3a 30             	cmpb   $0x30,(%edx)
+f0105013:	75 10                	jne    f0105025 <strtol+0x52>
+f0105015:	80 7a 01 78          	cmpb   $0x78,0x1(%edx)
+f0105019:	75 0a                	jne    f0105025 <strtol+0x52>
 		s += 2, base = 16;
-f0104dd3:	83 c2 02             	add    $0x2,%edx
-f0104dd6:	bb 10 00 00 00       	mov    $0x10,%ebx
-f0104ddb:	eb 0e                	jmp    f0104deb <strtol+0x60>
+f010501b:	83 c2 02             	add    $0x2,%edx
+f010501e:	bb 10 00 00 00       	mov    $0x10,%ebx
+f0105023:	eb 0e                	jmp    f0105033 <strtol+0x60>
 	else if (base == 0 && s[0] == '0')
-f0104ddd:	85 db                	test   %ebx,%ebx
-f0104ddf:	75 0a                	jne    f0104deb <strtol+0x60>
+f0105025:	85 db                	test   %ebx,%ebx
+f0105027:	75 0a                	jne    f0105033 <strtol+0x60>
 		s++, base = 8;
 	else if (base == 0)
 		base = 10;
-f0104de1:	b3 0a                	mov    $0xa,%bl
+f0105029:	b3 0a                	mov    $0xa,%bl
 		s++, neg = 1;
 
 	// hex or octal base prefix
 	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
 		s += 2, base = 16;
 	else if (base == 0 && s[0] == '0')
-f0104de3:	80 3a 30             	cmpb   $0x30,(%edx)
-f0104de6:	75 03                	jne    f0104deb <strtol+0x60>
+f010502b:	80 3a 30             	cmpb   $0x30,(%edx)
+f010502e:	75 03                	jne    f0105033 <strtol+0x60>
 		s++, base = 8;
-f0104de8:	42                   	inc    %edx
-f0104de9:	b3 08                	mov    $0x8,%bl
+f0105030:	42                   	inc    %edx
+f0105031:	b3 08                	mov    $0x8,%bl
 	else if (base == 0)
 		base = 10;
-f0104deb:	b8 00 00 00 00       	mov    $0x0,%eax
-f0104df0:	89 5d 10             	mov    %ebx,0x10(%ebp)
+f0105033:	b8 00 00 00 00       	mov    $0x0,%eax
+f0105038:	89 5d 10             	mov    %ebx,0x10(%ebp)
 
 	// digits
 	while (1) {
 		int dig;
 
 		if (*s >= '0' && *s <= '9')
-f0104df3:	8a 0a                	mov    (%edx),%cl
-f0104df5:	8d 71 d0             	lea    -0x30(%ecx),%esi
-f0104df8:	89 f3                	mov    %esi,%ebx
-f0104dfa:	80 fb 09             	cmp    $0x9,%bl
-f0104dfd:	77 08                	ja     f0104e07 <strtol+0x7c>
+f010503b:	8a 0a                	mov    (%edx),%cl
+f010503d:	8d 71 d0             	lea    -0x30(%ecx),%esi
+f0105040:	89 f3                	mov    %esi,%ebx
+f0105042:	80 fb 09             	cmp    $0x9,%bl
+f0105045:	77 08                	ja     f010504f <strtol+0x7c>
 			dig = *s - '0';
-f0104dff:	0f be c9             	movsbl %cl,%ecx
-f0104e02:	83 e9 30             	sub    $0x30,%ecx
-f0104e05:	eb 22                	jmp    f0104e29 <strtol+0x9e>
+f0105047:	0f be c9             	movsbl %cl,%ecx
+f010504a:	83 e9 30             	sub    $0x30,%ecx
+f010504d:	eb 22                	jmp    f0105071 <strtol+0x9e>
 		else if (*s >= 'a' && *s <= 'z')
-f0104e07:	8d 71 9f             	lea    -0x61(%ecx),%esi
-f0104e0a:	89 f3                	mov    %esi,%ebx
-f0104e0c:	80 fb 19             	cmp    $0x19,%bl
-f0104e0f:	77 08                	ja     f0104e19 <strtol+0x8e>
+f010504f:	8d 71 9f             	lea    -0x61(%ecx),%esi
+f0105052:	89 f3                	mov    %esi,%ebx
+f0105054:	80 fb 19             	cmp    $0x19,%bl
+f0105057:	77 08                	ja     f0105061 <strtol+0x8e>
 			dig = *s - 'a' + 10;
-f0104e11:	0f be c9             	movsbl %cl,%ecx
-f0104e14:	83 e9 57             	sub    $0x57,%ecx
-f0104e17:	eb 10                	jmp    f0104e29 <strtol+0x9e>
+f0105059:	0f be c9             	movsbl %cl,%ecx
+f010505c:	83 e9 57             	sub    $0x57,%ecx
+f010505f:	eb 10                	jmp    f0105071 <strtol+0x9e>
 		else if (*s >= 'A' && *s <= 'Z')
-f0104e19:	8d 71 bf             	lea    -0x41(%ecx),%esi
-f0104e1c:	89 f3                	mov    %esi,%ebx
-f0104e1e:	80 fb 19             	cmp    $0x19,%bl
-f0104e21:	77 14                	ja     f0104e37 <strtol+0xac>
+f0105061:	8d 71 bf             	lea    -0x41(%ecx),%esi
+f0105064:	89 f3                	mov    %esi,%ebx
+f0105066:	80 fb 19             	cmp    $0x19,%bl
+f0105069:	77 14                	ja     f010507f <strtol+0xac>
 			dig = *s - 'A' + 10;
-f0104e23:	0f be c9             	movsbl %cl,%ecx
-f0104e26:	83 e9 37             	sub    $0x37,%ecx
+f010506b:	0f be c9             	movsbl %cl,%ecx
+f010506e:	83 e9 37             	sub    $0x37,%ecx
 		else
 			break;
 		if (dig >= base)
-f0104e29:	3b 4d 10             	cmp    0x10(%ebp),%ecx
-f0104e2c:	7d 0d                	jge    f0104e3b <strtol+0xb0>
+f0105071:	3b 4d 10             	cmp    0x10(%ebp),%ecx
+f0105074:	7d 0d                	jge    f0105083 <strtol+0xb0>
 			break;
 		s++, val = (val * base) + dig;
-f0104e2e:	42                   	inc    %edx
-f0104e2f:	0f af 45 10          	imul   0x10(%ebp),%eax
-f0104e33:	01 c8                	add    %ecx,%eax
+f0105076:	42                   	inc    %edx
+f0105077:	0f af 45 10          	imul   0x10(%ebp),%eax
+f010507b:	01 c8                	add    %ecx,%eax
 		// we don't properly detect overflow!
 	}
-f0104e35:	eb bc                	jmp    f0104df3 <strtol+0x68>
-f0104e37:	89 c1                	mov    %eax,%ecx
-f0104e39:	eb 02                	jmp    f0104e3d <strtol+0xb2>
-f0104e3b:	89 c1                	mov    %eax,%ecx
+f010507d:	eb bc                	jmp    f010503b <strtol+0x68>
+f010507f:	89 c1                	mov    %eax,%ecx
+f0105081:	eb 02                	jmp    f0105085 <strtol+0xb2>
+f0105083:	89 c1                	mov    %eax,%ecx
 
 	if (endptr)
-f0104e3d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
-f0104e41:	74 05                	je     f0104e48 <strtol+0xbd>
+f0105085:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+f0105089:	74 05                	je     f0105090 <strtol+0xbd>
 		*endptr = (char *) s;
-f0104e43:	8b 75 0c             	mov    0xc(%ebp),%esi
-f0104e46:	89 16                	mov    %edx,(%esi)
+f010508b:	8b 75 0c             	mov    0xc(%ebp),%esi
+f010508e:	89 16                	mov    %edx,(%esi)
 	return (neg ? -val : val);
-f0104e48:	85 ff                	test   %edi,%edi
-f0104e4a:	74 04                	je     f0104e50 <strtol+0xc5>
-f0104e4c:	89 c8                	mov    %ecx,%eax
-f0104e4e:	f7 d8                	neg    %eax
-}
-f0104e50:	5b                   	pop    %ebx
-f0104e51:	5e                   	pop    %esi
-f0104e52:	5f                   	pop    %edi
-f0104e53:	5d                   	pop    %ebp
-f0104e54:	c3                   	ret    
-f0104e55:	66 90                	xchg   %ax,%ax
-f0104e57:	66 90                	xchg   %ax,%ax
-f0104e59:	66 90                	xchg   %ax,%ax
-f0104e5b:	66 90                	xchg   %ax,%ax
-f0104e5d:	66 90                	xchg   %ax,%ax
-f0104e5f:	90                   	nop
-
-f0104e60 <__udivdi3>:
-f0104e60:	55                   	push   %ebp
-f0104e61:	57                   	push   %edi
-f0104e62:	56                   	push   %esi
-f0104e63:	83 ec 0c             	sub    $0xc,%esp
-f0104e66:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
-f0104e6a:	8b 6c 24 20          	mov    0x20(%esp),%ebp
-f0104e6e:	8b 4c 24 24          	mov    0x24(%esp),%ecx
-f0104e72:	8b 44 24 28          	mov    0x28(%esp),%eax
-f0104e76:	89 7c 24 04          	mov    %edi,0x4(%esp)
-f0104e7a:	89 ea                	mov    %ebp,%edx
-f0104e7c:	89 0c 24             	mov    %ecx,(%esp)
-f0104e7f:	85 c0                	test   %eax,%eax
-f0104e81:	75 2d                	jne    f0104eb0 <__udivdi3+0x50>
-f0104e83:	39 e9                	cmp    %ebp,%ecx
-f0104e85:	77 61                	ja     f0104ee8 <__udivdi3+0x88>
-f0104e87:	89 ce                	mov    %ecx,%esi
-f0104e89:	85 c9                	test   %ecx,%ecx
-f0104e8b:	75 0b                	jne    f0104e98 <__udivdi3+0x38>
-f0104e8d:	b8 01 00 00 00       	mov    $0x1,%eax
-f0104e92:	31 d2                	xor    %edx,%edx
-f0104e94:	f7 f1                	div    %ecx
-f0104e96:	89 c6                	mov    %eax,%esi
-f0104e98:	31 d2                	xor    %edx,%edx
-f0104e9a:	89 e8                	mov    %ebp,%eax
-f0104e9c:	f7 f6                	div    %esi
-f0104e9e:	89 c5                	mov    %eax,%ebp
-f0104ea0:	89 f8                	mov    %edi,%eax
-f0104ea2:	f7 f6                	div    %esi
-f0104ea4:	89 ea                	mov    %ebp,%edx
-f0104ea6:	83 c4 0c             	add    $0xc,%esp
-f0104ea9:	5e                   	pop    %esi
-f0104eaa:	5f                   	pop    %edi
-f0104eab:	5d                   	pop    %ebp
-f0104eac:	c3                   	ret    
-f0104ead:	8d 76 00             	lea    0x0(%esi),%esi
-f0104eb0:	39 e8                	cmp    %ebp,%eax
-f0104eb2:	77 24                	ja     f0104ed8 <__udivdi3+0x78>
-f0104eb4:	0f bd e8             	bsr    %eax,%ebp
-f0104eb7:	83 f5 1f             	xor    $0x1f,%ebp
-f0104eba:	75 3c                	jne    f0104ef8 <__udivdi3+0x98>
-f0104ebc:	8b 74 24 04          	mov    0x4(%esp),%esi
-f0104ec0:	39 34 24             	cmp    %esi,(%esp)
-f0104ec3:	0f 86 9f 00 00 00    	jbe    f0104f68 <__udivdi3+0x108>
-f0104ec9:	39 d0                	cmp    %edx,%eax
-f0104ecb:	0f 82 97 00 00 00    	jb     f0104f68 <__udivdi3+0x108>
-f0104ed1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-f0104ed8:	31 d2                	xor    %edx,%edx
-f0104eda:	31 c0                	xor    %eax,%eax
-f0104edc:	83 c4 0c             	add    $0xc,%esp
-f0104edf:	5e                   	pop    %esi
-f0104ee0:	5f                   	pop    %edi
-f0104ee1:	5d                   	pop    %ebp
-f0104ee2:	c3                   	ret    
-f0104ee3:	90                   	nop
-f0104ee4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-f0104ee8:	89 f8                	mov    %edi,%eax
-f0104eea:	f7 f1                	div    %ecx
-f0104eec:	31 d2                	xor    %edx,%edx
-f0104eee:	83 c4 0c             	add    $0xc,%esp
-f0104ef1:	5e                   	pop    %esi
-f0104ef2:	5f                   	pop    %edi
-f0104ef3:	5d                   	pop    %ebp
-f0104ef4:	c3                   	ret    
-f0104ef5:	8d 76 00             	lea    0x0(%esi),%esi
-f0104ef8:	89 e9                	mov    %ebp,%ecx
-f0104efa:	8b 3c 24             	mov    (%esp),%edi
-f0104efd:	d3 e0                	shl    %cl,%eax
-f0104eff:	89 c6                	mov    %eax,%esi
-f0104f01:	b8 20 00 00 00       	mov    $0x20,%eax
-f0104f06:	29 e8                	sub    %ebp,%eax
-f0104f08:	88 c1                	mov    %al,%cl
-f0104f0a:	d3 ef                	shr    %cl,%edi
-f0104f0c:	89 7c 24 08          	mov    %edi,0x8(%esp)
-f0104f10:	89 e9                	mov    %ebp,%ecx
-f0104f12:	8b 3c 24             	mov    (%esp),%edi
-f0104f15:	09 74 24 08          	or     %esi,0x8(%esp)
-f0104f19:	d3 e7                	shl    %cl,%edi
-f0104f1b:	89 d6                	mov    %edx,%esi
-f0104f1d:	88 c1                	mov    %al,%cl
-f0104f1f:	d3 ee                	shr    %cl,%esi
-f0104f21:	89 e9                	mov    %ebp,%ecx
-f0104f23:	89 3c 24             	mov    %edi,(%esp)
-f0104f26:	d3 e2                	shl    %cl,%edx
-f0104f28:	8b 7c 24 04          	mov    0x4(%esp),%edi
-f0104f2c:	88 c1                	mov    %al,%cl
-f0104f2e:	d3 ef                	shr    %cl,%edi
-f0104f30:	09 d7                	or     %edx,%edi
-f0104f32:	89 f2                	mov    %esi,%edx
-f0104f34:	89 f8                	mov    %edi,%eax
-f0104f36:	f7 74 24 08          	divl   0x8(%esp)
-f0104f3a:	89 d6                	mov    %edx,%esi
-f0104f3c:	89 c7                	mov    %eax,%edi
-f0104f3e:	f7 24 24             	mull   (%esp)
-f0104f41:	89 14 24             	mov    %edx,(%esp)
-f0104f44:	39 d6                	cmp    %edx,%esi
-f0104f46:	72 30                	jb     f0104f78 <__udivdi3+0x118>
-f0104f48:	8b 54 24 04          	mov    0x4(%esp),%edx
-f0104f4c:	89 e9                	mov    %ebp,%ecx
-f0104f4e:	d3 e2                	shl    %cl,%edx
-f0104f50:	39 c2                	cmp    %eax,%edx
-f0104f52:	73 05                	jae    f0104f59 <__udivdi3+0xf9>
-f0104f54:	3b 34 24             	cmp    (%esp),%esi
-f0104f57:	74 1f                	je     f0104f78 <__udivdi3+0x118>
-f0104f59:	89 f8                	mov    %edi,%eax
-f0104f5b:	31 d2                	xor    %edx,%edx
-f0104f5d:	e9 7a ff ff ff       	jmp    f0104edc <__udivdi3+0x7c>
-f0104f62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-f0104f68:	31 d2                	xor    %edx,%edx
-f0104f6a:	b8 01 00 00 00       	mov    $0x1,%eax
-f0104f6f:	e9 68 ff ff ff       	jmp    f0104edc <__udivdi3+0x7c>
-f0104f74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-f0104f78:	8d 47 ff             	lea    -0x1(%edi),%eax
-f0104f7b:	31 d2                	xor    %edx,%edx
-f0104f7d:	83 c4 0c             	add    $0xc,%esp
-f0104f80:	5e                   	pop    %esi
-f0104f81:	5f                   	pop    %edi
-f0104f82:	5d                   	pop    %ebp
-f0104f83:	c3                   	ret    
-f0104f84:	66 90                	xchg   %ax,%ax
-f0104f86:	66 90                	xchg   %ax,%ax
-f0104f88:	66 90                	xchg   %ax,%ax
-f0104f8a:	66 90                	xchg   %ax,%ax
-f0104f8c:	66 90                	xchg   %ax,%ax
-f0104f8e:	66 90                	xchg   %ax,%ax
-
-f0104f90 <__umoddi3>:
-f0104f90:	55                   	push   %ebp
-f0104f91:	57                   	push   %edi
-f0104f92:	56                   	push   %esi
-f0104f93:	83 ec 14             	sub    $0x14,%esp
-f0104f96:	8b 44 24 28          	mov    0x28(%esp),%eax
-f0104f9a:	8b 4c 24 24          	mov    0x24(%esp),%ecx
-f0104f9e:	89 c7                	mov    %eax,%edi
-f0104fa0:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0104fa4:	8b 74 24 2c          	mov    0x2c(%esp),%esi
-f0104fa8:	8b 44 24 30          	mov    0x30(%esp),%eax
-f0104fac:	89 4c 24 10          	mov    %ecx,0x10(%esp)
-f0104fb0:	89 34 24             	mov    %esi,(%esp)
-f0104fb3:	89 c2                	mov    %eax,%edx
-f0104fb5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-f0104fb9:	89 7c 24 0c          	mov    %edi,0xc(%esp)
-f0104fbd:	85 c0                	test   %eax,%eax
-f0104fbf:	75 17                	jne    f0104fd8 <__umoddi3+0x48>
-f0104fc1:	39 fe                	cmp    %edi,%esi
-f0104fc3:	76 4b                	jbe    f0105010 <__umoddi3+0x80>
-f0104fc5:	89 c8                	mov    %ecx,%eax
-f0104fc7:	89 fa                	mov    %edi,%edx
-f0104fc9:	f7 f6                	div    %esi
-f0104fcb:	89 d0                	mov    %edx,%eax
-f0104fcd:	31 d2                	xor    %edx,%edx
-f0104fcf:	83 c4 14             	add    $0x14,%esp
-f0104fd2:	5e                   	pop    %esi
-f0104fd3:	5f                   	pop    %edi
-f0104fd4:	5d                   	pop    %ebp
-f0104fd5:	c3                   	ret    
-f0104fd6:	66 90                	xchg   %ax,%ax
-f0104fd8:	39 f8                	cmp    %edi,%eax
-f0104fda:	77 54                	ja     f0105030 <__umoddi3+0xa0>
-f0104fdc:	0f bd e8             	bsr    %eax,%ebp
-f0104fdf:	83 f5 1f             	xor    $0x1f,%ebp
-f0104fe2:	75 5c                	jne    f0105040 <__umoddi3+0xb0>
-f0104fe4:	8b 7c 24 08          	mov    0x8(%esp),%edi
-f0104fe8:	39 3c 24             	cmp    %edi,(%esp)
-f0104feb:	0f 87 f7 00 00 00    	ja     f01050e8 <__umoddi3+0x158>
-f0104ff1:	8b 7c 24 04          	mov    0x4(%esp),%edi
-f0104ff5:	29 f1                	sub    %esi,%ecx
-f0104ff7:	19 c7                	sbb    %eax,%edi
-f0104ff9:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-f0104ffd:	89 7c 24 0c          	mov    %edi,0xc(%esp)
-f0105001:	8b 44 24 08          	mov    0x8(%esp),%eax
-f0105005:	8b 54 24 0c          	mov    0xc(%esp),%edx
-f0105009:	83 c4 14             	add    $0x14,%esp
-f010500c:	5e                   	pop    %esi
-f010500d:	5f                   	pop    %edi
-f010500e:	5d                   	pop    %ebp
-f010500f:	c3                   	ret    
-f0105010:	89 f5                	mov    %esi,%ebp
-f0105012:	85 f6                	test   %esi,%esi
-f0105014:	75 0b                	jne    f0105021 <__umoddi3+0x91>
-f0105016:	b8 01 00 00 00       	mov    $0x1,%eax
-f010501b:	31 d2                	xor    %edx,%edx
-f010501d:	f7 f6                	div    %esi
-f010501f:	89 c5                	mov    %eax,%ebp
-f0105021:	8b 44 24 04          	mov    0x4(%esp),%eax
-f0105025:	31 d2                	xor    %edx,%edx
-f0105027:	f7 f5                	div    %ebp
-f0105029:	89 c8                	mov    %ecx,%eax
-f010502b:	f7 f5                	div    %ebp
-f010502d:	eb 9c                	jmp    f0104fcb <__umoddi3+0x3b>
-f010502f:	90                   	nop
-f0105030:	89 c8                	mov    %ecx,%eax
-f0105032:	89 fa                	mov    %edi,%edx
-f0105034:	83 c4 14             	add    $0x14,%esp
-f0105037:	5e                   	pop    %esi
-f0105038:	5f                   	pop    %edi
-f0105039:	5d                   	pop    %ebp
-f010503a:	c3                   	ret    
-f010503b:	90                   	nop
-f010503c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-f0105040:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
-f0105047:	00 
-f0105048:	8b 34 24             	mov    (%esp),%esi
-f010504b:	8b 44 24 04          	mov    0x4(%esp),%eax
-f010504f:	89 e9                	mov    %ebp,%ecx
-f0105051:	29 e8                	sub    %ebp,%eax
-f0105053:	89 44 24 04          	mov    %eax,0x4(%esp)
-f0105057:	89 f0                	mov    %esi,%eax
-f0105059:	d3 e2                	shl    %cl,%edx
-f010505b:	8a 4c 24 04          	mov    0x4(%esp),%cl
-f010505f:	d3 e8                	shr    %cl,%eax
-f0105061:	89 04 24             	mov    %eax,(%esp)
-f0105064:	89 e9                	mov    %ebp,%ecx
-f0105066:	89 f0                	mov    %esi,%eax
-f0105068:	09 14 24             	or     %edx,(%esp)
-f010506b:	d3 e0                	shl    %cl,%eax
-f010506d:	89 fa                	mov    %edi,%edx
-f010506f:	8a 4c 24 04          	mov    0x4(%esp),%cl
-f0105073:	d3 ea                	shr    %cl,%edx
-f0105075:	89 e9                	mov    %ebp,%ecx
-f0105077:	89 c6                	mov    %eax,%esi
-f0105079:	d3 e7                	shl    %cl,%edi
-f010507b:	89 44 24 0c          	mov    %eax,0xc(%esp)
-f010507f:	8a 4c 24 04          	mov    0x4(%esp),%cl
-f0105083:	8b 44 24 10          	mov    0x10(%esp),%eax
-f0105087:	d3 e8                	shr    %cl,%eax
-f0105089:	09 f8                	or     %edi,%eax
-f010508b:	89 e9                	mov    %ebp,%ecx
-f010508d:	8b 7c 24 10          	mov    0x10(%esp),%edi
-f0105091:	d3 e7                	shl    %cl,%edi
-f0105093:	f7 34 24             	divl   (%esp)
-f0105096:	89 d1                	mov    %edx,%ecx
-f0105098:	89 7c 24 08          	mov    %edi,0x8(%esp)
-f010509c:	f7 e6                	mul    %esi
-f010509e:	89 c7                	mov    %eax,%edi
-f01050a0:	89 d6                	mov    %edx,%esi
-f01050a2:	39 d1                	cmp    %edx,%ecx
-f01050a4:	72 2e                	jb     f01050d4 <__umoddi3+0x144>
-f01050a6:	39 44 24 08          	cmp    %eax,0x8(%esp)
-f01050aa:	72 24                	jb     f01050d0 <__umoddi3+0x140>
-f01050ac:	89 ca                	mov    %ecx,%edx
-f01050ae:	89 e9                	mov    %ebp,%ecx
-f01050b0:	8b 44 24 08          	mov    0x8(%esp),%eax
-f01050b4:	29 f8                	sub    %edi,%eax
-f01050b6:	19 f2                	sbb    %esi,%edx
-f01050b8:	d3 e8                	shr    %cl,%eax
-f01050ba:	89 d6                	mov    %edx,%esi
-f01050bc:	8a 4c 24 04          	mov    0x4(%esp),%cl
-f01050c0:	d3 e6                	shl    %cl,%esi
-f01050c2:	89 e9                	mov    %ebp,%ecx
-f01050c4:	09 f0                	or     %esi,%eax
-f01050c6:	d3 ea                	shr    %cl,%edx
-f01050c8:	83 c4 14             	add    $0x14,%esp
-f01050cb:	5e                   	pop    %esi
-f01050cc:	5f                   	pop    %edi
-f01050cd:	5d                   	pop    %ebp
-f01050ce:	c3                   	ret    
-f01050cf:	90                   	nop
-f01050d0:	39 d1                	cmp    %edx,%ecx
-f01050d2:	75 d8                	jne    f01050ac <__umoddi3+0x11c>
-f01050d4:	89 d6                	mov    %edx,%esi
-f01050d6:	89 c7                	mov    %eax,%edi
-f01050d8:	2b 7c 24 0c          	sub    0xc(%esp),%edi
-f01050dc:	1b 34 24             	sbb    (%esp),%esi
-f01050df:	eb cb                	jmp    f01050ac <__umoddi3+0x11c>
-f01050e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-f01050e8:	3b 44 24 0c          	cmp    0xc(%esp),%eax
-f01050ec:	0f 82 ff fe ff ff    	jb     f0104ff1 <__umoddi3+0x61>
-f01050f2:	e9 0a ff ff ff       	jmp    f0105001 <__umoddi3+0x71>
+f0105090:	85 ff                	test   %edi,%edi
+f0105092:	74 04                	je     f0105098 <strtol+0xc5>
+f0105094:	89 c8                	mov    %ecx,%eax
+f0105096:	f7 d8                	neg    %eax
+}
+f0105098:	5b                   	pop    %ebx
+f0105099:	5e                   	pop    %esi
+f010509a:	5f                   	pop    %edi
+f010509b:	5d                   	pop    %ebp
+f010509c:	c3                   	ret    
+f010509d:	66 90                	xchg   %ax,%ax
+f010509f:	90                   	nop
+
+f01050a0 <__udivdi3>:
+f01050a0:	55                   	push   %ebp
+f01050a1:	57                   	push   %edi
+f01050a2:	56                   	push   %esi
+f01050a3:	83 ec 0c             	sub    $0xc,%esp
+f01050a6:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
+f01050aa:	8b 6c 24 20          	mov    0x20(%esp),%ebp
+f01050ae:	8b 4c 24 24          	mov    0x24(%esp),%ecx
+f01050b2:	8b 44 24 28          	mov    0x28(%esp),%eax
+f01050b6:	89 7c 24 04          	mov    %edi,0x4(%esp)
+f01050ba:	89 ea                	mov    %ebp,%edx
+f01050bc:	89 0c 24             	mov    %ecx,(%esp)
+f01050bf:	85 c0                	test   %eax,%eax
+f01050c1:	75 2d                	jne    f01050f0 <__udivdi3+0x50>
+f01050c3:	39 e9                	cmp    %ebp,%ecx
+f01050c5:	77 61                	ja     f0105128 <__udivdi3+0x88>
+f01050c7:	89 ce                	mov    %ecx,%esi
+f01050c9:	85 c9                	test   %ecx,%ecx
+f01050cb:	75 0b                	jne    f01050d8 <__udivdi3+0x38>
+f01050cd:	b8 01 00 00 00       	mov    $0x1,%eax
+f01050d2:	31 d2                	xor    %edx,%edx
+f01050d4:	f7 f1                	div    %ecx
+f01050d6:	89 c6                	mov    %eax,%esi
+f01050d8:	31 d2                	xor    %edx,%edx
+f01050da:	89 e8                	mov    %ebp,%eax
+f01050dc:	f7 f6                	div    %esi
+f01050de:	89 c5                	mov    %eax,%ebp
+f01050e0:	89 f8                	mov    %edi,%eax
+f01050e2:	f7 f6                	div    %esi
+f01050e4:	89 ea                	mov    %ebp,%edx
+f01050e6:	83 c4 0c             	add    $0xc,%esp
+f01050e9:	5e                   	pop    %esi
+f01050ea:	5f                   	pop    %edi
+f01050eb:	5d                   	pop    %ebp
+f01050ec:	c3                   	ret    
+f01050ed:	8d 76 00             	lea    0x0(%esi),%esi
+f01050f0:	39 e8                	cmp    %ebp,%eax
+f01050f2:	77 24                	ja     f0105118 <__udivdi3+0x78>
+f01050f4:	0f bd e8             	bsr    %eax,%ebp
+f01050f7:	83 f5 1f             	xor    $0x1f,%ebp
+f01050fa:	75 3c                	jne    f0105138 <__udivdi3+0x98>
+f01050fc:	8b 74 24 04          	mov    0x4(%esp),%esi
+f0105100:	39 34 24             	cmp    %esi,(%esp)
+f0105103:	0f 86 9f 00 00 00    	jbe    f01051a8 <__udivdi3+0x108>
+f0105109:	39 d0                	cmp    %edx,%eax
+f010510b:	0f 82 97 00 00 00    	jb     f01051a8 <__udivdi3+0x108>
+f0105111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+f0105118:	31 d2                	xor    %edx,%edx
+f010511a:	31 c0                	xor    %eax,%eax
+f010511c:	83 c4 0c             	add    $0xc,%esp
+f010511f:	5e                   	pop    %esi
+f0105120:	5f                   	pop    %edi
+f0105121:	5d                   	pop    %ebp
+f0105122:	c3                   	ret    
+f0105123:	90                   	nop
+f0105124:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+f0105128:	89 f8                	mov    %edi,%eax
+f010512a:	f7 f1                	div    %ecx
+f010512c:	31 d2                	xor    %edx,%edx
+f010512e:	83 c4 0c             	add    $0xc,%esp
+f0105131:	5e                   	pop    %esi
+f0105132:	5f                   	pop    %edi
+f0105133:	5d                   	pop    %ebp
+f0105134:	c3                   	ret    
+f0105135:	8d 76 00             	lea    0x0(%esi),%esi
+f0105138:	89 e9                	mov    %ebp,%ecx
+f010513a:	8b 3c 24             	mov    (%esp),%edi
+f010513d:	d3 e0                	shl    %cl,%eax
+f010513f:	89 c6                	mov    %eax,%esi
+f0105141:	b8 20 00 00 00       	mov    $0x20,%eax
+f0105146:	29 e8                	sub    %ebp,%eax
+f0105148:	88 c1                	mov    %al,%cl
+f010514a:	d3 ef                	shr    %cl,%edi
+f010514c:	89 7c 24 08          	mov    %edi,0x8(%esp)
+f0105150:	89 e9                	mov    %ebp,%ecx
+f0105152:	8b 3c 24             	mov    (%esp),%edi
+f0105155:	09 74 24 08          	or     %esi,0x8(%esp)
+f0105159:	d3 e7                	shl    %cl,%edi
+f010515b:	89 d6                	mov    %edx,%esi
+f010515d:	88 c1                	mov    %al,%cl
+f010515f:	d3 ee                	shr    %cl,%esi
+f0105161:	89 e9                	mov    %ebp,%ecx
+f0105163:	89 3c 24             	mov    %edi,(%esp)
+f0105166:	d3 e2                	shl    %cl,%edx
+f0105168:	8b 7c 24 04          	mov    0x4(%esp),%edi
+f010516c:	88 c1                	mov    %al,%cl
+f010516e:	d3 ef                	shr    %cl,%edi
+f0105170:	09 d7                	or     %edx,%edi
+f0105172:	89 f2                	mov    %esi,%edx
+f0105174:	89 f8                	mov    %edi,%eax
+f0105176:	f7 74 24 08          	divl   0x8(%esp)
+f010517a:	89 d6                	mov    %edx,%esi
+f010517c:	89 c7                	mov    %eax,%edi
+f010517e:	f7 24 24             	mull   (%esp)
+f0105181:	89 14 24             	mov    %edx,(%esp)
+f0105184:	39 d6                	cmp    %edx,%esi
+f0105186:	72 30                	jb     f01051b8 <__udivdi3+0x118>
+f0105188:	8b 54 24 04          	mov    0x4(%esp),%edx
+f010518c:	89 e9                	mov    %ebp,%ecx
+f010518e:	d3 e2                	shl    %cl,%edx
+f0105190:	39 c2                	cmp    %eax,%edx
+f0105192:	73 05                	jae    f0105199 <__udivdi3+0xf9>
+f0105194:	3b 34 24             	cmp    (%esp),%esi
+f0105197:	74 1f                	je     f01051b8 <__udivdi3+0x118>
+f0105199:	89 f8                	mov    %edi,%eax
+f010519b:	31 d2                	xor    %edx,%edx
+f010519d:	e9 7a ff ff ff       	jmp    f010511c <__udivdi3+0x7c>
+f01051a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+f01051a8:	31 d2                	xor    %edx,%edx
+f01051aa:	b8 01 00 00 00       	mov    $0x1,%eax
+f01051af:	e9 68 ff ff ff       	jmp    f010511c <__udivdi3+0x7c>
+f01051b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+f01051b8:	8d 47 ff             	lea    -0x1(%edi),%eax
+f01051bb:	31 d2                	xor    %edx,%edx
+f01051bd:	83 c4 0c             	add    $0xc,%esp
+f01051c0:	5e                   	pop    %esi
+f01051c1:	5f                   	pop    %edi
+f01051c2:	5d                   	pop    %ebp
+f01051c3:	c3                   	ret    
+f01051c4:	66 90                	xchg   %ax,%ax
+f01051c6:	66 90                	xchg   %ax,%ax
+f01051c8:	66 90                	xchg   %ax,%ax
+f01051ca:	66 90                	xchg   %ax,%ax
+f01051cc:	66 90                	xchg   %ax,%ax
+f01051ce:	66 90                	xchg   %ax,%ax
+
+f01051d0 <__umoddi3>:
+f01051d0:	55                   	push   %ebp
+f01051d1:	57                   	push   %edi
+f01051d2:	56                   	push   %esi
+f01051d3:	83 ec 14             	sub    $0x14,%esp
+f01051d6:	8b 44 24 28          	mov    0x28(%esp),%eax
+f01051da:	8b 4c 24 24          	mov    0x24(%esp),%ecx
+f01051de:	89 c7                	mov    %eax,%edi
+f01051e0:	89 44 24 04          	mov    %eax,0x4(%esp)
+f01051e4:	8b 74 24 2c          	mov    0x2c(%esp),%esi
+f01051e8:	8b 44 24 30          	mov    0x30(%esp),%eax
+f01051ec:	89 4c 24 10          	mov    %ecx,0x10(%esp)
+f01051f0:	89 34 24             	mov    %esi,(%esp)
+f01051f3:	89 c2                	mov    %eax,%edx
+f01051f5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+f01051f9:	89 7c 24 0c          	mov    %edi,0xc(%esp)
+f01051fd:	85 c0                	test   %eax,%eax
+f01051ff:	75 17                	jne    f0105218 <__umoddi3+0x48>
+f0105201:	39 fe                	cmp    %edi,%esi
+f0105203:	76 4b                	jbe    f0105250 <__umoddi3+0x80>
+f0105205:	89 c8                	mov    %ecx,%eax
+f0105207:	89 fa                	mov    %edi,%edx
+f0105209:	f7 f6                	div    %esi
+f010520b:	89 d0                	mov    %edx,%eax
+f010520d:	31 d2                	xor    %edx,%edx
+f010520f:	83 c4 14             	add    $0x14,%esp
+f0105212:	5e                   	pop    %esi
+f0105213:	5f                   	pop    %edi
+f0105214:	5d                   	pop    %ebp
+f0105215:	c3                   	ret    
+f0105216:	66 90                	xchg   %ax,%ax
+f0105218:	39 f8                	cmp    %edi,%eax
+f010521a:	77 54                	ja     f0105270 <__umoddi3+0xa0>
+f010521c:	0f bd e8             	bsr    %eax,%ebp
+f010521f:	83 f5 1f             	xor    $0x1f,%ebp
+f0105222:	75 5c                	jne    f0105280 <__umoddi3+0xb0>
+f0105224:	8b 7c 24 08          	mov    0x8(%esp),%edi
+f0105228:	39 3c 24             	cmp    %edi,(%esp)
+f010522b:	0f 87 f7 00 00 00    	ja     f0105328 <__umoddi3+0x158>
+f0105231:	8b 7c 24 04          	mov    0x4(%esp),%edi
+f0105235:	29 f1                	sub    %esi,%ecx
+f0105237:	19 c7                	sbb    %eax,%edi
+f0105239:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+f010523d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
+f0105241:	8b 44 24 08          	mov    0x8(%esp),%eax
+f0105245:	8b 54 24 0c          	mov    0xc(%esp),%edx
+f0105249:	83 c4 14             	add    $0x14,%esp
+f010524c:	5e                   	pop    %esi
+f010524d:	5f                   	pop    %edi
+f010524e:	5d                   	pop    %ebp
+f010524f:	c3                   	ret    
+f0105250:	89 f5                	mov    %esi,%ebp
+f0105252:	85 f6                	test   %esi,%esi
+f0105254:	75 0b                	jne    f0105261 <__umoddi3+0x91>
+f0105256:	b8 01 00 00 00       	mov    $0x1,%eax
+f010525b:	31 d2                	xor    %edx,%edx
+f010525d:	f7 f6                	div    %esi
+f010525f:	89 c5                	mov    %eax,%ebp
+f0105261:	8b 44 24 04          	mov    0x4(%esp),%eax
+f0105265:	31 d2                	xor    %edx,%edx
+f0105267:	f7 f5                	div    %ebp
+f0105269:	89 c8                	mov    %ecx,%eax
+f010526b:	f7 f5                	div    %ebp
+f010526d:	eb 9c                	jmp    f010520b <__umoddi3+0x3b>
+f010526f:	90                   	nop
+f0105270:	89 c8                	mov    %ecx,%eax
+f0105272:	89 fa                	mov    %edi,%edx
+f0105274:	83 c4 14             	add    $0x14,%esp
+f0105277:	5e                   	pop    %esi
+f0105278:	5f                   	pop    %edi
+f0105279:	5d                   	pop    %ebp
+f010527a:	c3                   	ret    
+f010527b:	90                   	nop
+f010527c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+f0105280:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
+f0105287:	00 
+f0105288:	8b 34 24             	mov    (%esp),%esi
+f010528b:	8b 44 24 04          	mov    0x4(%esp),%eax
+f010528f:	89 e9                	mov    %ebp,%ecx
+f0105291:	29 e8                	sub    %ebp,%eax
+f0105293:	89 44 24 04          	mov    %eax,0x4(%esp)
+f0105297:	89 f0                	mov    %esi,%eax
+f0105299:	d3 e2                	shl    %cl,%edx
+f010529b:	8a 4c 24 04          	mov    0x4(%esp),%cl
+f010529f:	d3 e8                	shr    %cl,%eax
+f01052a1:	89 04 24             	mov    %eax,(%esp)
+f01052a4:	89 e9                	mov    %ebp,%ecx
+f01052a6:	89 f0                	mov    %esi,%eax
+f01052a8:	09 14 24             	or     %edx,(%esp)
+f01052ab:	d3 e0                	shl    %cl,%eax
+f01052ad:	89 fa                	mov    %edi,%edx
+f01052af:	8a 4c 24 04          	mov    0x4(%esp),%cl
+f01052b3:	d3 ea                	shr    %cl,%edx
+f01052b5:	89 e9                	mov    %ebp,%ecx
+f01052b7:	89 c6                	mov    %eax,%esi
+f01052b9:	d3 e7                	shl    %cl,%edi
+f01052bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
+f01052bf:	8a 4c 24 04          	mov    0x4(%esp),%cl
+f01052c3:	8b 44 24 10          	mov    0x10(%esp),%eax
+f01052c7:	d3 e8                	shr    %cl,%eax
+f01052c9:	09 f8                	or     %edi,%eax
+f01052cb:	89 e9                	mov    %ebp,%ecx
+f01052cd:	8b 7c 24 10          	mov    0x10(%esp),%edi
+f01052d1:	d3 e7                	shl    %cl,%edi
+f01052d3:	f7 34 24             	divl   (%esp)
+f01052d6:	89 d1                	mov    %edx,%ecx
+f01052d8:	89 7c 24 08          	mov    %edi,0x8(%esp)
+f01052dc:	f7 e6                	mul    %esi
+f01052de:	89 c7                	mov    %eax,%edi
+f01052e0:	89 d6                	mov    %edx,%esi
+f01052e2:	39 d1                	cmp    %edx,%ecx
+f01052e4:	72 2e                	jb     f0105314 <__umoddi3+0x144>
+f01052e6:	39 44 24 08          	cmp    %eax,0x8(%esp)
+f01052ea:	72 24                	jb     f0105310 <__umoddi3+0x140>
+f01052ec:	89 ca                	mov    %ecx,%edx
+f01052ee:	89 e9                	mov    %ebp,%ecx
+f01052f0:	8b 44 24 08          	mov    0x8(%esp),%eax
+f01052f4:	29 f8                	sub    %edi,%eax
+f01052f6:	19 f2                	sbb    %esi,%edx
+f01052f8:	d3 e8                	shr    %cl,%eax
+f01052fa:	89 d6                	mov    %edx,%esi
+f01052fc:	8a 4c 24 04          	mov    0x4(%esp),%cl
+f0105300:	d3 e6                	shl    %cl,%esi
+f0105302:	89 e9                	mov    %ebp,%ecx
+f0105304:	09 f0                	or     %esi,%eax
+f0105306:	d3 ea                	shr    %cl,%edx
+f0105308:	83 c4 14             	add    $0x14,%esp
+f010530b:	5e                   	pop    %esi
+f010530c:	5f                   	pop    %edi
+f010530d:	5d                   	pop    %ebp
+f010530e:	c3                   	ret    
+f010530f:	90                   	nop
+f0105310:	39 d1                	cmp    %edx,%ecx
+f0105312:	75 d8                	jne    f01052ec <__umoddi3+0x11c>
+f0105314:	89 d6                	mov    %edx,%esi
+f0105316:	89 c7                	mov    %eax,%edi
+f0105318:	2b 7c 24 0c          	sub    0xc(%esp),%edi
+f010531c:	1b 34 24             	sbb    (%esp),%esi
+f010531f:	eb cb                	jmp    f01052ec <__umoddi3+0x11c>
+f0105321:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+f0105328:	3b 44 24 0c          	cmp    0xc(%esp),%eax
+f010532c:	0f 82 ff fe ff ff    	jb     f0105231 <__umoddi3+0x61>
+f0105332:	e9 0a ff ff ff       	jmp    f0105241 <__umoddi3+0x71>
diff --git a/obj/kern/kernel.img b/obj/kern/kernel.img
index c5ec10e..5499014 100644
Binary files a/obj/kern/kernel.img and b/obj/kern/kernel.img differ
diff --git a/obj/kern/kernel.sym b/obj/kern/kernel.sym
index f937b29..1431be3 100644
--- a/obj/kern/kernel.sym
+++ b/obj/kern/kernel.sym
@@ -54,85 +54,88 @@ f0103189 T tlb_invalidate
 f0103194 T user_mem_check
 f010319e T user_mem_assert
 f01031a4 t region_alloc
-f0103247 T envid2env
-f01032c5 T env_init_percpu
-f01032ef T env_init
-f0103346 T env_alloc
-f0103508 T env_create
-f0103665 T env_free
-f010384a T env_destroy
-f0103875 T env_pop_tf
-f01038a1 T env_run
-f0103914 T mc146818_read
-f010392c T mc146818_write
-f0103944 t putch
-f0103957 T vcprintf
-f010398a T cprintf
-f01039a4 T trap_init_percpu
-f0103a01 T trap_init
-f0103d11 T print_regs
-f0103db8 T print_trapframe
-f0103f3a T trap
-f0104055 T page_fault_handler
-f01040a0 T H_T_DIVIDE
-f01040a6 T H_T_DEBUG
-f01040ac T H_T_NMI
-f01040b2 T H_T_BRKPT
-f01040b8 T H_T_OFLOW
-f01040be T H_T_BOUND
-f01040c4 T H_T_ILLOP
-f01040ca T H_T_DEVICE
-f01040d0 T H_T_DBLFLT
-f01040d4 T H_T_TSS
-f01040d8 T H_T_SEGNP
-f01040dc T H_T_STACK
-f01040e0 T H_T_GPFLT
-f01040e4 T H_T_PGFLT
-f01040e8 T H_T_FPERR
-f01040ee T H_T_ALIGN
-f01040f2 T H_T_MCHK
-f01040f8 T H_T_SIMDERR
-f01040fe t _alltraps
-f0104110 T syscall
-f0104134 t stab_binsearch
-f010422f T debuginfo_eip
-f0104488 t printnum
-f0104579 t getuint
-f01045b3 t sprintputch
-f01045cf T printfmt
-f01045f7 T vprintfmt
-f01049a2 T vsnprintf
-f01049fa T snprintf
-f0104a24 T readline
-f0104aec T strlen
-f0104b02 T strnlen
-f0104b1f T strcpy
-f0104b3a T strcat
-f0104b65 T strncpy
-f0104b8f T strlcpy
-f0104bc7 T strcmp
-f0104bef T strncmp
-f0104c2e T strchr
-f0104c4b T strfind
-f0104c63 T memset
-f0104cb1 T memmove
-f0104d17 T memcpy
-f0104d38 T memcmp
-f0104d70 T memfind
-f0104d8b T strtol
-f0104e60 T __udivdi3
-f0104f90 T __umoddi3
-f01050f7 T etext
-f0105180 r charcode
-f01051a0 r togglecode
-f01052a0 r shiftcode
-f01059a0 r commands
-f0106a80 r excnames.1485
-f0106d00 r error_string
-f0106d30 R __STAB_BEGIN__
-f010ee84 R __STAB_END__
-f010ee85 R __STABSTR_BEGIN__
-f0111929 R __STABSTR_END__
+f010321f T envid2env
+f010329d T env_init_percpu
+f01032c7 T env_init
+f010331e T env_alloc
+f01034e0 T env_create
+f0103631 T env_free
+f0103816 T env_destroy
+f0103841 T env_pop_tf
+f010386d T env_run
+f01038e0 T mc146818_read
+f01038f8 T mc146818_write
+f0103910 t putch
+f0103923 T vcprintf
+f0103956 T cprintf
+f0103970 T trap_init_percpu
+f01039cd T trap_init
+f0103d08 T print_regs
+f0103daf T print_trapframe
+f0103f31 T page_fault_handler
+f0103fc2 T trap
+f0104160 T H_T_DIVIDE
+f0104166 T H_T_DEBUG
+f010416c T H_T_NMI
+f0104172 T H_T_BRKPT
+f0104178 T H_T_OFLOW
+f010417e T H_T_BOUND
+f0104184 T H_T_ILLOP
+f010418a T H_T_DEVICE
+f0104190 T H_T_DBLFLT
+f0104194 T H_T_TSS
+f0104198 T H_T_SEGNP
+f010419c T H_T_STACK
+f01041a0 T H_T_GPFLT
+f01041a4 T H_T_PGFLT
+f01041a8 T H_T_FPERR
+f01041ae T H_T_ALIGN
+f01041b2 T H_T_MCHK
+f01041b8 T H_T_SIMDERR
+f01041be T H_T_SYSCALL
+f01041c4 t _alltraps
+f01041d8 t sys_env_destroy
+f0104247 t sys_cputs
+f010430f T syscall
+f010437c t stab_binsearch
+f0104477 T debuginfo_eip
+f01046d0 t printnum
+f01047c1 t getuint
+f01047fb t sprintputch
+f0104817 T printfmt
+f010483f T vprintfmt
+f0104bea T vsnprintf
+f0104c42 T snprintf
+f0104c6c T readline
+f0104d34 T strlen
+f0104d4a T strnlen
+f0104d67 T strcpy
+f0104d82 T strcat
+f0104dad T strncpy
+f0104dd7 T strlcpy
+f0104e0f T strcmp
+f0104e37 T strncmp
+f0104e76 T strchr
+f0104e93 T strfind
+f0104eab T memset
+f0104ef9 T memmove
+f0104f5f T memcpy
+f0104f80 T memcmp
+f0104fb8 T memfind
+f0104fd3 T strtol
+f01050a0 T __udivdi3
+f01051d0 T __umoddi3
+f0105337 T etext
+f01053c0 r charcode
+f01053e0 r togglecode
+f01054e0 r shiftcode
+f0105be0 r commands
+f0106ce0 r excnames.1485
+f0106fc0 r error_string
+f0106ff0 R __STAB_BEGIN__
+f010f4a4 R __STAB_END__
+f010f4a5 R __STABSTR_BEGIN__
+f0111fcb R __STABSTR_END__
 f0112000 D bootstack
 f011a000 D bootstacktop
 f011a000 D entry_pgdir
diff --git a/obj/kern/syscall.o b/obj/kern/syscall.o
index 139c26f..3ff87f8 100644
Binary files a/obj/kern/syscall.o and b/obj/kern/syscall.o differ
diff --git a/obj/kern/trap.o b/obj/kern/trap.o
index 088a1ed..97a3c4b 100644
Binary files a/obj/kern/trap.o and b/obj/kern/trap.o differ
diff --git a/obj/kern/trapentry.o b/obj/kern/trapentry.o
index 0ddb7b4..655b39b 100644
Binary files a/obj/kern/trapentry.o and b/obj/kern/trapentry.o differ
diff --git a/obj/lib/entry.o b/obj/lib/entry.o
deleted file mode 100644
index 78c13da..0000000
Binary files a/obj/lib/entry.o and /dev/null differ
diff --git a/obj/lib/libjos.a b/obj/lib/libjos.a
index 8b31589..3fee672 100644
Binary files a/obj/lib/libjos.a and b/obj/lib/libjos.a differ
diff --git a/obj/lib/libmain.o b/obj/lib/libmain.o
index de41e30..a5f14fe 100644
Binary files a/obj/lib/libmain.o and b/obj/lib/libmain.o differ
diff --git a/obj/user/badsegment b/obj/user/badsegment
index 9605310..3c7c481 100755
Binary files a/obj/user/badsegment and b/obj/user/badsegment differ
diff --git a/obj/user/badsegment.asm b/obj/user/badsegment.asm
index 949f466..7ef323a 100644
--- a/obj/user/badsegment.asm
+++ b/obj/user/badsegment.asm
@@ -65,9 +65,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  80004c:	c7 05 04 20 80 00 00 	movl   $0x0,0x802004
-  800053:	00 00 00 
-
+	thisenv = &envs[0];
+  80004c:	c7 05 04 20 80 00 00 	movl   $0xeec00000,0x802004
+  800053:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   800056:	85 c0                	test   %eax,%eax
diff --git a/obj/user/breakpoint b/obj/user/breakpoint
index e1141dd..60906cc 100755
Binary files a/obj/user/breakpoint and b/obj/user/breakpoint differ
diff --git a/obj/user/breakpoint.asm b/obj/user/breakpoint.asm
index 8c70671..dc76f08 100644
--- a/obj/user/breakpoint.asm
+++ b/obj/user/breakpoint.asm
@@ -63,9 +63,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  800048:	c7 05 04 20 80 00 00 	movl   $0x0,0x802004
-  80004f:	00 00 00 
-
+	thisenv = &envs[0];
+  800048:	c7 05 04 20 80 00 00 	movl   $0xeec00000,0x802004
+  80004f:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   800052:	85 c0                	test   %eax,%eax
diff --git a/obj/user/buggyhello b/obj/user/buggyhello
index 98a7e1e..c457641 100755
Binary files a/obj/user/buggyhello and b/obj/user/buggyhello differ
diff --git a/obj/user/buggyhello.asm b/obj/user/buggyhello.asm
index aa0a744..0b362c3 100644
--- a/obj/user/buggyhello.asm
+++ b/obj/user/buggyhello.asm
@@ -66,9 +66,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  80005c:	c7 05 04 20 80 00 00 	movl   $0x0,0x802004
-  800063:	00 00 00 
-
+	thisenv = &envs[0];
+  80005c:	c7 05 04 20 80 00 00 	movl   $0xeec00000,0x802004
+  800063:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   800066:	85 c0                	test   %eax,%eax
diff --git a/obj/user/buggyhello2 b/obj/user/buggyhello2
index c7ef153..5369207 100755
Binary files a/obj/user/buggyhello2 and b/obj/user/buggyhello2 differ
diff --git a/obj/user/buggyhello2.asm b/obj/user/buggyhello2.asm
index 917c01d..4ef2dd3 100644
--- a/obj/user/buggyhello2.asm
+++ b/obj/user/buggyhello2.asm
@@ -69,9 +69,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  800060:	c7 05 08 20 80 00 00 	movl   $0x0,0x802008
-  800067:	00 00 00 
-
+	thisenv = &envs[0];
+  800060:	c7 05 08 20 80 00 00 	movl   $0xeec00000,0x802008
+  800067:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   80006a:	85 c0                	test   %eax,%eax
diff --git a/obj/user/divzero b/obj/user/divzero
index baf0182..27c21f1 100755
Binary files a/obj/user/divzero and b/obj/user/divzero differ
diff --git a/obj/user/divzero.asm b/obj/user/divzero.asm
index ae77e09..dd1475a 100644
--- a/obj/user/divzero.asm
+++ b/obj/user/divzero.asm
@@ -74,9 +74,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  800074:	c7 05 08 20 80 00 00 	movl   $0x0,0x802008
-  80007b:	00 00 00 
-
+	thisenv = &envs[0];
+  800074:	c7 05 08 20 80 00 00 	movl   $0xeec00000,0x802008
+  80007b:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   80007e:	85 c0                	test   %eax,%eax
diff --git a/obj/user/evilhello b/obj/user/evilhello
index 21fb44b..8ff6004 100755
Binary files a/obj/user/evilhello and b/obj/user/evilhello differ
diff --git a/obj/user/evilhello.asm b/obj/user/evilhello.asm
index f2c0532..41bd942 100644
--- a/obj/user/evilhello.asm
+++ b/obj/user/evilhello.asm
@@ -67,9 +67,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  80005c:	c7 05 04 20 80 00 00 	movl   $0x0,0x802004
-  800063:	00 00 00 
-
+	thisenv = &envs[0];
+  80005c:	c7 05 04 20 80 00 00 	movl   $0xeec00000,0x802004
+  800063:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   800066:	85 c0                	test   %eax,%eax
diff --git a/obj/user/faultread b/obj/user/faultread
index 348de7f..b5f58b0 100755
Binary files a/obj/user/faultread and b/obj/user/faultread differ
diff --git a/obj/user/faultread.asm b/obj/user/faultread.asm
index 4421a9a..9e8a8b6 100644
--- a/obj/user/faultread.asm
+++ b/obj/user/faultread.asm
@@ -68,9 +68,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  800060:	c7 05 04 20 80 00 00 	movl   $0x0,0x802004
-  800067:	00 00 00 
-
+	thisenv = &envs[0];
+  800060:	c7 05 04 20 80 00 00 	movl   $0xeec00000,0x802004
+  800067:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   80006a:	85 c0                	test   %eax,%eax
diff --git a/obj/user/faultreadkernel b/obj/user/faultreadkernel
index 21ade58..c06037b 100755
Binary files a/obj/user/faultreadkernel and b/obj/user/faultreadkernel differ
diff --git a/obj/user/faultreadkernel.asm b/obj/user/faultreadkernel.asm
index cbd8b04..b1fcfe1 100644
--- a/obj/user/faultreadkernel.asm
+++ b/obj/user/faultreadkernel.asm
@@ -68,9 +68,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  800060:	c7 05 04 20 80 00 00 	movl   $0x0,0x802004
-  800067:	00 00 00 
-
+	thisenv = &envs[0];
+  800060:	c7 05 04 20 80 00 00 	movl   $0xeec00000,0x802004
+  800067:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   80006a:	85 c0                	test   %eax,%eax
diff --git a/obj/user/faultwrite b/obj/user/faultwrite
index 98c2c84..8a00608 100755
Binary files a/obj/user/faultwrite and b/obj/user/faultwrite differ
diff --git a/obj/user/faultwrite.asm b/obj/user/faultwrite.asm
index 296b853..ebd398c 100644
--- a/obj/user/faultwrite.asm
+++ b/obj/user/faultwrite.asm
@@ -64,9 +64,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  800050:	c7 05 04 20 80 00 00 	movl   $0x0,0x802004
-  800057:	00 00 00 
-
+	thisenv = &envs[0];
+  800050:	c7 05 04 20 80 00 00 	movl   $0xeec00000,0x802004
+  800057:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   80005a:	85 c0                	test   %eax,%eax
diff --git a/obj/user/faultwritekernel b/obj/user/faultwritekernel
index 4c9008b..b521f6e 100755
Binary files a/obj/user/faultwritekernel and b/obj/user/faultwritekernel differ
diff --git a/obj/user/faultwritekernel.asm b/obj/user/faultwritekernel.asm
index cf236ff..61a3490 100644
--- a/obj/user/faultwritekernel.asm
+++ b/obj/user/faultwritekernel.asm
@@ -64,9 +64,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  800050:	c7 05 04 20 80 00 00 	movl   $0x0,0x802004
-  800057:	00 00 00 
-
+	thisenv = &envs[0];
+  800050:	c7 05 04 20 80 00 00 	movl   $0xeec00000,0x802004
+  800057:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   80005a:	85 c0                	test   %eax,%eax
diff --git a/obj/user/hello b/obj/user/hello
index 59a6165..251db09 100755
Binary files a/obj/user/hello and b/obj/user/hello differ
diff --git a/obj/user/hello.asm b/obj/user/hello.asm
index 48b58f5..3fd13fd 100644
--- a/obj/user/hello.asm
+++ b/obj/user/hello.asm
@@ -70,9 +70,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  80006c:	c7 05 04 20 80 00 00 	movl   $0x0,0x802004
-  800073:	00 00 00 
-
+	thisenv = &envs[0];
+  80006c:	c7 05 04 20 80 00 00 	movl   $0xeec00000,0x802004
+  800073:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   800076:	85 c0                	test   %eax,%eax
diff --git a/obj/user/softint b/obj/user/softint
index b908ec8..b11e794 100755
Binary files a/obj/user/softint and b/obj/user/softint differ
diff --git a/obj/user/softint.asm b/obj/user/softint.asm
index b65b643..1fc0436 100644
--- a/obj/user/softint.asm
+++ b/obj/user/softint.asm
@@ -63,9 +63,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  800048:	c7 05 04 20 80 00 00 	movl   $0x0,0x802004
-  80004f:	00 00 00 
-
+	thisenv = &envs[0];
+  800048:	c7 05 04 20 80 00 00 	movl   $0xeec00000,0x802004
+  80004f:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   800052:	85 c0                	test   %eax,%eax
diff --git a/obj/user/testbss b/obj/user/testbss
index 07d2e01..597621a 100755
Binary files a/obj/user/testbss and b/obj/user/testbss differ
diff --git a/obj/user/testbss.asm b/obj/user/testbss.asm
index c5f39e3..2b4159e 100644
--- a/obj/user/testbss.asm
+++ b/obj/user/testbss.asm
@@ -142,9 +142,9 @@ libmain(int argc, char **argv)
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
 	thisenv = 0;
-  800108:	c7 05 20 20 c0 00 00 	movl   $0x0,0xc02020
-  80010f:	00 00 00 
-
+	thisenv = &envs[0];
+  800108:	c7 05 20 20 c0 00 00 	movl   $0xeec00000,0xc02020
+  80010f:	00 c0 ee 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
   800112:	85 c0                	test   %eax,%eax
